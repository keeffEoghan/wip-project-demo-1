function e(e){return e&&e.__esModule?e.default:e}var n,t,r,a,i,o,s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};const f=(e,n,t)=>(e||(e=[]),e[0]=n,e[1]=t,e),l=(e,n,t,r)=>(e||(e=[]),e[0]=n,e[1]=t,e[2]=r,e),c=(e,n,t,r,a)=>(e||(e=[]),e[0]=n,e[1]=t,e[2]=r,e[3]=a,e),u=(e,n=e=>void 0!==e?": "+e:"")=>class extends Error{origMessage;constructor(t){super(e(t)+n(t)),this.origMessage=void 0!==t?String(t):""}},d=u(()=>"unsupported operation"),p=e=>{throw new d(e)},m=(e=1,n,...t)=>{let r=[,,].concat(t),a=(...t)=>{let a=r[t[e].length]||n;return a?a(...t):p(`no impl for vec size ${t[e].length}`)};return a.add=(e,n)=>r[e]=n,a.default=e=>n=e,a.impl=e=>null!=e&&r[e]||n,a},[v,h,g,b]=((e,n=1)=>{let t=(n,t,r)=>(n||(n=t),n[0]=e(t[0],r),n[1]=e(t[1],r),n),r=(n,t,r)=>(n||(n=t),n[0]=e(t[0],r),n[1]=e(t[1],r),n[2]=e(t[2],r),n),a=(n,t,r)=>(n||(n=t),n[0]=e(t[0],r),n[1]=e(t[1],r),n[2]=e(t[2],r),n[3]=e(t[3],r),n);return[m(n,(n,t,r)=>{n||(n=t);for(let a=t.length;a-- >0;)n[a]=e(t[a],r);return n},t,r,a),t,r,a]})((e,n)=>e*n),[x,y,_,w]=((e,n=1)=>{let t=(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a),n[1]=e(t[1],r[1],a),n),r=(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a),n[1]=e(t[1],r[1],a),n[2]=e(t[2],r[2],a),n),a=(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a),n[1]=e(t[1],r[1],a),n[2]=e(t[2],r[2],a),n[3]=e(t[3],r[3],a),n);return[m(n,(n,t,r,a)=>{n||(n=t);for(let i=t.length;i-- >0;)n[i]=e(t[i],r[i],a);return n},t,r,a),t,r,a]})((e,n,t)=>e+(n-e)*t),S=Array.prototype.forEach,M=(e,n)=>(S.call(n,e),n),T=Array.prototype.reduce,A=(e,n,t)=>void 0===t?T.call(n,e):T.call(n,e,t),z=(e,n,t=[])=>A((t,r,a)=>(t[a]=e(r,a,n,t),t),n,t||n),{fill:F}=Array.prototype,{isFinite:O}=Number,{floor:C}=Math,E=(e=0,n,t,r)=>F.call(O(e)?Array(C(e)):e,n,t,r),k=[[-1,-1],[-1,4],[4,-1]],D=k.length,U=k.flat(),V=e("/**\n * Default `gpgpu` vertex shader.\n *\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\n */\n\nprecision highp float;\n#define GLSLIFY 1\n\n/**\n * Uses the default prefix namespace; replaced with any given prefix if this\n * shader's used during `toStep`.\n *\n * @see {@link const.preDef}\n * @see {@link step.toStep}\n */\nattribute vec2 gpgpu_position;\n\nvarying vec2 gpgpu_uv;\n\nvoid main() {\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\n  gpgpu_uv = (gpgpu_position*0.5)+0.5;\n  gl_Position = vec4(gpgpu_position, 0, 1);\n}\n"),R=()=>[...U],P="gpgpu_",L=4,N=()=>[L],G=/[0-9\.]+/,B=()=>({color:[0,0,0,0],depth:1,stencil:0}),{isInteger:I}=Number,{isArray:$}=Array,K=(e,n=L)=>1<=e||e<=n||!!console.error(`\`gl-gpgpu\`: the given value (${e}) exceeds the range of channels available, \`[1, ${n}]\` inclusive.`,e,n),j=(e,n=e)=>(function(e={},n=e){let{derives:t,passes:r,textures:a,valueToTexture:i}=e;if(!t&&0!==t)return n;let o=n.reads=[],s=n.readsToValue=[],f={},l=(n,r)=>function a(l,c,u){let d=0,p=c;if(!0===t||I(t)||({value:p=p,step:d=d}=c),!0===p){let e;return A(a,(e=d,f[e]??=z((n,t)=>({step:e,value:t}),i)),l)}let m=i[p];if(!(I(d)&&I(m)))return console.error("`mapSamples`: invalid map for sample",t,e,n,r,c,u,d,m,p);let v=l||[],h=v.findIndex(([e,n])=>e===d&&n===m);return((o[n]??=[])[r]??=[]).push(h<0?v.push([d,m])-1:h),((s[n]??=[])[r]??=[]).push(p),v};return n.samples=z((e,n)=>A((e,r)=>A((e,r)=>{let a=$(t)?t[r]:t;return a||0===a?a!==t&&$(a)?A(l(n,r),a,e):l(n,r)(e,a):e},a[r],e),e,null),r,[]),n})(function(e={},n=e){let{values:t=N(),buffersMax:r=1,channelsMax:a=L,packed:i=function(e,n=L,t=[]){z((e,n)=>n,e,t).length=e.length;let r=n,a=0,i=0,o=1/0;for(let s=0;a<e.length;){let f=a+s,l=e[t[f]];if(!K(l,n))break;let c=r-l;if(c>=0&&c<o&&(o=c,i=f),0!==o&&f<e.length-1)++s;else{let f=t[i];t[i]=t[a],t[a]=f,(r-=e[f])>0||(r=n),i=++a,o=1/0,s=0}}return t}(t,a)}=e;n.values=t,n.buffersMax=r,n.channelsMax=a,n.packed=i;let o=n.passes=[[]],s=n.textures=[[]],f=n.valueToTexture=[],l=n.valueToPass=[],c=n.textureToPass=[],u=!!r,d=0,p=i?e=>i[e]:e=>e,m=i?(e,n)=>t[n]:e=>e;return A((e,n,t)=>{let i=p(t),v=m(n,i);if(!K(v,a))return e;let h=o.length-1,g=o[h],b=s.length-1,x=s[b];return(d+=v)>a?(d=v,b=s.push(x=[])-1,u&&g.length>=r&&(h=o.push(g=[])-1),g.push(b),c.push(h)):0===g.length&&(g.push(b),c.push(h)),x.push(i),f[i]=b,l[i]=h,e},t,n)}(e,n),n),{floor:H}=Math,{isFinite:q,isInteger:W}=Number;function Y(e){let{width:n,w:t,x:r,shape:a,size:i,side:o,0:s}=e;return(i&&Y(i))??n??t??r??(a&&Y(a))??o??s??(q(e)?e:null)}function Q(e){let{height:n,h:t,y:r,shape:a,size:i,side:o,1:s}=e;return(i&&Q(i))??n??t??r??(a&&Q(a))??o??s??(q(e)?e:null)}const X=e=>q(e)?2**e:null;function J(e,n=[]){let t;return n[0]=H(Y(e)??(t??=X(e.scale))??1),n[1]=H(Q(e)??(t??=X(e.scale))??1),n}const{max:Z}=Math,{isInteger:ee}=Number,en=(e,n,t)=>(e||(e=[]),e[0]=n,e[1]=t,e),et=(e,n,t,r,a)=>(e||(e=[]),e[0]=n,e[1]=t,e[2]=r,e[3]=a,e);var er=(e,n)=>(e%n+n)%n;const ea=(e,n,t=n.length)=>t||0===t?n[er(e,t)]:er(e,n);function ei(e={},n=e.uniforms??={}){let{steps:t,maps:r,pre:a=P,bound:i=1}=e,{textures:o}=r,s=t.length??t,f=o.length,l=[],c=[];n[a+"stepNow"]=(e,n)=>n.stepNow,n[a+"stateShape"]=(e,{size:{shape:n,merge:t}})=>n?et(l,...n,...t?.shape??n):et(l),n[a+"viewShape"]=({drawingBufferWidth:e,drawingBufferHeight:n})=>en(c,e,n),n[a+"states"]=(e,n)=>n.merge?.all?.texture??null;let u=e=>M((t,r)=>n[a+`states[${e*f+r}]`]=(n,{merge:t,stepNow:a=0,bound:o=i,textures:s})=>t?null:ea(a-o-e,s)?.[r]?.texture,o);for(let e=0,n=s-i;e<n;++e)u(e);return n}const[{length:eo},{length:es}]="[object {type}]".split("{type}"),ef="rgba",el={},ec=JSON.stringify;function eu(e,n,t="",r=e?.macros){if((r??!0)===!0)return null;if(!r)return"";let a=toString.call(r).slice(eo,-es);return"String"===a?r:"Function"===a?eu(e,n,t,r(e,n,t,r)):r instanceof Object&&n in r?eu(e,n,t,r[n]):t?eu(e,n?n+"_"+t:t,"",r):null}const ed=(e,n,t,r="",a=e)=>`const int ${n}_l = ${t.length};`+A((t,i,o)=>t+" \\\n"+(r&&r+" ")+e+` ${n}_${o} = ${a}(${i.join?.(", ")??i});`,t,""),ep=(e,n,t,r="",a=1,i)=>(a>=3?(e,n,t,r="",a=e)=>ed(e,n,t,r,a)+" \\\n"+(r&&r+" ")+e+` ${n}[${n}_l] = ${a}[${n}_l](${A((e,t,r)=>(e&&e+", ")+n+"_"+r,t,"")});
`+`#define ${n}_i(i) ${n}[i]
`:"const"===r.trim()?(e,n,t,r="",a=e)=>ed(e,n,t,r,a)+"\n\n"+`/**
`+` * Index function \`${n}_i\` (e.g: \`${n}_i(0)\`) may be slow.
`+` * Use name (e.g: \`${n}_0\`) if possible.
`+` */
`+`#define ${n}_i(i) ${A((e,t,r)=>r?`((i == ${r})? ${n}_${r} : ${e})`:`${n}_${r}`,t,"")}
`:(e,n,t,r="",a=e)=>ed(e,n,t,r,a)+" \\\n"+(r&&r+" ")+e+` ${n}[${n}_l];`+A((e,t,r)=>e+" \\\n"+n+`[${r}] = ${n}_${r};`,t,"")+"\n"+`#define ${n}_i(i) ${n}[i]
`)(e,n,t,r,i),em=(e,n)=>eu(e,"",n)??function(e,n){let t="values",r=eu(e,t,n);if(null!=r)return r;let{maps:a,steps:i,bound:o=1,merge:s,size:f,pre:l=P,cache:c=el}=e,{values:u,textures:d,passes:{length:p},alias:m}=a,v=i.length??i,h=f?.entries,g=!s,b=c&&`macro@${t}@${l}|${o}|${ec(u)}|${ec(d)}|${v}|${p}|${h}|${g}|${ec(m)}`;if(null!=(r=c?.[b]))return r;let x=d.length,y=v-o;return r=A((e,n,t,r,a=0)=>A((e,n)=>{let r=e+`#define ${l}texture_${n} ${t}
`+`#define ${l}channels_${n} ${ef.slice(a,a+=u[n])}

`;if(!m)return r;let i=m[n];return r+`#define ${l}texture_${i} ${l}texture_${n}
`+`#define ${l}channels_${i} ${l}channels_${n}

`},n,e),d,"")+(h||0===h?`#define ${l}entries ${h}
`:"")+`#define ${l}textures ${x}
`+`#define ${l}passes ${p}
`+`#define ${l}bound ${o}
`+`#define ${l}steps ${v}
`+`#define ${l}stepsPast ${y}
`+`#define ${l}${g?"splits":"merged"} ${x*y}

`,c?c[b]=r:r}(e,n)+function(e,n){let t="output",r=eu(e,t,n);if(null!=r)return r;let{passNow:a,maps:i,pre:o=P,cache:s=el}=e,{values:f,textures:l,passes:c,alias:u}=i,d=c[a],p=s&&`macro@${t}@${o}|${a}|${ec(f)}|${ec(l)}|${ec(c)}|${ec(u)}`;return r=s?.[p]??`#define ${o}passNow ${a}
${A((e,n,t,r,a=0)=>A((e,r)=>{let i=e+"\n"+`#define ${o}bound_${r} ${n}
`+`#define ${o}attach_${r} ${t}
`+`#define ${o}output_${r} gl_FragData[${o}attach_${r}].${ef.slice(a,a+=f[r])}
`;if(!u)return i;let s=u[r];return i+"\n"+`#define ${o}bound_${s} ${o}bound_${r}
`+`#define ${o}attach_${s} ${o}attach_${r}
`+`#define ${o}output_${s} ${o}output_${r}
`},l[n],e),d,"")}
`,s?s[p]=r:r}(e,n)+function(e,n){let t="samples",r=eu(e,t,n);if(null!=r)return r;let{passNow:a=0,maps:i,steps:o,bound:s=1,glsl:f,pre:l=P,cache:c=el}=e,{samples:u,reads:d,readsToValue:p,alias:m}=i,v=u?.[a],h=d?.[a],g=p?.[a],b=m?(o.length??o)-s:null,x=c&&`macro@${t}@${l}|${a}|${ec(v)}|${ec(h)}|${ec(g)}|${ec(m)}|${b}|${f}`;return r=c?.[x]??(v?`#define ${l}useSamples${" \\\n"+ep("ivec2",l+"samples",v,"const",f)}
`:"")+(h?A((e,n,t)=>{let r=`${e}#define ${l}useReads_${t}${" \\\n"+ep("int",l+"reads_"+t,n,"const",f)}
`;if(!m)return r;let a=g[t],i=m[t],o=`${l}reads_${i}`,s=`${l}reads_${t}`;return r+`/**
`+` * Alias reads, depends on index reads \`${l}useReads_${t}\`.
`+` * If using both alias and index reads, only use this not both.
`+` */
`+`#define ${l}useReads_${i} \\
${l}useReads_${t}${A((e,n,t)=>{let r,f=m[a[t]],l=v[n][0],c=b-l-1,u=`Alias for \`${i}\` reads \`${f}\` at `,d=`${u+l} step${1===l?"":"s"} into the past; `,p=`${u+c} step${1===c?"":"s"} from the last; `,h=` \\
const int ${o}_${f}`,g=`${s}_${t}; \\
`;return e+" \\\n"+(l||e.indexOf(r=`${h} = `)>=0?"":`/** ${d}implied newest, bare. */${r+g}`)+(l||e.indexOf(r=`${h}_new = `)>=0?"":`/** ${d}implied newest. */${r+g}`)+(c||e.indexOf(r=`${h}_old = `)>=0?"":`/** ${p}implied oldest. */${r+g}`)+(e.indexOf(r=`${h}_new_${l} = `)>=0?"":`/** ${d}counted newest-to-oldest. */${r+g}`)+(e.indexOf(r=`${h}_old_${c} = `)>=0?"":`/** ${p}counted oldest-to-newest. */${r+g}`)},n,n.length?" \\\n":"")} \\
const int ${o}_l = ${s}_l; \\
int ${o}_i(int i) { return ${s}_i(i); }

`},h,""):""),c?c[x]=r:r}(e,n)+function(e,n){let t="taps",r=eu(e,t,n);if(null!=r)return r;let{passNow:a=0,maps:i,merge:o,glsl:s,pre:f=P,cache:l=el}=e,c=i.samples?.[a],u=!o,d=l&&`macro@${t}@${f}|${a}|${ec(c)}|${u}|${s}`;if(null!=(r=l?.[d]))return r;let p=s>=3,m="texture"+(p?"":"2D"),v=f+"tapState",h="#define "+v,g="stepBy",b="textureBy",x=`${g}, ${b}`,y=`#define ${v}(uv) \\
`+v,_=`#define ${v}By(uv, ${x}) \\
`+v,w=f+"samples_",S="_"+f,M=l[t+":tapsSamples"]??=[];return r=(M.length=c?.length??0)?(u?`/**
 * States in a \`sampler2D[]\`; looks up 1D index and 2D \`uv\`.
 * Past steps go later in the list.
 * States may also be sampled by shifted step/texture.
 * Pass constant array index values; \`textures, ${x}\`.
 * Use \`${f}data\` list; ignore temporary \`${S}\` names.
 */
`+h+`sBy(uv, states, textures, ${x})`+" \\\n"+`const int ${S}tl = int(textures);`+" \\\n"+`vec2 ${S}uv = vec2(uv);`+" \\\n"+ep("vec4",f+"data",z((e,n)=>m+"(states["+`((int(${w+n}.s)+int(${g}))*${S}tl)+`+`int(${w+n}.t)+int(${b})`+`], ${S}uv)`,c,M),"",s)+"\n"+`/** Sample the states as given without shifting by any offsets. */
`+h+"s(uv, states, textures) \\\n"+v+`sBy(uv, states, textures, 0, 0)

`+`/** Preferred aliases: index suits states array constant access. */
`+y+`s(uv, ${f}states, ${f}textures)
`+_+`sBy(uv, ${f}states, ${f}textures, ${x})
`:`/**
 * States merged in a \`sampler2D\`.
 * Scales the 2D \`uv\` lookup over \`[textures, steps]\`.
 * Step from now into the past going upwards in the texture.
 * States may also be sampled by shifted step/texture.
 * Use \`${f}data\` list; ignore temporary \`${S}\` names.
 */
`+h+`2By(uv, states, stepNow, steps, textures, ${x})`+" \\\n"+`vec2 ${S}l = vec2(textures, steps);`+" \\\n"+`vec2 ${S}uv = vec2(uv)/${S}l;`+" \\\n"+`vec2 ${S}s = vec2(1, -1)/${S}l;`+" \\\n"+`vec2 ${S}i = (vec2(${x}).ts+vec2(0, 1))-vec2(0, stepNow);`+" \\\n"+ep("vec4",f+"data",z((e,n)=>m+"(states, "+`fract(${S}uv+fract((vec2(${w+n}).ts+${S}i)*${S}s)))`,c,M),"",s)+"\n"+`/** Sample the states as given without shifting by any offsets. */
`+h+"2(uv, states, stepNow, steps, textures) \\\n"+v+`2By(uv, states, stepNow, steps, textures, 0, 0)

`+(p?`/**
 * States merged to \`sampler3D\` or \`sampler2DArray\`.
 * 2D \`uv\` to 3D.
 * Scales \`x\` over \`textures\`, \`z\` over \`steps\` as:
 * - \`sampler3D\`: the number of steps; depth, \`[0, 1]\`.
 * - \`sampler2DArray\`: \`1\` or less; layer, \`[0, steps-1]\`.
 * States may also be sampled by shifted step/texture.
 * Use \`${f}data\` list; ignore temporary \`${S}\` names.
 */
`+h+`3By(uv, states, stepNow, steps, textures, ${x})`+" \\\n"+`vec2 ${S}l = vec2(textures, steps);`+" \\\n"+`vec2 ${S}uv = (vec2(uv)+vec2(textureBy, 0))/${S}l;`+" \\\n"+`float ${S}sx = 1.0/${S}l.x;`+" \\\n"+`float ${S}s = float(stepBy)-float(stepNow);`+" \\\n"+`float ${S}sz = -1.0/${S}l;`+" \\\n"+ep("vec4",f+"data",z((e,n)=>m+"(states, fract(vec3("+`${S}uv.x+(float(${w+n}.t)*${S}sx), ${S}uv.y, `+`(float(${w+n}.s)+${S}s)*${S}sz)))`,c,M),"",s)+"\n"+`/** Sample the states as given without shifting by any offsets. */
`+h+"3(uv, states, stepNow, steps, textures) \\\n"+v+`3(uv, states, stepNow, steps, textures)

`+"/** Preferred aliases: 3D suits merged texture in `GLSL` 3+. */\n"+y+`3(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures)
`+_+`3By(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures, ${x})
`:"/** Preferred aliases: 2D suits merged texture in `GLSL` < 1. */\n"+y+`2(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures)
`+_+`2By(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures, ${x})
`))+"\n":"",l?l[d]=r:r}(e,n),{call:ev}=Function,eh=({passes:e,stepNow:n,passNow:t})=>ea(n,e)?.[t],eg=(e,n,t)=>e.call===ev?e(n,t):e;function eb(e){let{merge:n,stepNow:t,size:r,copyImage:a=e.copyImage={copy:!0}}=e,{color:i,map:o}=eh(e),{all:{texture:s},next:f}=n,l=s?.subimage,{color:c}=f,u=f.framebuffer;if(u?.call!==Function.call&&(u=u?.call),!(l&&u&&i&&o&&(t||0===t)))return s;let{steps:d,width:p,height:m}=r,v=ea(t,d)*m;return M((e,n)=>(f.color=e)&&u.call(u,f).use.call(u,()=>l.call(s,a,o[n]*p,v)),i),f.color=c,u.call(u,f),s}function ex(e){let{merge:n,clearPass:t=e.clearPass=B()}=e,{all:{texture:r},next:a}=n,{color:i}=a,o=a.framebuffer;if(o?.call!==Function.call&&(o=o?.call),!t||!o)return r;let s=t.framebuffer;return(a.color=r)&&(t.framebuffer=o.call(o,a))&&clear(t),t.framebuffer=s,a.color=i,o.call(o,a),r}const{isFinite:ey}=Number;var e_=function(e,n={},t=n){let{maxDrawbuffers:r,glsl:a}=e.limits??e,{maps:i={},glsl:o=a}=n,{buffersMax:s}=i;return t.glsl=ey(o)?o:parseFloat(o?.match?.(G)?.[0]??o,10),i.buffersMax??=r,n.maps=j(i,t.maps??={}),!function({texture:e,framebuffer:n},t={},r=t){let a,i,{maps:o,steps:s=2,type:f="float",min:l="nearest",mag:c="nearest",wrap:u="clamp",depth:d=!1,stencil:p=!1}=t,m=J(t),[v,h]=m,{values:g=o.values=N(),channelsMin:b=o.channelsMin=4,buffersMax:x=o.buffersMax=1,textures:y,passes:_}=o,w=s.length??s,{merge:S=(i=y.length,w>2&&i>1)}=t;r.steps=s,r.merge=S,r.type=f,r.min=l,r.mag=c,r.wrap=u,r.depth=d,r.stencil=p,r.width=v,r.height=h;let T=x||null,F=(e,n)=>A((e,n)=>Z(e,A((e,n)=>e+g[n],y[n],0)),e,n),O=S?A((e,n)=>F(n,e),_,b):null,C=r.size??={};C.shape??=m,C.entries??=(C.width??=v)*(C.height??=h),C.type??=f,C.channelsMin??=O??b,C.steps??=w,C.passes??=0,C.framebuffers??=0,C.textures??=0,C.colors??=0;let k=r.textures=[],D=r.passes=[],U=(n,t,r,a,i)=>(o,s,d,p)=>{let m={channels:n,width:t,height:r,type:f,min:l,mag:c,wrap:u},v=s,h=p?.[v];h||(h=e?.(m),v=C.textures++);let g=ee(a),b=ee(i),x=ee(o);return m.texture=h,m.entry=v,g&&(m.step=a),b&&(m.color=C.colors++,m.pass=i),x&&(m.map=y[m.index=o]),g&&b&&x?((k[a]??=[])[o]=m).texture:m},V=(e,t)=>(r,i)=>{let o=null!=t?0:O??(r?F(r,b):b),s={depth:d,stencil:p,width:v,height:h,color:t??(r?z(U(o,v,h,e,i),r,S?a??=[]:[]):[])};s.framebuffer=T&&n?.(s),s.entry=T&&C.framebuffers++,r&&(s.map=r,s.pass=C.passes++);let f=ee(e),l=ee(i);return f&&(s.step=e),l&&(s.index=i),r&&f&&l?((D[e]??=[])[i]=s).framebuffer:s};if(r.steps=z((e,n)=>e||z(V(n),_),ee(s)?E(s):s,0),r.resize=(e=r,n=r)=>{let{size:t,passes:a,textures:i,merge:o}=n,[s,f]=J(e??n,t.shape??=[]);return t.entries=(t.width=s)*(t.height=f),M(e=>M(e=>e.framebuffer.resize(e.width=s,e.height=f),e),a),M(e=>M(e=>e.texture.resize(e.width=s,e.height=f),e),i),o?.resize?.(e,n)??n},!S)return;let R=r.merge={...S},{all:P,next:L}=R,G=C.merge=R.size??={};G.width??=y.length*v,G.height??=w*h;let[B,I]=J(R,G.shape??=[]);G.entries??=(G.width=B)*(G.height=I),R.all=P??U(O,B,I)(),R.next=L??V(null,a[0])(),R.resize=(e=r,n=r)=>{let{merge:t,size:a,maps:i}=n,{size:o=a.merge={},all:s,next:f}=t,{textures:l}=i,c=J(e??n,o.shape??=[]),[u,d]=c;f.framebuffer.resize(f.width=u,f.height=d),o.width=l.length*u,o.height=a.steps*d;let[p,m]=J(o,c);return o.entries=(o.width=p)*(o.height=m),s.texture.resize(s.width=p,s.height=m),n}}(e,n,t),ei(n,t.uniforms??={}),!function(e,n={},t=n){let{buffer:r,clear:a,command:i=e}=e,{merge:o,pipeline:s,verts:f,frag:l,frags:c,uniforms:u,attributes:d,maps:p,pre:m=P,vert:v=V.replaceAll(P,m||""),count:h=D,positions:g=R()}=n,{clearPass:b=null}=n;if(t.pre=m,t.vert=v,t.count=h,t.positions=r(g),t.clearPass=!0===b?b=void 0:b,f||c){let{passNow:e}=n;f&&(t.verts=f),c&&(t.frags=c),M((e,t)=>{n.passNow=t,f&&(f[t]??=em(n,"vert")+eg(v,null,n)),c&&(c[t]??=em(n,"frag")+eg(l,null,n))},p.passes),n.passNow=e}t.pass=i(t.pipeline={vert(e,t){let{passNow:r,step:{vert:a=v,verts:i=f}}=n;return i?.[r]??em(t,"vert")+eg(a,e,t)},frag(e,t){let{passNow:r,step:{frag:a=l,frags:i=c}}=n;return i?.[r]??em(t,"frag")+eg(a,e,t)},framebuffer:(e,n)=>eh(n)?.framebuffer,count:h,uniforms:u,attributes:{[m+"position"]:(e,n)=>n.positions,...d},depth:{enable:!1},blend:{enable:!1},...s}),o&&(t.merge=o)&&(o.update??=eb,o.clear??=ex),t.stepBy=(e=t,n=1)=>{let{stepNow:r=0,stepMax:a=8192}=e;return e.stepNow=ea(r+n,a||1/0),e},t.step=(e=t)=>{let n=e.onStep?.(e)??e,{maps:r,merge:i,pass:o,onPass:s,stepBy:f,clearPass:l=n.clearPass=B()}=n,c=l&&l.framebuffer,u=i?.update;return f(n),M((e,t)=>{n.passNow=t;let r=s?.(n,e)??n;l&&(l.framebuffer=eh(r)?.framebuffer)&&a(l),o(r),u?.(r)},r.passes),l&&(l.framebuffer=c),n},t.clear=(e=t)=>{let n=e.onClear?.(e)??e,{maps:r,merge:i,clearPass:o=n.clearPass=B()}=n;if(!o)return n;let s=o.framebuffer;return M((e,t)=>{n.passNow=t,(o.framebuffer=eh(n)?.framebuffer)&&a(o)},r.passes),o.framebuffer=s,i?.clear?.(n),n}}(e,n,t),t};const ew={diff:"-",dt:"-","⏳":"-",pause:0,"⏸":0,add:"+","⏭":"+"},eS=ew.diff,eM={[ew.diff]:Date.now,[ew.add]:1e3/60};function eT(e,n,t=e){var r,a,i;let{time:o=0,step:s=eS,now:f}=e,l=null!=(r=ew[s])?r:s,c=l===ew.diff,u=null!=(i=null!=(a=null!=n?n:f)?a:eM[l])?i:l,d=l?(c?0:o)+(isNaN(u)?u():u):o,p=d-o;return t?(t.time=d,t.dt=p,t.step=s,t):c?p:d}const eA=(e,n,t)=>e<n?n:e>t?t:e,ez=e=>e<0?0:e>1?1:e,eF=u(()=>"illegal arity"),eO=e=>{throw new eF(e)},eC=(e,n)=>"function"==typeof e?.[n],eE=e=>eC(e,"xform")?e.xform():e,ek=e=>"function"==typeof e?.[Symbol.iterator],eD=(e,n)=>[e[0],e[1],n],eU=Symbol(),eV=()=>{},eR=e=>e,eP=e=>null!=e&&"function"!=typeof e&&void 0!==e.length;class eL{value;constructor(e){this.value=e}deref(){return this.value}}const eN=e=>e instanceof eL,eG=e=>e instanceof eL?e.deref():e;function eB(...e){let n,t=e[0],r=t[0],a=t[1],i=t[2],o=null==(e=2===(n=e).length?[void 0,n[1]]:3===n.length?[n[1],n[2]]:eO(n.length))[0]?r():e[0],s=e[1];return eG(a(eC(s,"$reduce")?s.$reduce(i,o):eP(s)?eI(i,o,s):e$(i,o,s)))}const eI=(e,n,t)=>{for(let r=0,a=t.length;r<a;r++)if(eN(n=e(n,t[r]))){n=n.deref();break}return n},e$=(e,n,t)=>{for(let r of t)if(eN(n=e(n,r))){n=n.deref();break}return n},eK=(e,n)=>[e,eR,n];function*ej(e,n){let t=eE(e)([eV,eV,(e,n)=>n])[2];for(let e of n){let n=t(eU,e);if(eN(n)){(n=eG(n.deref()))!==eU&&(yield n);return}n!==eU&&(yield n)}}function eH(e,n){return ek(n)?ej(eH(e),n):n=>{let t=n[2];return eD(n,(n,r)=>t(n,e(r)))}}class eq{from;to;step;constructor(e,n,t){void 0===e?(e=0,n=1/0):void 0===n&&(n=e,e=0),t=void 0===t?e<n?1:-1:t,this.from=e,this.to=n,this.step=t}*[Symbol.iterator](){let{from:e,to:n,step:t}=this;if(t>0)for(;e<n;)yield e,e+=t;else if(t<0)for(;e>n;)yield e,e+=t}$reduce(e,n){let t=this.step;if(t>0)for(let r=this.from,a=this.to;r<a&&!eN(n);r+=t)n=e(n,r);else for(let r=this.from,a=this.to;r>a&&!eN(n);r+=t)n=e(n,r);return n}}function*eW(...e){let n=e.map(e=>e[Symbol.iterator]());for(;;){let e=[];for(let t of n){let n=t.next();if(n.done)return;e.push(n.value)}yield e}}const eY="o,a,b",eQ=e=>eH(n=>n>1?`${e}[i${e}+${n}*s${e}]`:1==n?`${e}[i${e}+s${e}]`:`${e}[i${e}]`,new eq(void 0,void 0,void 0)),eX=e=>eH(n=>`${e}[${n}]`,new eq(void 0,void 0,void 0)),eJ=(e,n=eY,t,r="o",a=1,i)=>{let o;t=t||n,i=null!=i?i:(o=t,`!${r} && (${r}=${o.split(",")[1]});`);let s=((e=0)=>{let n,t=[,,,,,],r=(...r)=>{let a=t[r[e].length]||n;return a?a(...r):p(`no impl for vec size ${r[e].length}`)};return r.add=(e,n)=>t[e]=n,r.default=e=>n=e,r.impl=e=>null!=e&&t[e]||n,r})(a),f=a=>s.add(a,((e,n,t,r=t,a="a",i,o,s,f=!1)=>Function(t,((e,n,t,r="a",a="",i="",o="",s=!1)=>{var f;let l;return[i,function e(...n){let t,r;var a=e,i=eB,o=n;switch(o.length){case 4:r=o[3],t=o[2];break;case 3:r=o[2];break;case 2:return eH(e=>a(o[0],o[1],e));default:eO(o.length)}return i(eE(o[0])(o[1]),t,r)}(function(...e){return(function e(...n){let[t,r,a,i,o,s,f,l,c,u]=n;switch(n.length){case 0:eO(0);case 1:return t;case 2:return(...e)=>t(r(...e));case 3:return(...e)=>t(r(a(...e)));case 4:return(...e)=>t(r(a(i(...e))));case 5:return(...e)=>t(r(a(i(o(...e)))));case 6:return(...e)=>t(r(a(i(o(s(...e))))));case 7:return(...e)=>t(r(a(i(o(s(f(...e)))))));case 8:return(...e)=>t(r(a(i(o(s(f(l(...e))))))));case 9:return(...e)=>t(r(a(i(o(s(f(l(c(...e)))))))));default:let d=(...e)=>t(r(a(i(o(s(f(l(c(u(...e))))))))));return 10===n.length?d:e(d,...n.slice(10))}}).apply(null,e=e.map(eE))}(function e(n,t){return ek(t)?function*(e,n){let t=eE(e)(eK(()=>[],(e,n)=>(e.push(n),e))),r=t[1],a=t[2];for(let e of n){let n=a([],e);if(eN(n))return void(yield*eG(r(n.deref())));n.length&&(yield*n)}yield*eG(r([]))}(e(n),t):e=>{let t=e[2],r=n;return eD(e,(e,n)=>{let a;return--r>0?t(e,n):0===r?(a=t(e,n))instanceof eL?a:new eL(a):new eL(e)})}}(e),function e(...n){return((e,n,t=ej)=>{let r=n.length-1;return ek(n[r])?n.length>1?t(e.apply(null,n.slice(0,r)),n[r]):t(e(),n[0]):void 0})(e,n)||(e=>{let t=e[2],r=n[0],a=n[1]||0;return eD(e,(e,n)=>t(e,r(a++,n)))})}((e,t)=>n(t,e))),(f=(f=a)||"",l=!0,eK(()=>"",(e,n)=>(e=l?e+n:e+f+n,l=!1,e))),eW.apply(null,t.split(",").map(s?eQ:eX))),o,""!==r?`return ${r};`:""]})(e,n,r,a,i,o,s,f).join("")))(a,e,n,t,r,"",i));return s.default(((e,n,t=n,r="a",a,i,o=!1)=>Function(n,((e,n,t="a",r,a,i=!1)=>[r,"for(let i=a.length;--i>=0;) {",e(n.split(",").map(i?e=>`${e}[i${e}+i*s${e}]`:e=>`${e}[i]`)),"}",a,null!==t?`return ${t};`:""])(e,t,r,a,i,o).join("")))(e,n,t,r,i)),[s,f(2),f(3),f(4)]},eZ=e=>eJ(([n,t])=>`${n}=${t}${e}n;`,"o,a,n"),[e0,e1,e2,e3]=eZ("*"),[e5,e4,e6,e8]=eZ("+"),e9=Math.PI,e7=2*e9,ne=e9/180;let nn=1e-6;const nt=e=>"number"==typeof e,nr=u(()=>"illegal argument(s)"),na=e=>{throw new nr(e)},ni=e=>e-Math.floor(e);function no(e,n=Object.create(null)){return(...t)=>{let r=JSON.stringify(t);return void 0!==r?r in n?n[r]:n[r]=e.apply(null,t):e.apply(null,t)}}function ns(e,n=Object.create(null)){return(...t)=>{let r=t.join("-");return r in n?n[r]:n[r]=e(...t)}}const nf=ns((e,n)=>e.repeat(n)),nl=ns((e,n=" ")=>{let t=nf(String(n),e);return(n,r)=>null==n?t:(n=n.toString(),(r=void 0!==r?r:n.length)<e?t.substring(r)+n:n)});nl(2,"0"),nl(3,"0"),nl(4,"0");const nc=no((e,n=!1)=>n?n=>nd(n)||n.toFixed(e):n=>n.toFixed(e));no((e,n=3)=>{let t=e-n-1,r=Math.pow(10,t),a=-Math.pow(10,t-1),i=Math.pow(10,-(n-1)),o=nl(e);return t=>{let s=Math.abs(t);return o(nd(t)||(0===t?"0":s<i||s>=r?nu(t,e):t.toFixed(n-(t<a))))}});const nu=(e,n)=>e.toExponential(Math.max(n-4-(Math.log(Math.abs(e))/Math.LN10>=10?2:1)-(e<0),0)),nd=e=>isNaN(e)?"NaN":e===1/0?"+∞":e===-1/0?"-∞":void 0,np=no((e,n=3,t=",",r="[",a="]")=>{let i="number"==typeof n?nc(n):n;switch(e){case 1:return e=>`${r}${i(e[0])}${a}`;case 2:return e=>`${r}${i(e[0])}${t}${i(e[1])}${a}`;case 3:return e=>`${r}${i(e[0])}${t}${i(e[1])}${t}${i(e[2])}${a}`;case 4:return e=>`${r}${i(e[0])}${t}${i(e[1])}${t}${i(e[2])}${t}${i(e[3])}${a}`;default:return e=>{let n=[];for(let t=0;t<e.length;t++)n.push(i(e[t]));return`${r}${n.join(t)}${a}`}}});var nm=((n=nm||{})[n.I8=5120]="I8",n[n.U8=5121]="U8",n[n.I16=5122]="I16",n[n.U16=5123]="U16",n[n.I32=5124]="I32",n[n.U32=5125]="U32",n[n.F32=5126]="F32",n);Int8Array,Int16Array,Int32Array,Uint8Array,Uint8ClampedArray,Uint16Array,Uint32Array;BigInt64Array,BigUint64Array,Float32Array,Float64Array;const[nv,nh,ng,nb]=((e,n=1,t=!0)=>{let r=t?(n,t,r,a)=>{n||(n=t);for(let i=t.length;i-- >0;)n[i]=e(t[i],r[i],a[i]);return n}:(n,t,r,a)=>{n||(n=a);for(let i=t.length;i-- >0;)n[i]=e(t[i],r[i],a[i]);return n},a=t?(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n):(n,t,r,a)=>(n||(n=a),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n),i=t?(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n[2]=e(t[2],r[2],a[2]),n):(n,t,r,a)=>(n||(n=a),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n[2]=e(t[2],r[2],a[2]),n),o=t?(n,t,r,a)=>(n||(n=t),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n[2]=e(t[2],r[2],a[2]),n[3]=e(t[3],r[3],a[3]),n):(n,t,r,a)=>(n||(n=a),n[0]=e(t[0],r[0],a[0]),n[1]=e(t[1],r[1],a[1]),n[2]=e(t[2],r[2],a[2]),n[3]=e(t[3],r[3],a[3]),n);return[m(n,r,a,i,o),a,i,o]})(eA),nx=Math.abs,ny=(e,n,t=nn)=>nx(e-n)<=t,n_=(e,n,t=nn)=>e.length===n.length&&ny(e[0],n[0],t)&&ny(e[1],n[1],t)&&ny(e[2],n[2],t)&&ny(e[3],n[3],t);m(0,(e,n,t=nn)=>eC(e,"eqDelta")?e.eqDelta(n,t):eC(n,"eqDelta")?n.eqDelta(e,t):nw(e,n,e.length,t),(e,n,t=nn)=>e.length===n.length&&ny(e[0],n[0],t)&&ny(e[1],n[1],t),(e,n,t=nn)=>e.length===n.length&&ny(e[0],n[0],t)&&ny(e[1],n[1],t)&&ny(e[2],n[2],t),n_);const nw=(e,n,t,r=nn,a=0,i=0,o=1,s=1)=>{for(;t>0;t--,a+=o,i+=s)if(!ny(e[a],n[i],r))return!1;return!0},nS=1/0x100000000;class nM{float(e=1){return this.int()*nS*e}probability(e){return this.float()<e}norm(e=1){return(this.int()*nS-.5)*2*e}normMinMax(e,n){let t=this.minmax(e,n);return .5>this.float()?t:-t}minmax(e,n){return this.float()*(n-e)+e}minmaxInt(e,n){let t=(0|n)-(e|=0);return t?e+this.int()%t:e}minmaxUint(e,n){let t=(n>>>0)-(e>>>=0);return t?e+this.int()%t:e}}const nT=new class extends nM{constructor(e){super(),this.rnd=e}float(e=1){return this.rnd()*e}norm(e=1){return(this.rnd()-.5)*2*e}int(){return 0x100000000*this.rnd()>>>0}}(Math.random),nA=m(1,(e,n,t,r=nT)=>{e||(e=n);for(let a=n.length;a-- >0;)e[a]=r.minmax(n[a],t[a]);return e}),nz=(e,n)=>(e||(e=[]),e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e);m(1,(e,n)=>{e||(e=[]);for(let t=n.length;t-- >0;)e[t]=n[t];return e},(e,n)=>(e||(e=[]),e[0]=n[0],e[1]=n[1],e),(e,n)=>(e||(e=[]),e[0]=n[0],e[1]=n[1],e[2]=n[2],e),nz);const nF=Array.isArray;var nO=Object.assign(Object.create(null),{url:"file:///.yarn/cache/@thi.ng-errors-npm-2.5.41-76a9e13342-4ebe41cc67.zip/node_modules/@thi.ng/errors/assert.js"});const nC=u(()=>"Assertion failed"),nE=!nO.env||"production"!==nO.env.MODE||nO.env.UMBRELLA_ASSERTS||nO.env.VITE_UMBRELLA_ASSERTS?(e,n)=>{if("function"==typeof e&&!e()||!e)throw new nC("function"==typeof n?n():n)}:()=>{},nk={},nD=(e,n)=>{for(let e in n){let t=n[e];if(nF(t)){let[r,a,i,o]=t;n[e]=2===t.length?(e,n)=>a(e,r(e,n)):3===t.length?(e,n)=>i(e,a(e,r(e,n))):(e,n)=>o(e,i(e,a(e,r(e,n))))}}nk[e]={...nk[e],...n}},nU=(e,n)=>(e>>>n|e<<32-n)>>>0;var nV=((t=nV||{})[t.RED=0]="RED",t[t.ORANGE=1]="ORANGE",t[t.YELLOW=2]="YELLOW",t[t.CHARTREUSE=3]="CHARTREUSE",t[t.GREEN=4]="GREEN",t[t.SPRING_GREEN=5]="SPRING_GREEN",t[t.CYAN=6]="CYAN",t[t.AZURE=7]="AZURE",t[t.BLUE=8]="BLUE",t[t.VIOLET=9]="VIOLET",t[t.MAGENTA=10]="MAGENTA",t[t.ROSE=11]="ROSE",t);class nR{constructor(e,n){this.mode=e,this.value=n}deref(){return this.value}}Object.freeze([0,0,0,1]),Object.freeze([1,1,1,1]),Object.freeze([1,0,0,1]),Object.freeze([0,1,0,1]),Object.freeze([0,0,1,1]),Object.freeze([0,1,1,1]),Object.freeze([1,0,1,1]),Object.freeze([1,1,0,1]);const nP=[.2126,.7152,.0722],nL=[3.1338561,-.9787684,.0719453,-1.6168667,1.9161415,-.2289914,-.4906146,.033454,1.4052427],nN=[.96422,1,.82521];nc(3),((e=0)=>n=>(100*n).toFixed(e)+"%")(3);const nG=1/255,nB={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",grey:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32",transparent:"0000",rebeccapurple:"639"};let nI={canvas:"fff",canvastext:"000",linktext:"001ee4",visitedtext:"4e2386",activetext:"eb3323",buttonface:"ddd",buttontext:"000",buttonborder:"000",field:"fff",fieldtext:"000",highlight:"bbd5fb",highlighttext:"000",mark:"000",marktext:"fff",graytext:"808080"};const n$=(e,n)=>c(e||[],(n>>>16&255)*nG,(n>>>8&255)*nG,(255&n)*nG,(n>>>24)*nG),nK={rad:e7,grad:400,turn:1,deg:360},nj=e=>{let n=/^(-?[0-9.]+)(deg|rad|grad|turn)?$/.exec(e);return nE(!!n,`expected hue, got: ${e}`),ni(parseFloat(n[1])/(nK[n[2]]||360))},nH=e=>e?nW(e,1,1,!0):1,nq=(e,n=!0)=>{nE(/^([0-9.]+)%$/.test(e),`expected percentage, got: ${e}`);let t=parseFloat(e)/100;return n?ez(t):t},nW=(e,n=1,t=.01,r=!1)=>{nE(/^-?[0-9.]+%?$/.test(e),`expected number or percentage, got: ${e}`);let a=parseFloat(e)*(e.endsWith("%")?.01*n:t);return r?ez(a):a},nY=(e,n=1)=>void 0!=e?ez(e):n,nQ=e=>{let n,t,r,a=e.channels||{},i=e.order,o=i.length;i.reduce((e,n)=>(e[n]={range:[0,1],...a[n]},e),a);let s=Object.freeze(i.map(e=>a[e].range[0])),f=Object.freeze(i.map(e=>a[e].range[1])),l=nz([],s),c=nz([],f);l[o-1]=1;let u=i.findIndex(e=>!!a[e].hue),d=class{constructor(e,n=0,t=1){this.offset=n,this.stride=t,this.buf=e||[0,0,0,0],this.offset=n,this.stride=t}buf;get mode(){return e.mode}get length(){return o}get range(){return[s,f]}get[Symbol.toStringTag](){return e.mode}get xyz(){return[this[0],this[1],this[2]]}[Symbol.iterator](){return function*(e,n,t,r){for(;n-- >0;)yield e[t],t+=r}(this.buf,this.length,this.offset,this.stride)}copy(){return new d(this.deref())}copyView(){return new d(this.buf,this.offset,this.stride)}empty(){return new d}deref(){return[this[0],this[1],this[2],this[3]]}set(e){return nz(this,e)}clamp(){return u>=0&&(this[u]=ni(this[u])),nb(null,this,s,f),this}eqDelta(e,n=nn){return n_(this,e,n)}randomize(e){return nA(this,l,c,e)}toJSON(){return this.deref()}toString(){return np(4,4)(this)}};n=d.prototype,i.forEach((e,a)=>((e,n,t,r=!0,a=!0)=>{let i=t>0?r?function(){return this.buf[this.offset+t*this.stride]}:function(){return this.buf[this.offset+t]}:function(){return this.buf[this.offset]},o=t>0?r?function(e){this.buf[this.offset+t*this.stride]=e}:function(e){this.buf[this.offset+t]=e}:function(e){this.buf[this.offset]=e};a&&Object.defineProperty(e,t,{get:i,set:o,enumerable:!0}),Object.defineProperty(e,n,{get:i,set:o,enumerable:!0})})(n,e,a,t,r)),nD(e.mode,e.from),nD("rgb",{[e.mode]:e.toRgb});let m=(n,t,r)=>{let a=new d(...r);return t!==e.mode?((e,n,t,r)=>{let a=nk[t];nE(!!a,`no conversions available for ${t}`);let i=a[r];return i?i(e,n):nk.rgb[r]?a.rgb(e,nk.rgb[r]([],n)):p(`can't convert: ${r} -> ${t}`)})(a,n,e.mode,t):a.set(n)},v=(n,...t)=>null==n?new d:"string"==typeof n?v((e=>{let n=nB[e=("string"==typeof e?e:e.deref()).toLowerCase()]||nI[e];if(n||"#"===e[0])return new nR("srgb",n$([],(e=>{let n=/^#?([0-9a-f]{3,8})$/i.exec(e);if(n){let e=n[1],t=parseInt(e,16);switch(e.length){case 3:return((3840&t)*4352|(240&t)*272|(15&t)*17|0xff000000)>>>0;case 4:return nU(((61440&t)*69632|(3840&t)*4352|(240&t)*272|(15&t)*17)>>>0,8);case 6:return(0xff000000|t)>>>0;case 8:return nU(t,8)}}return na(`invalid hex color: "${e}"`)})(n||e)));let t=e.split(/[(),/ ]+/),[r,a,i,o,s]=t;switch(nE(5===t.length||6===t.length,`invalid color: ${e}`),r){case"rgb":case"rgba":return new nR("srgb",[nW(a,1,nG,!0),nW(i,1,nG,!0),nW(o,1,nG,!0),nH(s)]);case"hsl":case"hsla":return new nR("hsl",[nj(a),nq(i),nq(o),nH(s)]);case"lab":return new nR("lab50",[nW(a),nW(i,1.25),nW(o,1.25),nH(s)]);case"lch":return new nR(r,[nW(a),nW(i,1.5),nj(o),nH(s)]);case"oklab":return new nR(r,[nW(a,1,1),nW(i,.4,1),nW(o,.4,1),nH(s)]);case"oklch":return new nR(r,[nW(a,1,1),nW(i,.4,1),nj(o),nH(s)]);default:p(`color mode: ${r}`)}})(n),...t):eP(n)?"string"==typeof n.mode?m(n,n.mode,t):new d(n,...t):eC(n,"deref")?m(n.deref(),n.mode,t):nt(n)?t.length&&t.every(nt)?new d(...(e=>{if("number"==typeof e[0])switch(e.length){case 1:return e.push(0,0,1),[e];case 2:return e.push(0,1),[e];case 3:return e.push(1),[e];default:return[e]}return e})([n,...t])):m(n$([],n),"srgb",t):na(`can't create a ${e.mode} color from: ${n}`);return v.class=d,v.range=[s,f],v.random=(e,n,t,r)=>new d(n,t,r).randomize(e),v.mapBuffer=(e,n=e.length/o|0,t=0,r=1,a=o)=>((e,n,t,r,a,i)=>{let o=[];for(;t-- >0;)o.push(new e(n,r,a)),r+=i;return o})(d,e,n,t,r,a),v},nX=(e,n,t=1)=>c(e||n,ni(n[0]),ez(n[1]),ez(n[2]),nY(n[3],t)),nJ=e=>{let n=e**3;return n>.008856?n:(e-16/116)/7.787},nZ=(e,n,t=0,r=0,a=1,i=1)=>e[t]*n[r]+e[t+a]*n[r+i]+e[t+2*a]*n[r+2*i],n0=(e,n)=>(e=((e,n)=>{let t=(e=((e,n,t=1)=>c(e||n,ez(n[0]),ez(n[1]),ez(n[2]),nY(n[3],t)))(e||n,n))[1]<e[2]?[e[2],e[1],-1,2/3]:[e[1],e[2],0,-1/3],r=e[0]<t[0]?[t[0],t[1],t[3],e[0]]:[e[0],t[1],t[2],t[0]],a=r[0]-Math.min(r[1],r[3]);return l(e,ez(Math.abs((r[3]-r[1])/(6*a+nn)+r[2])),ez(a),ez(r[0]))})(e,n),e[2]-=.5*e[1],e[1]/=1+nn-Math.abs(2*e[2]-1),e),n1=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,n2=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4),n3=(e,n)=>c(e||n,n1(n[0]),n1(n[1]),n1(n[2]),nY(n[3])),n5=(e,n,t=1)=>c(e||[],ez(Math.abs((n=6*ni(n))-3)-1),ez(2-Math.abs(n-2)),ez(2-Math.abs(n-4)),t),n4=(e,n)=>{let t=ez(n[1]),r=ez(n[2]);e=n5(e||n,n[0],nY(n[3]));let a=(1-Math.abs(2*r-1))*t;return l(e,(e[0]-.5)*a+r,(e[1]-.5)*a+r,(e[2]-.5)*a+r)},n6=nQ({mode:"hsl",channels:{h:{hue:!0}},order:["h","s","l","alpha"],from:{rgb:n0,srgb:n0,hsv:(e,n)=>{let t=(e=nX(e||n,n))[1],r=e[2],a=(2-t)*r/2;return e[2]=a,e[1]=a&&a<1?t*r/(a<.5?2*a:2-2*a):t,e},lch:[(e,n)=>{let{1:t,2:r}=n;r*=e7;let a=nY(n[3]);return t>0?c(e||n,n[0],Math.cos(r)*t,Math.sin(r)*t,a):c(e||n,n[0],0,0,a)},(e,n)=>((e,n,t=nL)=>((e,n,t,r=!1)=>{let a=nZ(n,t,0,0,3),i=nZ(n,t,1,0,3),o=nZ(n,t,2,0,3),s=nY(t[3]);return r?c(e||t,ez(a),ez(i),ez(o),s):c(e||t,a,i,o,s)})(e,t,n))(null,((e,n,t=nN)=>{let r=(n[0]+.16)/1.16;return c(e||n,nJ(n[1]/5+r)*t[0],nJ(r)*t[1],nJ(r-n[2]/2)*t[2],nY(n[3]))})(e,n)),n3,n0]},toRgb:n4});var n8={},n9={};n9.CGS={},n9.CGS.SPEED_OF_LIGHT=0x6fae6fce8,n9.CGS.GRAVITATIONAL_CONSTANT=6673e-11,n9.CGS.PLANCKS_CONSTANT_H=662606896e-35,n9.CGS.PLANCKS_CONSTANT_HBAR=105457162825e-38,n9.CGS.ASTRONOMICAL_UNIT=0xd9b18cb4eac,n9.CGS.LIGHT_YEAR=0xd210ec170b67f00,n9.CGS.PARSEC=0x2ad287695fc0d600,n9.CGS.GRAV_ACCEL=980.665,n9.CGS.ELECTRON_VOLT=1602176487e-21,n9.CGS.MASS_ELECTRON=910938188e-36,n9.CGS.MASS_MUON=188353109e-33,n9.CGS.MASS_PROTON=167262158e-32,n9.CGS.MASS_NEUTRON=167492716e-32,n9.CGS.RYDBERG=217987196968e-22,n9.CGS.BOLTZMANN=13806504e-23,n9.CGS.MOLAR_GAS=0x4f4b010,n9.CGS.STANDARD_GAS_VOLUME=22710.981,n9.CGS.MINUTE=60,n9.CGS.HOUR=3600,n9.CGS.DAY=86400,n9.CGS.WEEK=604800,n9.CGS.INCH=2.54,n9.CGS.FOOT=30.48,n9.CGS.YARD=91.44,n9.CGS.MILE=160934.4,n9.CGS.NAUTICAL_MILE=185200,n9.CGS.FATHOM=182.88,n9.CGS.MIL=.00254,n9.CGS.POINT=.0352777777778,n9.CGS.TEXPOINT=.0351459803515,n9.CGS.MICRON=1e-4,n9.CGS.ANGSTROM=1e-8,n9.CGS.HECTARE=1e8,n9.CGS.ACRE=40468564.2241,n9.CGS.BARN=1e-24,n9.CGS.LITER=1e3,n9.CGS.US_GALLON=3785.41178402,n9.CGS.QUART=946.352946004,n9.CGS.PINT=473.176473002,n9.CGS.CUP=236.588236501,n9.CGS.FLUID_OUNCE=29.5735295626,n9.CGS.TABLESPOON=14.7867647813,n9.CGS.TEASPOON=4.92892159375,n9.CGS.CANADIAN_GALLON=4546.09,n9.CGS.UK_GALLON=4546.092,n9.CGS.MILES_PER_HOUR=44.704,n9.CGS.KILOMETERS_PER_HOUR=27.7777777778,n9.CGS.KNOT=51.4444444444,n9.CGS.POUND_MASS=453.59237,n9.CGS.OUNCE_MASS=28.349523125,n9.CGS.TON=907184.74,n9.CGS.METRIC_TON=1e6,n9.CGS.UK_TON=1016046.9088,n9.CGS.TROY_OUNCE=31.103475,n9.CGS.CARAT=.2,n9.CGS.UNIFIED_ATOMIC_MASS=1660538782e-33,n9.CGS.GRAM_FORCE=980.665,n9.CGS.POUND_FORCE=444822.161526,n9.CGS.KILOPOUND_FORCE=444822161.526,n9.CGS.POUNDAL=13825.5,n9.CGS.CALORIE=41868e3,n9.CGS.BTU=10550558526.2,n9.CGS.THERM=105506e10,n9.CGS.HORSEPOWER=7457e6,n9.CGS.BAR=1e6,n9.CGS.STD_ATMOSPHERE=1013250,n9.CGS.TORR=1333.22368421,n9.CGS.METER_OF_MERCURY=1333223.68421,n9.CGS.INCH_OF_MERCURY=33863.8815789,n9.CGS.INCH_OF_WATER=2490.889,n9.CGS.PSI=68947.5729317,n9.CGS.POISE=1,n9.CGS.STOKES=1,n9.CGS.STILB=1,n9.CGS.LUMEN=1,n9.CGS.LUX=1e-4,n9.CGS.PHOT=1,n9.CGS.FOOTCANDLE=.001076,n9.CGS.LAMBERT=1,n9.CGS.FOOTLAMBERT=.00107639104,n9.CGS.CURIE=37e9,n9.CGS.ROENTGEN=258e-9,n9.CGS.RAD=100,n9.CGS.SOLAR_MASS=198892e28,n9.CGS.BOHR_RADIUS=5291772083e-18,n9.CGS.NEWTON=1e5,n9.CGS.DYNE=1,n9.CGS.JOULE=1e7,n9.CGS.ERG=1,n9.CGS.STEFAN_BOLTZMANN_CONSTANT=567040047374e-16,n9.CGS.THOMSON_CROSS_SECTION=665245893699e-36,n9.CGSM={},n9.CGSM.SPEED_OF_LIGHT=0x6fae6fce8,n9.CGSM.GRAVITATIONAL_CONSTANT=6673e-11,n9.CGSM.PLANCKS_CONSTANT_H=662606896e-35,n9.CGSM.PLANCKS_CONSTANT_HBAR=105457162825e-38,n9.CGSM.ASTRONOMICAL_UNIT=0xd9b18cb4eac,n9.CGSM.LIGHT_YEAR=0xd210ec170b67f00,n9.CGSM.PARSEC=0x2ad287695fc0d600,n9.CGSM.GRAV_ACCEL=980.665,n9.CGSM.ELECTRON_VOLT=1602176487e-21,n9.CGSM.MASS_ELECTRON=910938188e-36,n9.CGSM.MASS_MUON=188353109e-33,n9.CGSM.MASS_PROTON=167262158e-32,n9.CGSM.MASS_NEUTRON=167492716e-32,n9.CGSM.RYDBERG=217987196968e-22,n9.CGSM.BOLTZMANN=13806504e-23,n9.CGSM.MOLAR_GAS=0x4f4b010,n9.CGSM.STANDARD_GAS_VOLUME=22710.981,n9.CGSM.MINUTE=60,n9.CGSM.HOUR=3600,n9.CGSM.DAY=86400,n9.CGSM.WEEK=604800,n9.CGSM.INCH=2.54,n9.CGSM.FOOT=30.48,n9.CGSM.YARD=91.44,n9.CGSM.MILE=160934.4,n9.CGSM.NAUTICAL_MILE=185200,n9.CGSM.FATHOM=182.88,n9.CGSM.MIL=.00254,n9.CGSM.POINT=.0352777777778,n9.CGSM.TEXPOINT=.0351459803515,n9.CGSM.MICRON=1e-4,n9.CGSM.ANGSTROM=1e-8,n9.CGSM.HECTARE=1e8,n9.CGSM.ACRE=40468564.2241,n9.CGSM.BARN=1e-24,n9.CGSM.LITER=1e3,n9.CGSM.US_GALLON=3785.41178402,n9.CGSM.QUART=946.352946004,n9.CGSM.PINT=473.176473002,n9.CGSM.CUP=236.588236501,n9.CGSM.FLUID_OUNCE=29.5735295626,n9.CGSM.TABLESPOON=14.7867647813,n9.CGSM.TEASPOON=4.92892159375,n9.CGSM.CANADIAN_GALLON=4546.09,n9.CGSM.UK_GALLON=4546.092,n9.CGSM.MILES_PER_HOUR=44.704,n9.CGSM.KILOMETERS_PER_HOUR=27.7777777778,n9.CGSM.KNOT=51.4444444444,n9.CGSM.POUND_MASS=453.59237,n9.CGSM.OUNCE_MASS=28.349523125,n9.CGSM.TON=907184.74,n9.CGSM.METRIC_TON=1e6,n9.CGSM.UK_TON=1016046.9088,n9.CGSM.TROY_OUNCE=31.103475,n9.CGSM.CARAT=.2,n9.CGSM.UNIFIED_ATOMIC_MASS=1660538782e-33,n9.CGSM.GRAM_FORCE=980.665,n9.CGSM.POUND_FORCE=444822.161526,n9.CGSM.KILOPOUND_FORCE=444822161.526,n9.CGSM.POUNDAL=13825.5,n9.CGSM.CALORIE=41868e3,n9.CGSM.BTU=10550558526.2,n9.CGSM.THERM=105506e10,n9.CGSM.HORSEPOWER=7457e6,n9.CGSM.BAR=1e6,n9.CGSM.STD_ATMOSPHERE=1013250,n9.CGSM.TORR=1333.22368421,n9.CGSM.METER_OF_MERCURY=1333223.68421,n9.CGSM.INCH_OF_MERCURY=33863.8815789,n9.CGSM.INCH_OF_WATER=2490.889,n9.CGSM.PSI=68947.5729317,n9.CGSM.POISE=1,n9.CGSM.STOKES=1,n9.CGSM.STILB=1,n9.CGSM.LUMEN=1,n9.CGSM.LUX=1e-4,n9.CGSM.PHOT=1,n9.CGSM.FOOTCANDLE=.001076,n9.CGSM.LAMBERT=1,n9.CGSM.FOOTLAMBERT=.00107639104,n9.CGSM.CURIE=37e9,n9.CGSM.ROENTGEN=258e-10,n9.CGSM.RAD=100,n9.CGSM.SOLAR_MASS=198892e28,n9.CGSM.BOHR_RADIUS=5291772083e-18,n9.CGSM.NEWTON=1e5,n9.CGSM.DYNE=1,n9.CGSM.JOULE=1e7,n9.CGSM.ERG=1,n9.CGSM.STEFAN_BOLTZMANN_CONSTANT=567040047374e-16,n9.CGSM.THOMSON_CROSS_SECTION=665245893699e-36,n9.CGSM.BOHR_MAGNETON=927400899e-29,n9.CGSM.NUCLEAR_MAGNETON=505078317e-32,n9.CGSM.ELECTRON_MAGNETIC_MOMENT=928476362e-29,n9.CGSM.PROTON_MAGNETIC_MOMENT=1410606633e-32,n9.CGSM.FARADAY=9648.53429775,n9.CGSM.ELECTRON_CHARGE=1602176487e-29,n9.MKS={},n9.MKS.SPEED_OF_LIGHT=0x11de784a,n9.MKS.GRAVITATIONAL_CONSTANT=6673e-14,n9.MKS.PLANCKS_CONSTANT_H=662606896e-42,n9.MKS.PLANCKS_CONSTANT_HBAR=105457162825e-45,n9.MKS.ASTRONOMICAL_UNIT=0x22d4ba5a63,n9.MKS.LIGHT_YEAR=946053620707e4,n9.MKS.PARSEC=308567758135e5,n9.MKS.GRAV_ACCEL=9.80665,n9.MKS.ELECTRON_VOLT=1602176487e-28,n9.MKS.MASS_ELECTRON=910938188e-39,n9.MKS.MASS_MUON=188353109e-36,n9.MKS.MASS_PROTON=167262158e-35,n9.MKS.MASS_NEUTRON=167492716e-35,n9.MKS.RYDBERG=217987196968e-29,n9.MKS.BOLTZMANN=13806504e-30,n9.MKS.MOLAR_GAS=8.314472,n9.MKS.STANDARD_GAS_VOLUME=.022710981,n9.MKS.MINUTE=60,n9.MKS.HOUR=3600,n9.MKS.DAY=86400,n9.MKS.WEEK=604800,n9.MKS.INCH=.0254,n9.MKS.FOOT=.3048,n9.MKS.YARD=.9144,n9.MKS.MILE=1609.344,n9.MKS.NAUTICAL_MILE=1852,n9.MKS.FATHOM=1.8288,n9.MKS.MIL=254e-7,n9.MKS.POINT=352777777778e-15,n9.MKS.TEXPOINT=351459803515e-15,n9.MKS.MICRON=1e-6,n9.MKS.ANGSTROM=1e-10,n9.MKS.HECTARE=1e4,n9.MKS.ACRE=4046.85642241,n9.MKS.BARN=1e-28,n9.MKS.LITER=.001,n9.MKS.US_GALLON=.00378541178402,n9.MKS.QUART=946352946004e-15,n9.MKS.PINT=473176473002e-15,n9.MKS.CUP=236588236501e-15,n9.MKS.FLUID_OUNCE=295735295626e-16,n9.MKS.TABLESPOON=147867647813e-16,n9.MKS.TEASPOON=492892159375e-17,n9.MKS.CANADIAN_GALLON=.00454609,n9.MKS.UK_GALLON=.004546092,n9.MKS.MILES_PER_HOUR=.44704,n9.MKS.KILOMETERS_PER_HOUR=.277777777778,n9.MKS.KNOT=.514444444444,n9.MKS.POUND_MASS=.45359237,n9.MKS.OUNCE_MASS=.028349523125,n9.MKS.TON=907.18474,n9.MKS.METRIC_TON=1e3,n9.MKS.UK_TON=1016.0469088,n9.MKS.TROY_OUNCE=.031103475,n9.MKS.CARAT=2e-4,n9.MKS.UNIFIED_ATOMIC_MASS=1660538782e-36,n9.MKS.GRAM_FORCE=.00980665,n9.MKS.POUND_FORCE=4.44822161526,n9.MKS.KILOPOUND_FORCE=4448.22161526,n9.MKS.POUNDAL=.138255,n9.MKS.CALORIE=4.1868,n9.MKS.BTU=1055.05585262,n9.MKS.THERM=105506e3,n9.MKS.HORSEPOWER=745.7,n9.MKS.BAR=1e5,n9.MKS.STD_ATMOSPHERE=101325,n9.MKS.TORR=133.322368421,n9.MKS.METER_OF_MERCURY=133322.368421,n9.MKS.INCH_OF_MERCURY=3386.38815789,n9.MKS.INCH_OF_WATER=249.0889,n9.MKS.PSI=6894.75729317,n9.MKS.POISE=.1,n9.MKS.STOKES=1e-4,n9.MKS.STILB=1e4,n9.MKS.LUMEN=1,n9.MKS.LUX=1,n9.MKS.PHOT=1e4,n9.MKS.FOOTCANDLE=10.76,n9.MKS.LAMBERT=1e4,n9.MKS.FOOTLAMBERT=10.7639104,n9.MKS.CURIE=37e9,n9.MKS.ROENTGEN=258e-6,n9.MKS.RAD=.01,n9.MKS.SOLAR_MASS=198892e25,n9.MKS.BOHR_RADIUS=5291772083e-20,n9.MKS.NEWTON=1,n9.MKS.DYNE=1e-5,n9.MKS.JOULE=1,n9.MKS.ERG=1e-7,n9.MKS.STEFAN_BOLTZMANN_CONSTANT=567040047374e-19,n9.MKS.THOMSON_CROSS_SECTION=665245893699e-40,n9.MKS.BOHR_MAGNETON=927400899e-32,n9.MKS.NUCLEAR_MAGNETON=505078317e-35,n9.MKS.ELECTRON_MAGNETIC_MOMENT=928476362e-32,n9.MKS.PROTON_MAGNETIC_MOMENT=1410606633e-35,n9.MKS.FARADAY=96485.3429775,n9.MKS.ELECTRON_CHARGE=1602176487e-28,n9.MKS.VACUUM_PERMITTIVITY=8854187817e-21,n9.MKS.VACUUM_PERMEABILITY=125663706144e-17,n9.MKS.DEBYE=333564095198e-41,n9.MKS.GAUSS=1e-4,n9.MKSA={},n9.MKSA.SPEED_OF_LIGHT=0x11de784a,n9.MKSA.GRAVITATIONAL_CONSTANT=6673e-14,n9.MKSA.PLANCKS_CONSTANT_H=662606896e-42,n9.MKSA.PLANCKS_CONSTANT_HBAR=105457162825e-45,n9.MKSA.ASTRONOMICAL_UNIT=0x22d4ba5a63,n9.MKSA.LIGHT_YEAR=946053620707e4,n9.MKSA.PARSEC=308567758135e5,n9.MKSA.GRAV_ACCEL=9.80665,n9.MKSA.ELECTRON_VOLT=1602176487e-28,n9.MKSA.MASS_ELECTRON=910938188e-39,n9.MKSA.MASS_MUON=188353109e-36,n9.MKSA.MASS_PROTON=167262158e-35,n9.MKSA.MASS_NEUTRON=167492716e-35,n9.MKSA.RYDBERG=217987196968e-29,n9.MKSA.BOLTZMANN=13806504e-30,n9.MKSA.MOLAR_GAS=8.314472,n9.MKSA.STANDARD_GAS_VOLUME=.022710981,n9.MKSA.MINUTE=60,n9.MKSA.HOUR=3600,n9.MKSA.DAY=86400,n9.MKSA.WEEK=604800,n9.MKSA.INCH=.0254,n9.MKSA.FOOT=.3048,n9.MKSA.YARD=.9144,n9.MKSA.MILE=1609.344,n9.MKSA.NAUTICAL_MILE=1852,n9.MKSA.FATHOM=1.8288,n9.MKSA.MIL=254e-7,n9.MKSA.POINT=352777777778e-15,n9.MKSA.TEXPOINT=351459803515e-15,n9.MKSA.MICRON=1e-6,n9.MKSA.ANGSTROM=1e-10,n9.MKSA.HECTARE=1e4,n9.MKSA.ACRE=4046.85642241,n9.MKSA.BARN=1e-28,n9.MKSA.LITER=.001,n9.MKSA.US_GALLON=.00378541178402,n9.MKSA.QUART=946352946004e-15,n9.MKSA.PINT=473176473002e-15,n9.MKSA.CUP=236588236501e-15,n9.MKSA.FLUID_OUNCE=295735295626e-16,n9.MKSA.TABLESPOON=147867647813e-16,n9.MKSA.TEASPOON=492892159375e-17,n9.MKSA.CANADIAN_GALLON=.00454609,n9.MKSA.UK_GALLON=.004546092,n9.MKSA.MILES_PER_HOUR=.44704,n9.MKSA.KILOMETERS_PER_HOUR=.277777777778,n9.MKSA.KNOT=.514444444444,n9.MKSA.POUND_MASS=.45359237,n9.MKSA.OUNCE_MASS=.028349523125,n9.MKSA.TON=907.18474,n9.MKSA.METRIC_TON=1e3,n9.MKSA.UK_TON=1016.0469088,n9.MKSA.TROY_OUNCE=.031103475,n9.MKSA.CARAT=2e-4,n9.MKSA.UNIFIED_ATOMIC_MASS=1660538782e-36,n9.MKSA.GRAM_FORCE=.00980665,n9.MKSA.POUND_FORCE=4.44822161526,n9.MKSA.KILOPOUND_FORCE=4448.22161526,n9.MKSA.POUNDAL=.138255,n9.MKSA.CALORIE=4.1868,n9.MKSA.BTU=1055.05585262,n9.MKSA.THERM=105506e3,n9.MKSA.HORSEPOWER=745.7,n9.MKSA.BAR=1e5,n9.MKSA.STD_ATMOSPHERE=101325,n9.MKSA.TORR=133.322368421,n9.MKSA.METER_OF_MERCURY=133322.368421,n9.MKSA.INCH_OF_MERCURY=3386.38815789,n9.MKSA.INCH_OF_WATER=249.0889,n9.MKSA.PSI=6894.75729317,n9.MKSA.POISE=.1,n9.MKSA.STOKES=1e-4,n9.MKSA.STILB=1e4,n9.MKSA.LUMEN=1,n9.MKSA.LUX=1,n9.MKSA.PHOT=1e4,n9.MKSA.FOOTCANDLE=10.76,n9.MKSA.LAMBERT=1e4,n9.MKSA.FOOTLAMBERT=10.7639104,n9.MKSA.CURIE=37e9,n9.MKSA.ROENTGEN=258e-6,n9.MKSA.RAD=.01,n9.MKSA.SOLAR_MASS=198892e25,n9.MKSA.BOHR_RADIUS=5291772083e-20,n9.MKSA.NEWTON=1,n9.MKSA.DYNE=1e-5,n9.MKSA.JOULE=1,n9.MKSA.ERG=1e-7,n9.MKSA.STEFAN_BOLTZMANN_CONSTANT=567040047374e-19,n9.MKSA.THOMSON_CROSS_SECTION=665245893699e-40,n9.MKSA.BOHR_MAGNETON=927400899e-32,n9.MKSA.NUCLEAR_MAGNETON=505078317e-35,n9.MKSA.ELECTRON_MAGNETIC_MOMENT=928476362e-32,n9.MKSA.PROTON_MAGNETIC_MOMENT=1410606633e-35,n9.MKSA.FARADAY=96485.3429775,n9.MKSA.ELECTRON_CHARGE=1602176487e-28,n9.MKSA.VACUUM_PERMITTIVITY=8854187817e-21,n9.MKSA.VACUUM_PERMEABILITY=125663706144e-17,n9.MKSA.DEBYE=333564095198e-41,n9.MKSA.GAUSS=1e-4,n9.NUM={},n9.NUM.FINE_STRUCTURE=.007297352533,n9.NUM.AVOGADRO=602214199e15,n9.NUM.YOTTA=1e24,n9.NUM.ZETTA=1e21,n9.NUM.EXA=1e18,n9.NUM.PETA=1e15,n9.NUM.TERA=1e12,n9.NUM.GIGA=1e9,n9.NUM.MEGA=1e6,n9.NUM.KILO=1e3,n9.NUM.MILLI=.001,n9.NUM.MICRO=1e-6,n9.NUM.NANO=1e-9,n9.NUM.PICO=1e-12,n9.NUM.FEMTO=1e-15,n9.NUM.ATTO=1e-18,n9.NUM.ZEPTO=1e-21,n9.NUM.YOCTO=1e-24,n8=n9;const{max:n7}=Math;var te={};te="/** Grid fragment shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\ngrid_useSamples\n\n#ifdef grid_output_motionFull\n  grid_useReads_motionFull\n#endif\n#ifdef grid_output_motionBase\n  grid_useReads_motionBase\n#endif\n\n/** @todo `gl-gpgpu` should skip passes with no output; here for mass. */\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  #ifdef grid_splits\n    uniform sampler2D grid_states[grid_splits];\n  #else\n    uniform sampler2D grid_states;\n  #endif\n\n  uniform float grid_stepNow;\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  uniform vec3 g;\n  uniform float dt;\n\n  #ifdef rescale_mass\n    uniform vec2 rescaleMass;\n  #else\n    const float rescaledMass = 1.0;\n  #endif\n  #ifdef rescale_motion\n    uniform vec2 rescaleMotion;\n  #else\n    const float rescaledMotion = 1.0;\n  #endif\n\n  float when_gt_1540259130(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\n  /**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n  #if defined(rescale_mass) || defined(rescale_motion)\n    /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  #endif\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 boundsIn;\n  uniform float boundsHit;\n\n  float when_lt_2281831123(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\n  \n\nfloat when_ge_529295689(float x, float y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec2 when_ge_529295689(vec2 x, vec2 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec3 when_ge_529295689(vec3 x, vec3 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec4 when_ge_529295689(vec4 x, vec4 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\n#endif\n\nvarying vec2 grid_uv;\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\n\n#if defined(grid_output_motionFull)\n  const float hitStop = 0.0;\n  const float hitBack = 1.0;\n  const float hitBounce = 2.0;\n#endif\n\nvoid main() {\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef readMass\n    #elif defined(grid_output_motionFull)\n      #define readMass grid_reads_motionFull_mass\n    #elif defined(grid_output_motionBase)\n      #define readMass grid_reads_motionBase_mass\n    #endif\n\n    grid_tapState(offsetUV(grid_uv, grid_stateShape.xy));\n    // grid_tapState(grid_uv);\n\n    #if test == test_p2g\n      // for(int t = 0; t < grid_textures; ++t) { gl_FragData[t] = grid_data[t]; }\n      gl_FragData[0] = grid_data[0];\n      return;\n    #endif\n\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n\n    float mass = rescaledMass*grid_data[readMass].grid_channels_mass;\n    float on = when_gt_1540259130(mass, 0.0);\n    float massScale = 1.0/mix(1.0, mass, on);\n  #endif\n\n  #ifdef grid_output_motionFull\n    vec2 motionFull = rescaledMotion*\n      grid_data[grid_reads_motionFull_motionFull].grid_channels_motionFull;\n\n    motionFull *= massScale;\n\n    /** External forces. */\n    motionFull += normalize(g.xy-mix(-v1, v1, grid_uv))*g.z*dt;\n\n    /** Boundaries. */\n\n    vec2 at = grid_uv*grid_stateShape.xy;\n\n    vec4 boundsTo = vec4(boundsIn.xy, boundsIn.zw+grid_stateShape.xy)-at.xyxy;\n\n    vec4 boundsOut = vec4(when_gt_1540259130(boundsTo.xy, v0)*when_lt_2281831123(motionFull, v0),\n      when_lt_2281831123(boundsTo.zw, v0)*when_gt_1540259130(motionFull, v0));\n\n    vec2 moveStop = v0;\n    vec2 moveBack = (boundsTo.xy*boundsOut.xy)+(boundsTo.zw*boundsOut.zw);\n    vec2 moveBounce = -motionFull;\n    float geStop = when_ge_529295689(boundsHit, hitStop);\n    float geBack = when_ge_529295689(boundsHit, hitBack);\n    float geBounce = when_ge_529295689(boundsHit, hitBounce);\n    vec2 moveHit = motionFull;\n\n    moveHit = mix(moveHit, moveStop, geStop);\n    moveHit = mix(moveHit, moveBack, geBack);\n    moveHit = mix(moveHit, moveBounce, geBounce);\n    motionFull = mix(motionFull, moveHit, boundsOut.xy+boundsOut.zw);\n\n    // grid_output_motionFull = (on*motionFull)/rescaledMotion;\n    grid_output_motionFull = motionFull/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    vec2 motionBase = rescaledMotion*\n      grid_data[grid_reads_motionBase_motionBase].grid_channels_motionBase;\n\n    // grid_output_motionBase = (on*motionBase*massScale)/rescaledMotion;\n    grid_output_motionBase = (motionBase*massScale)/rescaledMotion;\n  #endif\n}\n";var tn={};tn="/** Grid-to-points fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\nstruct UP2 {\n  mat2 u;\n  mat2 p;\n};\n\nstruct SVD2 {\n  mat2 u;\n  mat2 sigma;\n  mat2 v;\n};\n\npoints_useSamples\ngrid_useSamples\n\n#ifdef points_useReads_position\n  points_useReads_position\n#endif\n#ifdef points_useReads_motion\n  points_useReads_motion\n#endif\n#ifdef points_useReads_mass\n  points_useReads_mass\n#endif\n#ifdef points_useReads_affine\n  points_useReads_affine\n#endif\n#ifdef points_useReads_deform\n  points_useReads_deform\n#endif\n#ifdef points_useReads_stress\n  points_useReads_stress\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  grid_useReads_mass\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform)\n  #ifdef points_splits\n    uniform sampler2D points_states[points_splits];\n  #else\n    uniform sampler2D points_states;\n  #endif\n\n  uniform float points_stepNow;\n  uniform vec4 points_stateShape;\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  #ifdef grid_splits\n    uniform sampler2D grid_states[grid_splits];\n  #else\n    uniform sampler2D grid_states;\n  #endif\n\n  uniform float grid_stepNow;\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(points_output_mass)\n  /** @todo Move to looking up material types? */\n  uniform float mass;\n#endif\n#if defined(points_output_stress)\n  /** @todo Move to looking up material types? */\n  uniform float volume;\n#endif\n#if defined(points_output_motion)\n  uniform float speedClamp;\n#endif\n#if defined(points_output_position) || defined(points_output_motion)\n  /** Volume change threshold comparison. */\n  uniform vec2 volumeSplit;\n  /** ASFLIP motion adjustment. */\n  uniform float motionAdjust;\n  /** ASFLIP position adjustment range. */\n  uniform vec2 positionAdjusts;\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  /**\n  * Mechanics parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n\n  /** Bulk modulus. */\n  uniform float bulkMod;\n  /** Shear modulus. */\n  uniform float shearMod;\n#endif\n#if defined(points_output_deform)\n  /**\n  * Plasticity parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n  uniform float materialFriction;\n#endif\n#if defined(points_output_position)\n  uniform float boundsClamp;\n#endif\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform) || \\\n    defined(points_output_stress)\n  uniform float spawnOnAny;\n  uniform float spawnOnOut;\n  uniform float spawnOnSlow;\n  uniform float spawnOnCentre;\n#endif\n#if defined(points_output_motion) || defined(points_output_position)\n  uniform vec3 wander;\n#endif\n\nuniform float dt;\n\nuniform vec4 bounds;\nuniform float chaos;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_position\n  uniform vec2 rescalePosition;\n#else\n  const float rescaledPosition = 1.0;\n#endif\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n#ifdef rescale_deform\n  uniform vec2 rescaleDeform;\n#else\n  const float rescaledDeform = 1.0;\n#endif\n#ifdef rescale_stress\n  uniform vec2 rescaleStress;\n#else\n  const float rescaledStress = 1.0;\n#endif\n\nvarying vec2 points_uv;\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\nconst mat2 m1 = mat2(1);\nconst mat2 m0 = m1*0.0;\nconst vec4 mv0 = vec4(m0);\nconst vec4 mv1 = vec4(m1);\nconst float eps = 1e-6;\n\nfloat when_lt_2281831123(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat when_gt_529295689(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_529295689(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_529295689(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_529295689(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_2658629798(float x, float y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec2 when_le_2658629798(vec2 x, vec2 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec3 when_le_2658629798(vec3 x, vec3 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec4 when_le_2658629798(vec4 x, vec4 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nfloat when_ge_2166047709(float x, float y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec2 when_ge_2166047709(vec2 x, vec2 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec3 when_ge_2166047709(vec3 x, vec3 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec4 when_ge_2166047709(vec4 x, vec4 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nfloat when_eq_1062606552(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec2 when_eq_1062606552(vec2 x, vec2 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec3 when_eq_1062606552(vec3 x, vec3 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec4 when_eq_1062606552(vec4 x, vec4 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\n// Math.PI * 2\nconst float TAU = 6.28318530718;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat determinant(float m) {\n  return m;\n}\n\nfloat determinant(mat2 m) {\n  return m[0][0] * m[1][1] - m[0][1] * m[1][0]; \n}\n\nfloat determinant(mat3 m) {\n  return m[0][0] * (m[2][2]*m[1][1] - m[1][2]*m[2][1])\n       + m[0][1] * (m[1][2]*m[2][0] - m[2][2]*m[1][0])\n       + m[0][2] * (m[2][1]*m[1][0] - m[1][1]*m[2][0]);\n}\n\nfloat determinant(mat4 m) {\n  float\n      b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0],\n      b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0],\n      b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0],\n      b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1],\n      b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1],\n      b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2],\n      b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0],\n      b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0],\n      b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0],\n      b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1],\n      b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1],\n      b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n// float trace(mat2 m) { return m[0][0]+m[1][1]; }\n\n#define createTrace(f, mat, n) \\\nfloat f(mat m) { \\\n  float t = 0.0; \\\n   \\\n  for(int d = 0; d < n; ++d) { t += m[d][d]; } \\\n   \\\n  return t; \\\n}\n\ncreateTrace(trace, mat2, 2)\ncreateTrace(trace, mat3, 3)\ncreateTrace(trace, mat4, 4)\n\n// mat2 outerProduct(vec2 v0, vec2 v1) { return mat2(v0*v1[0], v0*v1[1]); }\n\n#define createOuterProduct(f, vec, mat, n) \\\nmat f(vec v0, vec v1) { \\\n  mat m; \\\n   \\\n  for(int d = 0; d < n; ++d) { m[d] = v0*v1[d]; } \\\n   \\\n  return m; \\\n}\n\ncreateOuterProduct(outerProduct, vec2, mat2, 2)\ncreateOuterProduct(outerProduct, vec3, mat3, 3)\ncreateOuterProduct(outerProduct, vec4, mat4, 4)\n\n// float area(vec2 v) { return v.x*v.y; }\n\n#define createArea(f, vec, n) \\\nfloat f(vec v) { \\\n  float a = 1.0; \\\n   \\\n  for(int d = 0; d < n; ++d) { a *= v[d]; } \\\n   \\\n  return a; \\\n}\n\ncreateArea(area, vec2, 2)\ncreateArea(area, vec3, 3)\ncreateArea(area, vec4, 4)\n\n#if defined(rescale_mass) || defined(rescale_position) || \\\n    defined(rescale_motion) || defined(rescale_affine) || \\\n    defined(rescale_deform) || defined(rescale_stress)\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  /**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/**\n * The cell base for each kernel type.\n *\n * @note Tried implementing the same `int(at)` cast-based truncation logic as\n *   the original, but it led to the simulation exploding, probably because an\n *   array-based grid can't handle negative indices but a texture-based one can,\n *   and truncation must've led to a division by 0 somewhere.\n */\n\n#define createToBaseShort(f, vec) \\\nvec f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at-0.5))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at-0.5)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#endif\n\n#ifdef kernelBaseCast\n  createToBase(toBase, float, int)\n  createToBase(toBase, vec2, ivec2)\n  createToBase(toBase, vec3, ivec3)\n#else\n  createToBase(toBase, float)\n  createToBase(toBase, vec2)\n  createToBase(toBase, vec3)\n#endif\n\n/** The cell base for each kernel type. */\n#define createToDiffShort(f, vec) \\\nvec f(vec at, vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShort(f, vec)\n#else\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = at-base); } \\\n  createToDiffShort(f, vec)\n#endif\n\ncreateToDiff(toDiff, float)\ncreateToDiff(toDiff, vec2)\ncreateToDiff(toDiff, vec3)\n\nvec2 toWeight(inout vec2 w, vec2 v) { return w = v; }\nvec2 toWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 toWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(f, vec, mat) \\\n \\\nmat f(vec diff, out mat weights) { \\\n  createToWeightsMain(vec, diff) \\\n   \\\n  toWeight(weights[0], 0.5*(w0*w0)); \\\n  toWeight(weights[1], 0.75-(w1*w1)); \\\n  toWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat f(vec diff) { \\\n  mat weights; \\\n   \\\n  return f(diff, weights); \\\n}\n\ncreateToWeights(toWeights, vec2, mat3)\ncreateToWeights(toWeights, vec3, mat3)\n\n#define createToKernel(f, vec, mat, Kernel) \\\n \\\nKernel f(vec at, out vec base, out vec diff, out mat weights) { \\\n  return Kernel(base = toBase(at, base), \\\n    diff = toDiff(at, base, diff), \\\n    weights = toWeights(diff, weights)); \\\n} \\\n \\\nKernel f(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n} \\\n \\\nKernel f(vec at, out vec base, out mat weights) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out mat weights) { \\\n  vec base; \\\n   \\\n  return f(at, base, weights); \\\n} \\\n \\\nKernel f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\ncreateToKernel(toKernel, vec2, mat3, Kernel2)\ncreateToKernel(toKernel, vec3, mat3, Kernel3)\n\n  /** The cell offset for each kernel type. */\n#define createToOffsetShort(f, vec) \\\nvec f(vec offset) { \\\n  vec to; \\\n   \\\n  return f(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset-1.0); } \\\n  createToOffsetShort(f, vec)\n#else\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset); } \\\n  createToOffsetShort(f, vec)\n#endif\n\ncreateToOffset(toOffset, float)\ncreateToOffset(toOffset, vec2)\ncreateToOffset(toOffset, vec3)\n\n  /**\n * The distance function for each kernel type.\n *\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\n * @todo Not sure this is right, the scales might be off.\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\n */\n\n#ifdef kernelTypeCentre\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\n   * // From offset:\n   * offset = offset-1\n   * // Thus:\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\n   * // From weights:\n   * diff(base, at) = (at-base)-0.5\n   * // And:\n   * base(at) = floor(at)\n   * // @todo The rest\n   * ```\n   *\n   * @todo Derive the form `toDistance(offset, diff)`.\n   */\n  #define createToDistance(f, vec) \\\n   \\\n  vec f(vec offset, vec at, vec base) { return ((base+offset)-at)+0.5; } \\\n   \\\n  vec f(vec offset, vec diff);\n#else\n  \n\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, diff) = offset-diff\n   * // From weights:\n   * diff(base, at) = at-base\n   * // Thus:\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\n   * ```\n   */\n  #define createToDistance(f, vec) \\\n   \\\n  vec f(vec offset, vec diff) { return offset-diff; } \\\n   \\\n  vec f(vec offset, vec at, vec base) { return f(offset, toDiff(at, base)); }\n#endif\n\ncreateToDistance(toDistance, float)\ncreateToDistance(toDistance, vec2)\ncreateToDistance(toDistance, vec3)\n\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  \n\n/**\n * Perform polar decomposition `(a = up)` for a 2D matrix.\n *\n * @param {mat2} a An input 2D matrix.\n *\n * @returns {struct} `to` Decomposed 2D matrices `u`, `p`.\n * @returns {mat2} `to.u` A 2D orthogonal matrix.\n * @returns {mat2} `to.p` A 2D positive or semi-positive definite matrix.\n *\n * @see [Taichi implementation of 2D matrix polar decomposition](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L53-L96)\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Polar_decomposition)\n */\nUP2 toPolar(in mat2 a, out mat2 u, out mat2 p) {\n  UP2 to = UP2(mat2(1), a);\n  vec2 a0 = a[0];\n  vec2 a1 = a[1];\n  float a00 = a0[0];\n  float a01 = a0[1];\n  float a10 = a1[0];\n  float a11 = a1[1];\n\n  // If `a` is a zero matrix we simply return the pair `identity, a`.\n  if(abs(a00)+abs(a01)+abs(a10)+abs(a11) == 0.0) { return to; }\n\n  float aDet = determinant(a);\n  float flip = sign(aDet);\n  mat2 b = mat2(a00+(a11*flip), a01-(a10*flip), a10-(a01*flip), a11+(a00*flip));\n  // Here `det(b) != 0` if `a` is not the zero matrix.\n  float k = 1.0/sqrt(abs(determinant(b)));\n\n  to.u = b*k;\n  to.p = ((transpose(a)*a)+(abs(aDet)*mat2(1)))*k;\n\n  return to;\n}\n\nUP2 toPolar(in mat2 a) {\n  mat2 u;\n  mat2 p;\n\n  return toPolar(a, u, p);\n}\n\nconst float eps_1 = 1e-5;\n\n/**\n * Perform singular value decomposition `(a = us*transpose(v))` for a 2D matrix.\n *\n * @param {mat2} a An input 2D matrix.\n *\n * @returns {struct} `to` Decomposed 2D matrixes `u`, `s`, `v`.\n * @returns {mat2} `to.u` A 2D matrix.\n * @returns {mat2} `to.s` A 2D matrix.\n * @returns {mat2} `to.v` A 2D matrix.\n *\n * @see [Taichi Python code](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L118-L157)\n * @see [Paper](https://www.seas.upenn.edu/~cffjiang/research/svd/svd.pdf)\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Singular_value_decomposition)\n */\nSVD2 toSVD(in mat2 a, out mat2 u, out mat2 sigma, out mat2 v) {\n  mat2 r;\n  mat2 s;\n\n  toPolar(a, r, s);\n\n  float vc = 1.0;\n  float vs = 0.0;\n  vec2 s0 = s[0];\n  float s01 = s0[1];\n  float s00 = s0[0];\n  float s11 = s[1][1];\n\n  if(abs(s01) >= eps_1) {\n    float tao = 0.5*(s00-s11);\n    float t = s01/(tao+(sqrt((tao*tao)+(s01*s01))*sign(tao)));\n\n    vs = -t*(vc = 1.0/sqrt((t*t)+1.0));\n\n    float vc2 = vc*vc;\n    float vs2 = vs*vs;\n    float term = 2.0*vc*vs*s01;\n\n    s00 = (vc2*s00)-term+(vs2*s11);\n    s11 = (vs2*s00)+term+(vc2*s11);\n  }\n\n  float f = when_lt_2281831123(s00, s11);\n\n  sigma = mat2(mix(s00, s11, f), 0, 0, mix(s11, s00, f));\n  v = mat2(mix(vc, -vs, f), mix(vs, vc, f), mix(-vs, -vc, f), mix(vc, -vs, f));\n\n  return SVD2(u = r*v, sigma, v);\n}\n\nSVD2 toSVD(in mat2 a) {\n  mat2 u;\n  mat2 sigma;\n  mat2 v;\n\n  return toSVD(a, u, sigma, v);\n}\n\n#endif\n#if defined(points_output_position) || defined(points_output_motion)\n  highp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n  /**\n * @param {float} angle An angle, in radians, expects range `[0, 2*pi]`.\n * @param {float} depth A depth, expects range `[-1, 1]`.\n *\n * @see [Spherical distribution](https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere)\n */\nvec2 onSphere(float angle) { return vec2(cos(angle), sin(angle)); }\n\nvec3 onSphere(float angle, float depth) {\n  return vec3(sqrt(1.0-(depth*depth))*vec2(cos(angle), sin(angle)), depth);\n}\n\n#endif\n#if defined(points_output_position)\n  \n\nconst vec4 seed = vec4(0.34238, -0.86761, 0.69201, 0.57872);\nconst vec2 off = vec2(-1, 1)*0.49;\n\nvec2 by(vec2 v) { return vec2(random(v.xy+seed.xy), random(v.yx+seed.zw)); }\n\nvec3 by(vec3 v) {\n  return vec3(random(v.xy+seed.xy), random(v.zx+seed.zw), random(v.xz+seed.zx));\n}\n\n#define createSpawn(f, vec, off0, off1) \\\n \\\nvec f(vec at, vec lo, vec hi) { return mix(lo, hi, by(at)); } \\\n \\\nvec f(vec at, vec lo, vec hi, vec scale) { \\\n  return mix(lo, hi, at+(mix(off0, off1, by(at))*scale)); \\\n}\n\ncreateSpawn(spawn_0, vec2, off.xx, off.yy)\ncreateSpawn(spawn_0, vec3, off.xxx, off.yyy)\n\n#endif\n#if defined(points_output_deform)\n  /**\n * Project the singular values of the deformation gradient with Drucker-Prager\n * model. Determines the yield surface.\n *\n * @see [Yue et al. 2018]\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L206-L244)\n */\n\nconst float eps_0 = 1e-6;\n\nmat2 projectDruckerPrager(inout mat2 sigma,\n    float bulkMod, float shearMod, float friction) {\n  /**\n   * @todo Apply volume recovery, similar to damping.\n   *   Multiply the recorded volume with a rate below one for better stability.\n   *   Needs new material-point property `logSigma` and inputs `volumeRecovery`\n   *   and `volumeRecordLimit`.\n   */\n  // float jse = sigma[0][0]*sigma[1][1];\n  //\n  // for(int c = 0; c < 2; ++c) {\n  //   sigma[c][c] = max(eps, abs(sigma[c][c]*exp(logSigma*volumeRecovery)));\n  // }\n\n  float s00 = sigma[0][0];\n  float s11 = sigma[1][1];\n  float je = max(eps_0, s00*s11);\n\n  if(je >= 1.0) {\n    sigma[0][0] = sigma[1][1] = 1.0;\n\n    /**\n     * @todo Record the geometric mean of per-dimension expansions for later\n     *   volume recovery during compression, refer to [Gao et al. 2018].\n     *   Perform this operation in the log-space for better numerical stability.\n     *   For the same reason, set a limit on the recorded volume expansion.\n     */\n    // logSigma = min(volumeRecordLimit, logSigma+(log(max(eps, jse))*0.5));\n\n    return sigma;\n  }\n\n  /** Check if the stress is inside the feasible region. */\n  // logSigma = 0.0;\n\n  float je2 = je*je;\n  float s00p2 = s00*s00;\n  float s11p2 = s11*s11;\n  float traceB2 = (s00p2+s11p2)*0.5;\n  float yieldLimit = -friction*bulkMod*0.5*(je2-1.0);\n  vec2 bDev = vec2(s00p2, s11p2)-traceB2;\n  float yieldAt = shearMod*sqrt(((bDev[0]*bDev[0])+(bDev[1]*bDev[1]))/je);\n\n  if(yieldAt <= yieldLimit) { return sigma; }\n\n  /** Project to the yield surface. */\n  float bDet = s00p2*s11p2;\n  float bDetDev = bDev[0]*bDev[1];\n  float lambda1 = yieldLimit/max(eps_0, yieldAt);\n  float lambda0 = sqrt(max(0.0, bDet-(lambda1*lambda1*bDetDev)));\n\n  sigma[0][0] = sqrt(abs(lambda0+(lambda1*bDev[0])));\n  sigma[1][1] = sqrt(abs(lambda0+(lambda1*bDev[1])));\n\n  return sigma;\n}\n\n#endif\n#if defined(points_output_stress)\n  /**\n * Compute stress with Simo's [1988] neo-Hookean elasticity.\n *\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L247-L260)\n */\n\nmat2 neoHookeanElastic(mat2 u, mat2 sigma, float bulkMod, float shearMod) {\n  float s00 = sigma[0][0];\n  float s11 = sigma[1][1];\n  float j = s00*s11;\n  float shear = shearMod*sqrt(j);\n  float bulk = bulkMod*0.5*((j*j)-1.0);\n  float s00p2 = s00*s00;\n  float s11p2 = s11*s11;\n  float s2 = (s00p2+s11p2)*0.5;\n  mat2 stress = mat2(1);\n\n  stress[0][0] = (s00p2-s2)*shear;\n  stress[1][1] = (s11p2-s2)*shear;\n  stress = u*stress*transpose(u);\n  stress[0][0] += bulk;\n  stress[1][1] += bulk;\n\n  return stress;\n}\n\n#endif\n\nvoid main() {\n  #ifdef pReadPosition\n  #elif defined(points_output_position)\n    #define pReadPosition points_reads_position_position\n  #elif defined(points_output_motion)\n    #define pReadPosition points_reads_motion_position\n  #elif defined(points_output_affine)\n    #define pReadPosition points_reads_affine_position\n  #endif\n\n  #ifdef pReadMotion\n  #elif defined(points_output_position)\n    #define pReadMotion points_reads_position_motion\n  #elif defined(points_output_motion)\n    #define pReadMotion points_reads_motion_motion\n  #endif\n\n  #ifdef pReadMass\n  #elif defined(points_output_position)\n    #define pReadMass points_reads_position_mass\n  #elif defined(points_output_motion)\n    #define pReadMass points_reads_motion_mass\n  #elif defined(points_output_mass)\n    #define pReadMass points_reads_mass_mass\n  #elif defined(points_output_affine)\n    #define pReadMass points_reads_affine_mass\n  #elif defined(points_output_deform)\n    #define pReadMass points_reads_deform_mass\n  #elif defined(points_output_stress)\n    #define pReadMass points_reads_stress_mass\n  #endif\n\n  #ifdef pReadDeform\n  #elif defined(points_output_deform)\n    #define pReadDeform points_reads_deform_deform\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine) || defined(points_output_deform)\n    points_tapState(offsetUV(points_uv, points_stateShape.xy));\n    // points_tapState(points_uv);\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine)\n    #ifdef rescale_position\n      float rescaledPosition = exponent(rescalePosition);\n    #endif\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n\n    vec2 pPosition = rescaledPosition*\n      points_data[pReadPosition].points_channels_position;\n\n    vec2 boundsSize = abs(bounds.zw-bounds.xy);\n    float boundsSide = min(boundsSize.x, boundsSize.y);\n\n    /** Read grid material properties on 3 nodes in each axis. */\n    vec2 gMotionFull = v0;\n    vec2 gMotionBase = v0;\n    mat2 gAffine = m0;\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n    vec2 cellAt = map(pPosition, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\n    Kernel2 kernel = toKernel(cellAt);\n    /** Scale from bounds-space to grid-scale; motions differ from positions. */\n    /**\n     * @todo Verify if this is the real solution or just masking; seems to\n     *   differ from just changing `volumeSplit` values, and offer:\n     *   - Remove jitter at low numbers of particles.\n     *   - Keep close to the reference `volumeSplit` values... reasons unknown.\n     *   - Make some intuitive sense.\n     */\n    // Original.\n    // vec2 scaleBoundsToGrid = grid_stateShape.xy;\n    // Fix or mask?\n    vec2 scaleBoundsToGrid = grid_stateShape.xy/boundsSize;\n    // vec2 scaleBoundsToGrid = grid_stateShape.xy/boundsSide;\n    // Seems to have the same effect as the fix or mask...\n    // vec2 scaleBoundsToGrid = v0;\n\n    for(int gx = 0; gx < kernelSize; ++gx) {\n      for(int gy = 0; gy < kernelSize; ++gy) {\n        vec2 offset = toOffset(vec2(gx, gy));\n        /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\n        vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n\n        grid_tapState(offsetUV(st, grid_stateShape.xy));\n        // grid_tapState(st);\n\n        vec2 cMotionFull = rescaledMotion*\n          grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n\n        vec2 cMotionBase = rescaledMotion*\n          grid_data[grid_reads_mass_motionBase].grid_channels_motionBase;\n\n        vec2 wmf = weight*cMotionFull;\n        vec2 wmb = weight*cMotionBase;\n\n        gMotionFull += wmf;\n        gMotionBase += wmb;\n\n        vec2 cellDist = toDistance(offset, cellAt, kernel.base);\n\n        gAffine += rescaledAffine*4.0*weight*\n          outerProduct(cMotionFull*scaleBoundsToGrid, cellDist);\n      }\n    }\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion)\n    /**\n    * Mix grid and point velocities for ASFLIP, according to whether the\n    * material is separating.\n    * Mix full-grid-motion with particle-motion minus base-grid-motion - same\n    * as full-grid-motion but without stress or other effects applied, leaving\n    * only those effects when subtracted.\n    *\n    * @see [The ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n    * @see [Taichi PyASFLIP implementation mixing old nodal motion](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L410-L415)\n    */\n    vec2 pMotion = rescaledMotion*\n      points_data[pReadMotion].points_channels_motion;\n\n    vec2 motionSplit = motionAdjust*(pMotion-gMotionBase);\n    vec2 wandered = onSphere(map(random(points_uv*chaos), 0.0, 1.0, -TAU, TAU));\n  #endif\n\n  #if defined(points_output_motion)\n    vec2 motionTo = gMotionFull+motionSplit;\n\n    /** Avoid slow spots, wander motion. */\n    float wanderOn = when_ge_2166047709(wander.s, 0.0);\n    float wanderSlow = 1.0-clamp(dot(motionTo, motionTo)*wander.s, 0.0, 1.0);\n\n    motionTo += wanderOn*wanderSlow*wander.t*boundsSide*wandered;\n\n    float speed = length(motionTo);\n    float moving = when_gt_529295689(speed, eps);\n\n    motionTo *= mix(1.0,\n      mix(1.0, min(speed, speedClamp), moving)/mix(1.0, speed, moving),\n      when_ge_2166047709(speedClamp, 0.0));\n  #endif\n\n  #if defined(points_output_affine) || \\\n      defined(points_output_position) || defined(points_output_deform)\n    mat2 affineTo = gAffine;\n  #endif\n\n  #if defined(points_output_deform) || defined(points_output_position)\n    /**\n     * @todo Deformation and stress should ideally be calculated at the start of\n     *   the time-step not the end. Unsure if it matters much in practice, but\n     *   the output is used to calculate the position (deformation calculates\n     *   the volume which affects ASFLIP positional adjustment), it may be\n     *   better to move the deformation update to a separate step at the start\n     *   of each time-step.\n     *\n     * @see [Taichi PyASFLIP DruckerPrager plasticity, Neo-Hookean Elasticity](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L324-L336)\n     */\n\n    #ifdef rescale_deform\n      float rescaledDeform = exponent(rescaleDeform);\n    #endif\n\n    mat2 pDeform = rescaledDeform*\n      mat2(points_data[pReadDeform].points_channels_deform);\n\n    mat2 deformTo = (mat2(1)+(dt*affineTo))*pDeform;\n\n    SVD2 deformSVD = toSVD(deformTo);\n\n    // Plasticity flow.\n    deformSVD.sigma = projectDruckerPrager(deformSVD.sigma,\n      bulkMod, shearMod, materialFriction);\n\n    // Reconstruct elastic deformation gradient after plasticity flow.\n    deformTo = deformSVD.u*deformSVD.sigma*transpose(deformSVD.v);\n  #endif\n\n  #if defined(points_output_position)\n    /**\n     * @todo Try alternative volume ratio for materials where the stress depends\n     *   only on the volume ratio (e.g: weakly-compressible liquid), with large\n     *   timestep.\n     * @see [Equation 6 in ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n     */\n    float volumeRatio = determinant(deformTo);\n\n    /**\n     * @todo Check again if scaling `affine` is fixing or masking the grid\n     *   artefact issue:\n     *   - It seems to help reduce jitter with few points, as well as address\n     *     the grid artefact issue; does this indicate it works, or just reduce\n     *     another artefact with `deform` coincidentally?\n     *   - It seems like the large-scale effect looks little-to-no different to\n     *     setting `positionAdjusts[1]=0`; is it simply doing that, in effect?\n     *   - The key difference in this part of the process is `stress` (and the\n     *     `deform` it relies on): does the issue simply lie in how these are\n     *     calculated, or in them being calculated at the step's end not start?\n     */\n    float dilation = log(max(volumeSplit.s, volumeRatio))+(trace(affineTo)*dt);\n    float dilating = when_ge_2166047709(dilation, volumeSplit.t);\n    float positionAdjust = mix(positionAdjusts.x, positionAdjusts.y, dilating);\n    vec2 positionSplit = positionAdjust*motionSplit;\n    vec2 positionTo = pPosition+((gMotionFull+positionSplit)*dt);\n\n    /** Like fractal Brownian motion to help any stuck clumps separate. */\n    positionTo += wander.p*boundsSide*wandered;\n\n    // Boundaries.\n    positionTo = mix(positionTo,\n      clamp(positionTo, bounds.xy, bounds.zw), boundsClamp);\n  #endif\n\n  /**\n   * @todo This stress update is in grid-to-points just to avoid another\n   *   `toSVD(pDeform)` in the points-to-grid step; reconsider this?\n   */\n  #if defined(points_output_stress)\n    #ifdef rescale_stress\n      float rescaledStress = exponent(rescaleStress);\n    #endif\n\n    /**\n     * `D**-1` term for APIC transfers.\n     *\n     * @see [APIC transfer `D**-1` in paragraph after Eqn. 176](file:///Users/eoghanokeeffe/Library/CloudStorage/GoogleDrive-keeffeoghan@gmail.com/My%20Drive/Read/Fluid%20Continuum%20Physics/Material%20Point%20Method/The%20Material%20Point%20Method%20for%20Simulating%20Continuum%20Materials%20(mpm.graphics).pdf)\n     *\n     * @todo `D**-1` seems to be for points-to-grid transfers, not for\n     *   grid-to-points; should this use the inverse in grid-to-points, or does\n     *   it not matter, or does an issue arise from moving this stress step from\n     *   points-to-grid to grid-to-points?\n     */\n    float dInv = 4.0*area(grid_stateShape.xy);\n    // float dInv = 1.0/(4.0*area(grid_stateShape.xy));\n    // float dInv = 1.0;\n\n    /**\n     * Neo-Hookean elasticity stress to Cauchy stress.\n     *\n     * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L100)\n     * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L334)\n     * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/2.%20MLS_MPM_NeoHookean_Multithreaded/MLS_MPM_NeoHookean_Multithreaded.cs#L262)\n     */\n    // mat2 stressTo = -dt*volume*volumeRatio*dInv*\n    mat2 stressTo = -dt*volume*dInv*\n      neoHookeanElastic(deformSVD.u, deformSVD.sigma, bulkMod, shearMod);\n  #endif\n\n  /** @todo Better to move spawning into another pass for external control? */\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_mass) || defined(points_output_affine) || \\\n      defined(points_output_deform) || defined(points_output_stress)\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n\n    float pMass = rescaledMass*points_data[pReadMass].points_channels_mass;\n\n    vec2 spawnOut = spawnOnOut*\n      (when_lt_2281831123(positionTo, bounds.xy)+when_lt_2281831123(bounds.zw, positionTo));\n\n    // Avoid slow spots, respawn.\n    float spawnSlow = spawnOnSlow*when_lt_2281831123(dot(motionTo, motionTo), spawnOnSlow);\n\n    // Avoid dead centre.\n    float spawnCentre =\n      spawnOnCentre*when_lt_2281831123(dot(positionTo, positionTo), spawnOnCentre);\n\n    float spawn =\n      spawnOnAny*when_gt_529295689(spawnOut.x+spawnOut.y+spawnSlow+spawnCentre, 0.0);\n  #endif\n  #if defined(points_output_position) || defined(points_output_motion)\n    float hold = when_le_2658629798(pMass, 0.0);\n    float spawnOrHold = max(spawn, hold);\n  #endif\n  #if defined(points_output_mass) || defined(points_output_affine) || \\\n      defined(points_output_deform) || defined(points_output_stress)\n    float empty = when_eq_1062606552(pMass, 0.0);\n  #endif\n  #if defined(points_output_affine) || \\\n      defined(points_output_deform) || defined(points_output_stress)\n    float spawnOrEmpty = max(spawn, empty);\n  #endif\n\n  #ifdef points_output_position\n    points_output_position = mix(positionTo,\n        spawn_0(points_uv, bounds.xy, bounds.zw, 1.0/points_stateShape.xy),\n        spawnOrHold)/\n      rescaledPosition;\n  #endif\n  #ifdef points_output_motion\n    points_output_motion =\n      mix(motionTo, v0, spawnOrHold)/rescaledMotion;\n  #endif\n  #ifdef points_output_mass\n    points_output_mass = mix(pMass, mass, empty)/rescaledMass;\n  #endif\n  #ifdef points_output_affine\n    points_output_affine =\n      mix(vec4(affineTo), mv0, spawnOrEmpty)/rescaledAffine;\n  #endif\n  #ifdef points_output_deform\n    points_output_deform =\n      mix(vec4(deformTo), mv1, spawnOrEmpty)/rescaledDeform;\n  #endif\n  #ifdef points_output_stress\n    points_output_stress =\n      mix(vec4(stressTo), mv1, spawnOrEmpty)/rescaledStress;\n  #endif\n}\n";var tt={};tt="/** Points-to-grid vertex shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\npoints_useSamples\npoints_useReads_position\n\n/** @todo Draw to all the needed grid passes. */\n\n#ifdef points_splits\n  uniform sampler2D points_states[points_splits];\n#else\n  uniform sampler2D points_states;\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform vec4 grid_stateShape;\n\nattribute vec2 vertex;\nattribute float index;\nattribute float splat;\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  /** Advection scheme parameters. */\n  uniform float stretch;\n  uniform float turn;\n#endif\n\nuniform vec4 bounds;\nuniform vec2 widths;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n\n#if test == test_p2g\n  uniform float loop;\n\n  varying vec4 color;\n#endif\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  float transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n/**\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\n *\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n *\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\n */\n\n/**\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\n * but different for differently-signed operands, like JavaScript's `%`\n * operator.\n * Reuses the truncated division, and returns both; as both are useful in\n * various places, e.g: index conversion.\n *\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n *\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\n *\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\n *   always a `vec2` if any operand is a `float`.\n */\n\nivec2 remainDiv(int x, int y) {\n  // Careful handling integer maths; decimals truncated, works like a\n  // _remainder_ operator, rather than `mod`.\n  int d = x/y;\n\n  return ivec2(x-(y*d), d);\n}\n\nvec2 remainDiv(float x, int y) {\n  int d = int(x)/y;\n\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\n  // return vec2(mod(x, y), d);\n  return vec2(x-float(y*d), d);\n}\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\n */\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\n */\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\n\nvec2 indexUV(float index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, ivec2 size) {\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(float index, ivec2 size) {\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(int index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, int size) {\n  return remainDiv(index, size)/max(float(size-1), 1.0);\n}\n\nvec2 indexUV(int index, int size) {\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n#ifdef points_grid_quads\n  /**\n * Convenience to spread entries safely to their texel edges range.\n * Where `offsetUV` is for lookup queries, `spreadUV` is for lookup ranges.\n *\n * @see [`offsetUV`](./offset-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to spread, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with spread to texel edges, expect range\n *   `[0-pad, size+pad]`.\n */\n\nvec2 spreadUV(vec2 uv, float size, float pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, float size, vec2 pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, vec2 size, float pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, vec2 size, vec2 pad) { return (uv*size)-pad; }\n\nvec2 spreadUV(vec2 uv, int size, float pad) {\n  return spreadUV(uv, float(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, int size, vec2 pad) {\n  return spreadUV(uv, float(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, ivec2 size, float pad) {\n  return spreadUV(uv, vec2(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, ivec2 size, vec2 pad) {\n  return spreadUV(uv, vec2(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, float size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, vec2 size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, int size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, ivec2 size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv) { return spreadUV(uv, 1.0, 0.5); }\n\n#endif\n\n/**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/**\n * The cell base for each kernel type.\n *\n * @note Tried implementing the same `int(at)` cast-based truncation logic as\n *   the original, but it led to the simulation exploding, probably because an\n *   array-based grid can't handle negative indices but a texture-based one can,\n *   and truncation must've led to a division by 0 somewhere.\n */\n\n#define createToBaseShort(f, vec) \\\nvec f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at-0.5))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at-0.5)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#endif\n\n#ifdef kernelBaseCast\n  createToBase(toBase, float, int)\n  createToBase(toBase, vec2, ivec2)\n  createToBase(toBase, vec3, ivec3)\n#else\n  createToBase(toBase, float)\n  createToBase(toBase, vec2)\n  createToBase(toBase, vec3)\n#endif\n\n/** The cell base for each kernel type. */\n#define createToDiffShort(f, vec) \\\nvec f(vec at, vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShort(f, vec)\n#else\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = at-base); } \\\n  createToDiffShort(f, vec)\n#endif\n\ncreateToDiff(toDiff, float)\ncreateToDiff(toDiff, vec2)\ncreateToDiff(toDiff, vec3)\n\nvec2 toWeight(inout vec2 w, vec2 v) { return w = v; }\nvec2 toWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 toWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(f, vec, mat) \\\n \\\nmat f(vec diff, out mat weights) { \\\n  createToWeightsMain(vec, diff) \\\n   \\\n  toWeight(weights[0], 0.5*(w0*w0)); \\\n  toWeight(weights[1], 0.75-(w1*w1)); \\\n  toWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat f(vec diff) { \\\n  mat weights; \\\n   \\\n  return f(diff, weights); \\\n}\n\ncreateToWeights(toWeights, vec2, mat3)\ncreateToWeights(toWeights, vec3, mat3)\n\n#define createToKernel(f, vec, mat, Kernel) \\\n \\\nKernel f(vec at, out vec base, out vec diff, out mat weights) { \\\n  return Kernel(base = toBase(at, base), \\\n    diff = toDiff(at, base, diff), \\\n    weights = toWeights(diff, weights)); \\\n} \\\n \\\nKernel f(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n} \\\n \\\nKernel f(vec at, out vec base, out mat weights) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out mat weights) { \\\n  vec base; \\\n   \\\n  return f(at, base, weights); \\\n} \\\n \\\nKernel f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\ncreateToKernel(toKernel, vec2, mat3, Kernel2)\ncreateToKernel(toKernel, vec3, mat3, Kernel3)\n\n/** The cell offset for each kernel type. */\n#define createToOffsetShort(f, vec) \\\nvec f(vec offset) { \\\n  vec to; \\\n   \\\n  return f(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset-1.0); } \\\n  createToOffsetShort(f, vec)\n#else\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset); } \\\n  createToOffsetShort(f, vec)\n#endif\n\ncreateToOffset(toOffset, float)\ncreateToOffset(toOffset, vec2)\ncreateToOffset(toOffset, vec3)\n\n#if defined(rescale_affine)\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\n/**\n * @todo Handle separate splats, by how many buffers can be drawn to.\n * @todo Separate processes according to active outputs.\n */\nvoid main() {\n  vec2 uv = indexUV(index, points_stateShape.xy);\n\n  uv = offsetUV(uv, points_stateShape.xy);\n  points_tapState(uv);\n\n  vec2 position = points_data[points_reads_position_position]\n    .points_channels_position;\n\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    // Negative `mass` can indicate points spawning that still affect physics.\n    mass = abs(points_data[points_reads_position_mass].points_channels_mass);\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n\n    vec2 advection = (stretch+vec2(turn, -turn))*0.5;\n\n    affine = rescaledAffine*\n      mat2(points_data[points_reads_position_affine].points_channels_affine);\n\n    affine = (mass*rescaledMass)*\n      ((affine*advection.x)+(transpose(affine)*advection.y));\n\n    affine /= rescaledAffine;\n\n    motion = points_data[points_reads_position_motion].points_channels_motion;\n  #endif\n  #if defined(grid_output_motionFull)\n    stress = mat2(points_data[points_reads_position_stress]\n      .points_channels_stress);\n  #endif\n\n  /** Map the position into the correct range with the proper offset. */\n  #if test == test_p2g\n    color = vec4(uv, 0.5, 1);\n    // cellAt = mod((uv+(loop*9e-5))*grid_stateShape.xy, grid_stateShape.xy);\n    cellAt = uv*grid_stateShape.xy;\n    // gl_Position = vec4(map(uv+(vertex/grid_stateShape.xy), v0, v1, -v1, v1), 0, 1);\n    // return;\n  #else\n    /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n    cellAt = map(position, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\n  #endif\n\n  /** Kernel weights and positions, to scale the values per-fragment. */\n  toKernel(cellAt, cellBase, cellWeights);\n\n  vec2 to = cellBase+toOffset(vertex*float(kernelSize));\n\n  gl_Position = vec4(map(to, v0, grid_stateShape.xy, -v1, v1), 0, 1);\n\n  #ifdef points_grid_quads\n    /**\n     * Mask the weights by the distance from these indexes per-fragment.\n     * Account for the half-pixel offset at the fragment centre.\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\n     */\n    cellIndex = spreadUV(vertex, kernelSize);\n  #else\n    /**\n     * Convert vertex position to `gl_FragCoord` window-space.\n     * @see [SO](https://stackoverflow.com/a/7158573)\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\n     */\n    point = vec3(to, 0.5*(gl_PointSize = float(kernelSize)));\n  #endif\n}\n";var tr={};tr="/** Points-to-grid fragment shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\n/** @todo Draw to all the needed grid passes. */\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  uniform vec4 grid_stateShape;\n#endif\n\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_affine\n  uniform vec2 rescaleAffine;\n#else\n  const float rescaledAffine = 1.0;\n#endif\n#ifdef rescale_stress\n  uniform vec2 rescaleStress;\n#else\n  const float rescaledStress = 1.0;\n#endif\n\n#if test == test_p2g\n  varying vec4 color;\n#endif\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst mat3 mask = mat3(vec3(0), vec3(1), vec3(2));\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\nconst vec2 cellNear = v1*0.5;\n\n#ifndef points_grid_quads\n  /**\n * Convenience to spread entries safely to their texel edges range.\n * Where `offsetUV` is for lookup queries, `spreadUV` is for lookup ranges.\n *\n * @see [`offsetUV`](./offset-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to spread, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with spread to texel edges, expect range\n *   `[0-pad, size+pad]`.\n */\n\nvec2 spreadUV(vec2 uv, float size, float pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, float size, vec2 pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, vec2 size, float pad) { return (uv*size)-pad; }\nvec2 spreadUV(vec2 uv, vec2 size, vec2 pad) { return (uv*size)-pad; }\n\nvec2 spreadUV(vec2 uv, int size, float pad) {\n  return spreadUV(uv, float(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, int size, vec2 pad) {\n  return spreadUV(uv, float(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, ivec2 size, float pad) {\n  return spreadUV(uv, vec2(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, ivec2 size, vec2 pad) {\n  return spreadUV(uv, vec2(size), pad);\n}\n\nvec2 spreadUV(vec2 uv, float size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, vec2 size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, int size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv, ivec2 size) { return spreadUV(uv, size, 0.5); }\nvec2 spreadUV(vec2 uv) { return spreadUV(uv, 1.0, 0.5); }\n\n#endif\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  /** The cell offset for each kernel type. */\n#define createToOffsetShort(f, vec) \\\nvec f(vec offset) { \\\n  vec to; \\\n   \\\n  return f(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset-1.0); } \\\n  createToOffsetShort(f, vec)\n#else\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset); } \\\n  createToOffsetShort(f, vec)\n#endif\n\ncreateToOffset(toOffset, float)\ncreateToOffset(toOffset, vec2)\ncreateToOffset(toOffset, vec3)\n\n  /**\n * The distance function for each kernel type.\n *\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\n * @todo Not sure this is right, the scales might be off.\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\n */\n\n#ifdef kernelTypeCentre\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\n   * // From offset:\n   * offset = offset-1\n   * // Thus:\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\n   * // From weights:\n   * diff(base, at) = (at-base)-0.5\n   * // And:\n   * base(at) = floor(at)\n   * // @todo The rest\n   * ```\n   *\n   * @todo Derive the form `toDistance(offset, diff)`.\n   */\n  #define createToDistance(f, vec) \\\n   \\\n  vec f(vec offset, vec at, vec base) { return ((base+offset)-at)+0.5; } \\\n   \\\n  vec f(vec offset, vec diff);\n#else\n  /** The cell base for each kernel type. */\n#define createToDiffShort(f, vec) \\\nvec f(vec at, vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShort(f, vec)\n#else\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = at-base); } \\\n  createToDiffShort(f, vec)\n#endif\n\ncreateToDiff(toDiff, float)\ncreateToDiff(toDiff, vec2)\ncreateToDiff(toDiff, vec3)\n\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, diff) = offset-diff\n   * // From weights:\n   * diff(base, at) = at-base\n   * // Thus:\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\n   * ```\n   */\n  #define createToDistance(f, vec) \\\n   \\\n  vec f(vec offset, vec diff) { return offset-diff; } \\\n   \\\n  vec f(vec offset, vec at, vec base) { return f(offset, toDiff(at, base)); }\n#endif\n\ncreateToDistance(toDistance, float)\ncreateToDistance(toDistance, vec2)\ncreateToDistance(toDistance, vec3)\n\n#endif\n\nfloat when_lt_1117569599(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1117569599(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1117569599(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1117569599(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n#if defined(rescale_motion) || defined(rescale_mass) || \\\n  defined(rescale_affine) || defined(rescale_stress)\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\nvoid main() {\n  #if test == test_p2g\n    // for(int t = 0; t < grid_textures; ++t) { gl_FragData[t] = color; }\n    gl_FragData[0] = color;\n    return;\n  #endif\n\n  #ifndef points_grid_quads\n    /**\n     * Convert vertex position to `gl_FragCoord` window-space.\n     * Mask the weights by the distance from these indexes per-fragment.\n     * Account for the half-pixel offset at the fragment centre.\n     * @see [Pixel coordinates on WebGL Fundamentals](https://webglfundamentals.org/webgl/lessons/webgl-shadertoy.html#pixel-coords)\n     * @see [SO](https://stackoverflow.com/a/7158573)\n     * @see [SO](https://stackoverflow.com/a/54237532/716898)\n     */\n    vec2 cellIndex = map(gl_FragCoord.xy-point.xy, -point.bb, point.bb, v0, v1);\n\n    cellIndex = spreadUV(cellIndex, kernelSize);\n  #endif\n\n  /** Work around the need for constant index by looping and masking. */\n  // float weight = cellWeights[int(cellIndex.x)].x*cellWeights[int(cellIndex.y)].y;\n  vec2 maskWeight = v0;\n\n  for(int i = 0; i < kernelSize; ++i) {\n    maskWeight += cellWeights[i].xy*when_lt_1117569599(abs((cellIndex)-mask[i].xy), cellNear);\n  }\n\n  float weight = maskWeight.x*maskWeight.y;\n\n  /** @todo Handle multiple passes properly. */\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    #ifdef rescale_mass\n      float rescaledMass = exponent(rescaleMass);\n    #endif\n\n    float massTo = rescaledMass*mass;\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n    #ifdef rescale_affine\n      float rescaledAffine = exponent(rescaleAffine);\n    #endif\n\n    vec2 motionTo = rescaledMotion*motion;\n    mat2 affineTo = rescaledAffine*affine;\n    vec2 massMotion = massTo*motionTo;\n    vec2 offset = toOffset(cellIndex);\n\n    vec2 cellDist =\n      toDistance(offset, cellAt, cellBase)/grid_stateShape.xy;\n  #endif\n  #if defined(grid_output_motionFull)\n    #ifdef rescale_stress\n      float rescaledStress = exponent(rescaleStress);\n    #endif\n\n    mat2 stressTo = rescaledStress*stress;\n  #endif\n\n  #ifdef grid_output_mass\n    grid_output_mass = (weight*massTo)/rescaledMass;\n  #endif\n  #ifdef grid_output_motionFull\n    grid_output_motionFull =\n      (weight*(massMotion+((stressTo+affineTo)*cellDist)))/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    grid_output_motionBase =\n      (weight*(massMotion+(affineTo*cellDist)))/rescaledMotion;\n  #endif\n}\n";var ta={};ta="/** Grid-to-screen fragment shader. */\n\n/** @todo Use a better setup than this, for tidier ongoing mapping tests. */\n#define test_off 0\n#define test_p2g 1\n#define test_draw 2\n#ifndef test\n  #define test test_off\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\ngrid_useSamples\ngrid_useReads_mass\n\n#ifdef grid_splits\n  uniform sampler2D grid_states[grid_splits];\n#else\n  uniform sampler2D grid_states;\n#endif\n\nuniform float grid_stepNow;\nuniform vec4 grid_stateShape;\n\nuniform vec2 range;\nuniform vec2 curve[4];\nuniform vec4 colorLo;\nuniform vec4 colorHi;\n\n#ifdef angleHSLA\n  uniform vec4 angleHSLA;\n#endif\n\nuniform vec2 aspect;\n\n#ifdef rescale_motion\n  uniform vec2 rescaleMotion;\n#else\n  const float rescaledMotion = 1.0;\n#endif\n\nvarying vec2 grid_uv;\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\n\nfloat when_lt_1604150559(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1604150559(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1604150559(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1604150559(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n#ifdef angleHSLA\n  float hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n  const float PI = 3.14159265359;\n\n#endif\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n/**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/**\n * The cell base for each kernel type.\n *\n * @note Tried implementing the same `int(at)` cast-based truncation logic as\n *   the original, but it led to the simulation exploding, probably because an\n *   array-based grid can't handle negative indices but a texture-based one can,\n *   and truncation must've led to a division by 0 somewhere.\n */\n\n#define createToBaseShort(f, vec) \\\nvec f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #ifdef kernelBaseCast\n    #define createToBase(f, vec, ivec) \\\n    vec f(vec at, out vec base) { return (base = vec(ivec(at-0.5))); } \\\n    createToBaseShort(f, vec)\n  #else\n    #define createToBase(f, vec) \\\n    vec f(vec at, out vec base) { return (base = floor(at-0.5)); } \\\n    createToBaseShort(f, vec)\n  #endif\n#endif\n\n#ifdef kernelBaseCast\n  createToBase(toBase, float, int)\n  createToBase(toBase, vec2, ivec2)\n  createToBase(toBase, vec3, ivec3)\n#else\n  createToBase(toBase, float)\n  createToBase(toBase, vec2)\n  createToBase(toBase, vec3)\n#endif\n\n/** The cell base for each kernel type. */\n#define createToDiffShort(f, vec) \\\nvec f(vec at, vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShort(f, vec)\n#else\n  #define createToDiff(f, vec) \\\n  vec f(vec at, vec base, out vec diff) { return (diff = at-base); } \\\n  createToDiffShort(f, vec)\n#endif\n\ncreateToDiff(toDiff, float)\ncreateToDiff(toDiff, vec2)\ncreateToDiff(toDiff, vec3)\n\nvec2 toWeight(inout vec2 w, vec2 v) { return w = v; }\nvec2 toWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 toWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec, diff) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(f, vec, mat) \\\n \\\nmat f(vec diff, out mat weights) { \\\n  createToWeightsMain(vec, diff) \\\n   \\\n  toWeight(weights[0], 0.5*(w0*w0)); \\\n  toWeight(weights[1], 0.75-(w1*w1)); \\\n  toWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat f(vec diff) { \\\n  mat weights; \\\n   \\\n  return f(diff, weights); \\\n}\n\ncreateToWeights(toWeights, vec2, mat3)\ncreateToWeights(toWeights, vec3, mat3)\n\n#define createToKernel(f, vec, mat, Kernel) \\\n \\\nKernel f(vec at, out vec base, out vec diff, out mat weights) { \\\n  return Kernel(base = toBase(at, base), \\\n    diff = toDiff(at, base, diff), \\\n    weights = toWeights(diff, weights)); \\\n} \\\n \\\nKernel f(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff); \\\n} \\\n \\\nKernel f(vec at, out vec base, out mat weights) { \\\n  vec diff; \\\n   \\\n  return f(at, base, diff, weights); \\\n} \\\n \\\nKernel f(vec at, out mat weights) { \\\n  vec base; \\\n   \\\n  return f(at, base, weights); \\\n} \\\n \\\nKernel f(vec at) { \\\n  vec base; \\\n   \\\n  return f(at, base); \\\n}\n\ncreateToKernel(toKernel, vec2, mat3, Kernel2)\ncreateToKernel(toKernel, vec3, mat3, Kernel3)\n\n/** The cell offset for each kernel type. */\n#define createToOffsetShort(f, vec) \\\nvec f(vec offset) { \\\n  vec to; \\\n   \\\n  return f(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset-1.0); } \\\n  createToOffsetShort(f, vec)\n#else\n  #define createToOffset(f, vec) \\\n  vec f(in vec offset, out vec to) { return (to = offset); } \\\n  createToOffsetShort(f, vec)\n#endif\n\ncreateToOffset(toOffset, float)\ncreateToOffset(toOffset, vec2)\ncreateToOffset(toOffset, vec3)\n\n/**\n * Cubic Bézier interpolation, CSS-style.\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\n * corresponding `y` value using the Bézier curve; note that this doesn't\n * directly use the usual `t` value as input for interpolation.\n *\n * @todo Split up and generalise, add to `bezier-gen` or other package.\n *\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n */\n\n// Code generated by `bezier-gen` - start:\n\nfloat bezier(float cp0, float cp1, float cp2, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n    float p3 = mix(cp3, cp4, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n    p2 = mix(p2, p3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\n// Code generated by `bezier-gen` - end.\n\n// float bezier(float p0, float p1, float p2, float p3, float t) {\n//   float u = 1.0-t;\n\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\n// }\n\n/** @todo Generalise to other orders. */\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\n  float u = 1.0-t;\n\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\n}\n\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\n  float t = x;\n\n  // Netwon's method iteration.\n  for(int i = 0; i < 4; ++i) {\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\n    float error = xt-x;\n\n    // Newton's iteration.\n    t = clamp(t-(error/dtx), 0.0, 1.0);\n  }\n\n  // Now that we have `t`, compute the corresponding `y` value.\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\n}\n\n#if defined(rescale_motion)\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\nvoid main() {\n  #ifdef rescale_motion\n    float rescaledMotion = exponent(rescaleMotion);\n  #endif\n\n  vec2 motion = v0;\n  /** Seems the right range, by trial, versus `[0, grid_stateShape.xy-1]`. */\n  Kernel2 kernel = toKernel(grid_uv*grid_stateShape.xy);\n\n  for(int gx = 0; gx < kernelSize; ++gx) {\n    for(int gy = 0; gy < kernelSize; ++gy) {\n      #if test == test_p2g\n        // vec2 offset = toKernelOffset(vec2(gx, gy));\n        // vec2 offset = toKernelOffset(vec2(kernelSize)*0.5);\n        /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\n        // vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\n        // vec2 st = kernel.base/(grid_stateShape.xy-1.0);\n        // vec2 st = kernel.base/grid_stateShape.xy;\n        // vec2 st = grid_uv;\n        vec2 st = floor((grid_uv*grid_stateShape.xy)-0.5)/grid_stateShape.xy;\n\n        // st = offsetUV(st, grid_stateShape.xy);\n        // gl_FragColor.rgba = vec4(st, 0, 1);\n        // return;\n        grid_tapState(st);\n        gl_FragColor.rgba = grid_data[0];\n\n        // vec4 dc = grid_data[0]-vec4(st, 0.5, 1);\n\n        // /** @todo With high scaling this is less accurate near axes cross. */\n        // gl_FragColor.rgba = mix(vec4(0, 1, 0, 1), vec4(1, 0, 0, 1),\n        //   clamp(dot(dc, dc)*1e3, 0.0, 1.0));\n        return;\n      #else\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n        vec2 offset = toOffset(vec2(gx, gy));\n        /** Range: `base` is `[0, grid_stateShape.xy-1.0]`, `st` is `[0, 1]`. */\n        vec2 st = (kernel.base+offset)/(grid_stateShape.xy-1.0);\n\n        st = offsetUV(st, grid_stateShape.xy);\n\n        #if grid_stepsPast > 1\n          for(int stepPast = 0; stepPast < grid_stepsPast; ++stepPast) {\n            float ago = float(stepPast)/float(grid_stepsPast);\n\n            grid_tapStateBy(offsetUV(st, grid_stateShape.xy), stepPast, 0);\n            // grid_tapStateBy(st, stepPast, 0);\n\n            motion += rescaledMotion*(1.0-ago)*weight*\n              grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n              // grid_data[grid_reads_mass_motionFull].grid_channels_motionFull*\n              // grid_data[grid_reads_mass_mass].grid_channels_mass;\n              // vec2(grid_data[grid_reads_mass_mass].grid_channels_mass);\n          }\n        #else\n          grid_tapState(offsetUV(st, grid_stateShape.xy));\n          // grid_tapState(st);\n\n          motion += rescaledMotion*weight*\n            grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n            // grid_data[grid_reads_mass_motionFull].grid_channels_motionFull*\n            // grid_data[grid_reads_mass_mass].grid_channels_mass;\n            // vec2(grid_data[grid_reads_mass_mass].grid_channels_mass);\n        #endif\n      #endif\n    }\n  }\n\n  // motion *= 1e9;\n\n  #ifdef paceLinear\n    float pace = length(motion);\n  #else\n    float pace = dot(motion, motion);\n  #endif\n\n  float at = clamp(map(pace, range.x, range.y, 0.0, 1.0), 0.0, 1.0);\n  float to = xToY(curve[0], curve[1], curve[2], curve[3], at);\n  // float to = at;\n  vec2 outside = when_lt_1604150559(grid_uv, v0)+when_lt_1604150559(v1, grid_uv);\n  float on = when_lt_1604150559(outside.x+outside.y, 0.5);\n  vec4 color = mix(colorLo, colorHi, clamp(to, 0.0, on));\n\n  #ifdef angleHSLA\n    float hue = map(atan(motion.y, motion.x), -PI, PI, 0.0, 1.0);\n    vec3 angleColor = hsl2rgb(fract(hue+angleHSLA.x), angleHSLA.y, angleHSLA.z);\n\n    color.rgb = mix(color.rgb, angleColor, angleHSLA.a*on);\n  #endif\n\n  // #if test != test_off\n  //   vec2 line = fract(grid_uv*grid_stateShape.xy);\n\n  //   // color = mix(color, 1.0-color, lt(min(line.x, line.y), 5e-2));\n  //   color = mix(color, vec4(1, 0, 0, 1), lt(min(line.x, line.y), 0.1));\n  // #endif\n\n  gl_FragColor = clamp(color, 0.0, 1.0);\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";var ti={};ti="/** Points-to-screen vertex shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\n#define positionChannels points_channels_0\n#define massChannels points_channels_2\n\npoints_useSamples\npoints_useReads_position\n\nattribute float index;\n\n#ifdef points_splits\n  uniform sampler2D points_states[points_splits];\n#else\n  uniform sampler2D points_states;\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform float wideHi;\nuniform float wideLo;\nuniform vec2 widths;\nuniform vec4 colorHi;\nuniform vec4 colorLo;\n\n#ifdef colorImage\n  uniform sampler2D colorImage;\n  uniform vec2 colorBy;\n  uniform vec2 flip;\n  uniform vec4 offset;\n  uniform vec2 aspectImage;\n#endif\n\nuniform float dt;\nuniform vec2 size;\nuniform vec2 aspectScreen;\nuniform vec4 bounds;\nuniform float form;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n#ifdef rescale_position\n  uniform vec2 rescalePosition;\n#else\n  const float rescaledPosition = 1.0;\n#endif\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat when_neq_1604150559(float x, float y) {\n  return abs(sign(x - y));\n}\n\nvec2 when_neq_1604150559(vec2 x, vec2 y) {\n  return abs(sign(x - y));\n}\n\nvec3 when_neq_1604150559(vec3 x, vec3 y) {\n  return abs(sign(x - y));\n}\n\nvec4 when_neq_1604150559(vec4 x, vec4 y) {\n  return abs(sign(x - y));\n}\n\n#ifdef colorImage\n  float when_lt_529295689(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_529295689(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_529295689(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_529295689(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat when_ge_2315452051(float x, float y) {\n  return 1.0 - when_lt_529295689(x, y);\n}\n\nvec2 when_ge_2315452051(vec2 x, vec2 y) {\n  return 1.0 - when_lt_529295689(x, y);\n}\n\nvec3 when_ge_2315452051(vec3 x, vec3 y) {\n  return 1.0 - when_lt_529295689(x, y);\n}\n\nvec4 when_ge_2315452051(vec4 x, vec4 y) {\n  return 1.0 - when_lt_529295689(x, y);\n}\n\n#endif\n\n/**\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\n *\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n *\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\n */\n\n/**\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\n * but different for differently-signed operands, like JavaScript's `%`\n * operator.\n * Reuses the truncated division, and returns both; as both are useful in\n * various places, e.g: index conversion.\n *\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n *\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\n *\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\n *   always a `vec2` if any operand is a `float`.\n */\n\nivec2 remainDiv(int x, int y) {\n  // Careful handling integer maths; decimals truncated, works like a\n  // _remainder_ operator, rather than `mod`.\n  int d = x/y;\n\n  return ivec2(x-(y*d), d);\n}\n\nvec2 remainDiv(float x, int y) {\n  int d = int(x)/y;\n\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\n  // return vec2(mod(x, y), d);\n  return vec2(x-float(y*d), d);\n}\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\n */\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\n */\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\n\nvec2 indexUV(float index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, ivec2 size) {\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(float index, ivec2 size) {\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(int index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, int size) {\n  return remainDiv(index, size)/max(float(size-1), 1.0);\n}\n\nvec2 indexUV(int index, int size) {\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n#if defined(rescale_mass) || defined(rescale_position)\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\n#if points_stepsPast > 1\n  #define indexFormsStates\n  #ifdef indexFormsStates\n    /**\n * The step and entry indexes corresponding to the number of entries and steps\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\n * the `indexForms` `JS` `function`.\n * Given the vertex index and number of steps; iterates entries-then-steps.\n *\n * @see {@link index-forms}\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` The index of a vertex; expects simple sequential\n *   index attribute.\n * @param {float|int} `states` How many steps of state each entry has.\n * @param {float|int} [`form`] How many steps of state each form covers.\n *\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\n *   correct data to draw the given `form` along each entry's steps of state;\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\n *   iterates with `index` by entries-then-steps.\n */\n\n// Careful handling integer maths - decimals truncated.\nivec2 indexForms_1(int index, int states, int form) {\n  int f = form-1;\n  ivec2 stepEntry = remainDiv(index, (states-f)*form);\n\n  stepEntry.s = (stepEntry.s+f)/form;\n\n  return stepEntry;\n}\n\nvec2 indexForms_1(float index, float states, float form) {\n  vec2 stepEntry = remainDiv(index/form, states-form+1.0);\n\n  stepEntry.s = ceil(stepEntry.s);\n\n  return stepEntry;\n}\n\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(states), int(form))`\n// or `vec2(indexForms(int(index), int(states), int(form)))` instead.\n\nvec2 indexForms_1(int index, float states, float form) {\n  return indexForms_1(float(index), states, form);\n}\n\nvec2 indexForms_1(float index, int states, float form) {\n  return indexForms_1(index, float(states), form);\n}\n\nvec2 indexForms_1(float index, float states, int form) {\n  return indexForms_1(index, states, float(form));\n}\n\nvec2 indexForms_1(float index, int states, int form) {\n  return indexForms_1(index, float(states), float(form));\n}\n\nvec2 indexForms_1(int index, float states, int form) {\n  return indexForms_1(float(index), states, float(form));\n}\n\nvec2 indexForms_1(int index, int states, float form) {\n  return indexForms_1(float(index), float(states), form);\n}\n\n// Expects pairs by default, though also works for single points and possibly\n// useful for other forms.\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(states))` or\n// `vec2(indexForms(int(index), int(states)))` instead.\n\nivec2 indexForms_1(int index, int states) {\n  return indexForms_1(index, states, 2);\n}\n\nvec2 indexForms_1(float index, float states) {\n  return indexForms_1(index, states, 2.0);\n}\n\nvec2 indexForms_1(int index, float states) {\n  return indexForms_1(float(index), states, 2.0);\n}\n\nvec2 indexForms_1(float index, int states) {\n  return indexForms_1(index, float(states), 2.0);\n}\n\n  #else\n    /**\n * The step and entry indexes corresponding to the number of entries and steps\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\n * the `indexForms` `JS` `function`.\n * Given the vertex index and number of entries; iterates steps-then-entries.\n *\n * Works out as 2 `remainDiv`:\n * `[(index%form)+floor(floor(index/form)/count), floor(index/form)%count]`\n * `[indexForm.s+floor(indexForm.t/count), indexForm.t%count]`\n * `[indexForm.s+stepEntry.t, stepEntry.s]`\n *\n * @see {@link index-forms}\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` The index of a vertex; expects simple sequential\n *   index attribute.\n * @param {float|int} `count` How many entries are in each step of state.\n * @param {float|int} [`form`] How many steps of state each form covers.\n *\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\n *   correct data to draw the given `form` along each entry's steps of state;\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\n *   iterates with `index` by steps-then-entries.\n */\n\n// Careful handling integer maths - decimals truncated.\nivec2 indexForms_0(int index, int count, int form) {\n  ivec2 indexForm = remainDiv(index, form);\n  ivec2 stepEntry = remainDiv(indexForm.t, count).ts;\n\n  stepEntry.s += indexForm.s;\n\n  return stepEntry;\n}\n\nvec2 indexForms_0(float index, float count, float form) {\n  vec2 indexForm = remainDiv(index, form);\n  vec2 stepEntry = remainDiv(indexForm.t, count).ts;\n\n  stepEntry.s += indexForm.s;\n\n  return stepEntry;\n}\n\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(count), int(form))` or\n// `vec2(indexForms(int(index), int(count), int(form)))` instead.\n\nvec2 indexForms_0(int index, float count, float form) {\n  return indexForms_0(float(index), count, form);\n}\n\nvec2 indexForms_0(float index, int count, float form) {\n  return indexForms_0(index, float(count), form);\n}\n\nvec2 indexForms_0(float index, float count, int form) {\n  return indexForms_0(index, count, float(form));\n}\n\nvec2 indexForms_0(float index, int count, int form) {\n  return indexForms_0(index, float(count), float(form));\n}\n\nvec2 indexForms_0(int index, float count, int form) {\n  return indexForms_0(float(index), count, float(form));\n}\n\nvec2 indexForms_0(int index, int count, float form) {\n  return indexForms_0(float(index), float(count), form);\n}\n\n// Expects pairs by default, though also works for single points and possibly\n// useful for other forms.\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(count))` or\n// `vec2(indexForms(int(index), int(count)))` instead.\n\nivec2 indexForms_0(int index, int count) {\n  return indexForms_0(index, count, 2);\n}\n\nvec2 indexForms_0(float index, float count) {\n  return indexForms_0(index, count, 2.0);\n}\n\nvec2 indexForms_0(int index, float count) {\n  return indexForms_0(float(index), count, 2.0);\n}\n\nvec2 indexForms_0(float index, int count) {\n  return indexForms_0(index, float(count), 2.0);\n}\n\n  #endif\n#endif\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\nconst vec4 hidden = vec4(0, 0, 0, -1);\n\n#ifdef colorImage\n  const float colorByBase = 1.0;\n  const float colorByImage = 2.0;\n#endif\n\nvoid main() {\n  #if points_stepsPast > 1\n    // If multiple steps are given, find past step and entry.\n    // Lookups mostly equivalent; input and result iteration order differ.\n    #ifdef indexFormsStates\n      vec2 stepEntry = indexForms_1(index, points_stepsPast, form);\n    #else\n      vec2 stepEntry = indexForms_0(index, points_entries, form);\n    #endif\n\n    float stepPast = stepEntry.s;\n    float entry = stepEntry.t;\n  #else\n    // If only 1 step is given, past step and entry are known.\n    float stepPast = 0.0;\n    float entry = index;\n  #endif\n\n  vec2 st =\n    offsetUV(indexUV(entry, points_stateShape.xy), points_stateShape.xy);\n  // vec2 st = indexUV(entry, points_stateShape.xy);\n\n  #if points_stepsPast > 1\n    points_tapStateBy(st, stepPast, 0);\n  #else\n    points_tapState(st);\n  #endif\n\n  #ifdef rescale_mass\n    float rescaledMass = exponent(rescaleMass);\n  #endif\n  #ifdef rescale_position\n    float rescaledPosition = exponent(rescalePosition);\n  #endif\n\n  float mass = rescaledMass*\n    points_data[points_reads_position_mass].massChannels;\n\n  vec2 position = rescaledPosition*\n    points_data[points_reads_position_position].positionChannels;\n\n  float show = when_neq_1604150559(mass, 0.0);\n  vec2 boundSize = bounds.zw-bounds.xy;\n  vec2 to = (position/max(boundSize.x, boundSize.y))*2.0;\n  vec4 screen = mix(hidden, vec4(to, 0, 1), show);\n\n  screen.xy *= aspectScreen;\n  gl_Position = screen;\n\n  float ago = stepPast/max(float(points_stepsPast-1), 1.0);\n\n  color = mix(colorHi, colorLo, ago);\n\n  #ifdef colorImage\n    vec2 pq = ((fract(st*flip)*(aspectImage/aspectScreen))/offset.zw)-offset.xy;\n    vec4 colorPixel = texture2D(colorImage, pq);\n    float colorAt = colorBy.x;\n\n    colorAt = mix(colorAt, (1.0-color.a)+colorBy.x, when_ge_2315452051(colorBy.y, colorByBase));\n    colorAt = mix(colorAt, colorPixel.a+colorBy.x, when_ge_2315452051(colorBy.y, colorByImage));\n    color = mix(color, colorPixel, clamp(colorAt, 0.0, 1.0));\n  #endif\n\n  color *= show;\n\n  wide = mix(wideHi, wideLo, ago)*show;\n\n  float pointSize = gl_PointSize = 0.5*clamp(wide/screen.w, widths.s, widths.t);\n\n  /**\n   * Convert vertex position to `gl_FragCoord` window-space.\n   * @see [SO](https://stackoverflow.com/a/7158573)\n   * @see [SO](https://stackoverflow.com/a/54237532/716898)\n   * @todo Why does the correct size here seem to be half the radius?\n   */\n  sphere = vec3(size*map(screen.xy/screen.w, -v1, v1, v0, v1), pointSize*0.5);\n}\n";var to={};to="/** Points-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\nfloat when_gt_1540259130(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvoid main() {\n  float r = sphere.p;\n  float r2 = r*r;\n  vec2 cf = gl_FragCoord.xy-sphere.xy;\n  float cfl2 = dot(cf, cf);\n  float isWide = when_gt_1540259130(wide, 1.0);\n\n  #ifdef useDiscard\n    if(isWide*cfl2 > r2) { discard; }\n  #endif\n\n  float fade = max(r2-(isWide*cfl2), 0.0);\n\n  #ifdef lengthLinear\n    fade = sqrt(fade)/r;\n  #else\n    fade = fade/r2;\n  #endif\n\n  gl_FragColor = color*fade;\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";const{keys:ts,assign:tf}=Object,{floor:tl,min:tc,max:tu,abs:td,random:tp,sign:tm,sin:tv}=Math,{GRAV_ACCEL:th}=n8.MKS,tg={},tb=()=>["angle_instanced_arrays"],tx=()=>["oes_texture_half_float","ext_color_buffer_half_float"];function ty(e,n={}){let t=n.values=[],r=n.index={},a=n.alias=[];return(n.fields=e).forEach((e,n)=>a[r[n]=t.push(e)-1]=n),n}function t_(e,n,t={}){let r=ei(t.state=e);if(t.macros??=em(e),!n)return t;for(let e in r){let t=r[e];r[e]=(e,r,a)=>t(e,n(e,r,a),a)}return t}const tw={stepNow:0,passNow:0,bound:1},tS={stepNow:0,passNow:0,bound:0,maps:{buffersMax:0}};var tM={};tM=function(){var e=function(e){return e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Uint8ClampedArray},n=function(e,n){for(var t=Object.keys(n),r=0;r<t.length;++r)e[t[r]]=n[t[r]];return e};function t(e){var n=Error("(regl) "+e);throw console.error(n),n}function r(e,n){e||t(n)}function a(e){return e?": "+e:""}function i(e,n){switch(n){case"number":return"number"==typeof e;case"object":return"object"==typeof e;case"string":return"string"==typeof e;case"boolean":return"boolean"==typeof e;case"function":return"function"==typeof e;case"undefined":return void 0===e;case"symbol":return"symbol"==typeof e}}function o(e,n,r){0>n.indexOf(e)&&t("invalid value"+a(r)+". must be one of: "+n)}var s=["gl","canvas","container","attributes","pixelRatio","extensions","optionalExtensions","profile","onDone"];function f(e,n){for(e+="";e.length<n;)e=" "+e;return e}function l(){this.name="unknown",this.lines=[],this.index={},this.hasErrors=!1}function c(e,n){this.number=e,this.line=n,this.errors=[]}function u(e,n,t){this.file=e,this.line=n,this.message=t}function d(){var e=Error(),n=(e.stack||e).toString(),t=/compileProcedure.*\n\s*at.*\((.*)\)/.exec(n);if(t)return t[1];var r=/compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(n);return r?r[1]:"unknown"}function p(){var e=Error(),n=(e.stack||e).toString(),t=/at REGLCommand.*\n\s+at.*\((.*)\)/.exec(n);if(t)return t[1];var r=/at REGLCommand.*\n\s+at\s+(.*)\n/.exec(n);return r?r[1]:"unknown"}function m(e,n){var t=e.split("\n"),r=1,a=0,i={unknown:new l,0:new l};i.unknown.name=i[0].name=n||d(),i.unknown.lines.push(new c(0,""));for(var o=0;o<t.length;++o){var s=t[o],f=/^\s*#\s*(\w+)\s+(.+)\s*$/.exec(s);if(f)switch(f[1]){case"line":var u=/(\d+)(\s+\d+)?/.exec(f[2]);u&&(r=0|u[1],u[2]&&((a=0|u[2])in i||(i[a]=new l)));break;case"define":var p,m=/SHADER_NAME(_B64)?\s+(.*)$/.exec(f[2]);m&&(i[a].name=m[1]?(p=m[2],"undefined"!=typeof atob?atob(p):"base64:"+p):m[2])}i[a].lines.push(new c(r++,s))}return Object.keys(i).forEach(function(e){var n=i[e];n.lines.forEach(function(e){n.index[e.number]=e})}),i}function v(e){e._commandRef=d()}function h(e,n){var r=p();t(e+" in command "+(n||d())+("unknown"===r?"":" called from "+r))}function g(e,n,t,r){i(e,n)||h("invalid parameter type"+a(t)+". expected "+n+", got "+typeof e,r||d())}var b={};function x(e,n){return 32820===e||32819===e||33635===e?2:34042===e?4:b[e]*n}function y(e){return!(e&e-1)&&!!e}b[5120]=b[5121]=1,b[5122]=b[5123]=b[36193]=b[33635]=b[32819]=b[32820]=2,b[5124]=b[5125]=b[5126]=b[34042]=4;var _=n(r,{optional:function(e){e()},raise:t,commandRaise:h,command:function(e,n,t){e||h(n,t||d())},parameter:function(e,n,r){e in n||t("unknown parameter ("+e+")"+a(r)+". possible values: "+Object.keys(n).join())},commandParameter:function(e,n,t,r){e in n||h("unknown parameter ("+e+")"+a(t)+". possible values: "+Object.keys(n).join(),r||d())},constructor:function(e){Object.keys(e).forEach(function(e){0>s.indexOf(e)&&t('invalid regl constructor argument "'+e+'". must be one of '+s)})},type:function(e,n,r){i(e,n)||t("invalid parameter type"+a(r)+". expected "+n+", got "+typeof e)},commandType:g,isTypedArray:function(n,r){e(n)||t("invalid parameter type"+a(r)+". must be a typed array")},nni:function(e,n){e>=0&&(0|e)===e||t("invalid parameter type, ("+e+")"+a(n)+". must be a nonnegative integer")},oneOf:o,shaderError:function(e,n,t,a,i){if(!e.getShaderParameter(n,e.COMPILE_STATUS)){var o,s=e.getShaderInfoLog(n),l=a===e.FRAGMENT_SHADER?"fragment":"vertex";g(t,"string",l+" shader source must be a string",i);var c=m(t,i);(o=[],s.split("\n").forEach(function(e){if(!(e.length<5)){var n=/^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(e);n?o.push(new u(0|n[1],0|n[2],n[3].trim())):e.length>0&&o.push(new u("unknown",0,e))}}),o).forEach(function(e){var n=c[e.file];if(n){var t=n.index[e.line];if(t){t.errors.push(e),n.hasErrors=!0;return}}c.unknown.hasErrors=!0,c.unknown.lines[0].errors.push(e)}),Object.keys(c).forEach(function(e){var n=c[e];if(n.hasErrors){var t=[""],r=[""];a("file number "+e+": "+n.name+"\n","color:red;text-decoration:underline;font-weight:bold"),n.lines.forEach(function(e){if(e.errors.length>0){a(f(e.number,4)+"|  ","background-color:yellow; font-weight:bold"),a(e.line+"\n","color:red; background-color:yellow; font-weight:bold");var n=0;e.errors.forEach(function(t){var r=t.message,i=/^\s*'(.*)'\s*:\s*(.*)$/.exec(r);if(i){var o=i[1];r=i[2],"assign"===o&&(o="="),n=Math.max(e.line.indexOf(o,n),0)}else n=0;a(f("| ",6)),a(f("^^^",n+3)+"\n","font-weight:bold"),a(f("| ",6)),a(r+"\n","font-weight:bold")}),a(f("| ",6)+"\n")}else a(f(e.number,4)+"|  "),a(e.line+"\n","color:red")}),"undefined"==typeof document||window.chrome?console.log(t.join("")):(r[0]=t.join("%c"),console.log.apply(console,r))}function a(e,n){t.push(e),r.push(n||"")}}),r.raise("Error compiling "+l+" shader, "+c[0].name)}},linkError:function(e,n,t,a,i){if(!e.getProgramParameter(n,e.LINK_STATUS)){var o=e.getProgramInfoLog(n),s=m(t,i),f='Error linking program with vertex shader, "'+m(a,i)[0].name+'", and fragment shader "'+s[0].name+'"';"undefined"!=typeof document?console.log("%c"+f+"\n%c"+o,"color:red;text-decoration:underline;font-weight:bold","color:red"):console.log(f+"\n"+o),r.raise(f)}},callSite:p,saveCommandRef:v,saveDrawInfo:function(e,n,t,r){function a(e,n){Object.keys(n).forEach(function(n){e[r.id(n)]=!0})}v(e),e._fragId=(i=e.static.frag)?r.id(i):0,e._vertId=(o=e.static.vert)?r.id(o):0;var i,o,s=e._uniformSet={};a(s,n.static),a(s,n.dynamic);var f=e._attributeSet={};a(f,t.static),a(f,t.dynamic),e._hasCount="count"in e.static||"count"in e.dynamic||"elements"in e.static||"elements"in e.dynamic},framebufferFormat:function(e,n,t){e.texture?o(e.texture._texture.internalformat,n,"unsupported texture format for attachment"):o(e.renderbuffer._renderbuffer.format,t,"unsupported renderbuffer format for attachment")},guessCommand:d,texture2D:function(e,n,t){var a,i=n.width,o=n.height,s=n.channels;r(i>0&&i<=t.maxTextureSize&&o>0&&o<=t.maxTextureSize,"invalid texture shape"),(33071!==e.wrapS||33071!==e.wrapT)&&r(y(i)&&y(o),"incompatible wrap mode for texture, both width and height must be power of 2"),1===n.mipmask?1!==i&&1!==o&&r(9984!==e.minFilter&&9986!==e.minFilter&&9985!==e.minFilter&&9987!==e.minFilter,"min filter requires mipmap"):(r(y(i)&&y(o),"texture must be a square power of 2 to support mipmapping"),r(n.mipmask===(i<<1)-1,"missing or incomplete mipmap data")),5126===n.type&&(0>t.extensions.indexOf("oes_texture_float_linear")&&r(9728===e.minFilter&&9728===e.magFilter,"filter not supported, must enable oes_texture_float_linear"),r(!e.genMipmaps,"mipmap generation not supported with float textures"));var f=n.images;for(a=0;a<16;++a)if(f[a]){var l=i>>a,c=o>>a;r(n.mipmask&1<<a,"missing mipmap data");var u=f[a];if(r(u.width===l&&u.height===c,"invalid shape for mip images"),r(u.format===n.format&&u.internalformat===n.internalformat&&u.type===n.type,"incompatible type for mip image"),u.compressed);else if(u.data){var d=Math.ceil(x(u.type,s)*l/u.unpackAlignment)*u.unpackAlignment;r(u.data.byteLength===d*c,"invalid data for image, buffer size is inconsistent with image format")}else u.element||u.copy}else e.genMipmaps||r((n.mipmask&1<<a)==0,"extra mipmap data");n.compressed&&r(!e.genMipmaps,"mipmap generation for compressed images not supported")},textureCube:function(e,n,t,a){var i=e.width,o=e.height,s=e.channels;r(i>0&&i<=a.maxTextureSize&&o>0&&o<=a.maxTextureSize,"invalid texture shape"),r(i===o,"cube map must be square"),r(33071===n.wrapS&&33071===n.wrapT,"wrap mode not supported by cube map");for(var f=0;f<t.length;++f){var l=t[f];r(l.width===i&&l.height===o,"inconsistent cube map face shape"),n.genMipmaps&&(r(!l.compressed,"can not generate mipmap for compressed textures"),r(1===l.mipmask,"can not specify mipmaps and generate mipmaps"));for(var c=l.images,u=0;u<16;++u){var d=c[u];if(d){var p=i>>u,m=o>>u;r(l.mipmask&1<<u,"missing mipmap data"),r(d.width===p&&d.height===m,"invalid shape for mip images"),r(d.format===e.format&&d.internalformat===e.internalformat&&d.type===e.type,"incompatible type for mip image"),d.compressed||(d.data?r(d.data.byteLength===p*m*Math.max(x(d.type,s),d.unpackAlignment),"invalid data for image, buffer size is inconsistent with image format"):d.element||d.copy)}}}}}),w=0;function S(e,n){this.id=w++,this.type=e,this.data=n}function M(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}var T=function(e,n){return new S(e,"["+(function e(n){if(0===n.length)return[];var t=n.charAt(0),r=n.charAt(n.length-1);if(n.length>1&&t===r&&('"'===t||"'"===t))return['"'+M(n.substr(1,n.length-2))+'"'];var a=/\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(n);if(a)return e(n.substr(0,a.index)).concat(e(a[1])).concat(e(n.substr(a.index+a[0].length)));var i=n.split(".");if(1===i.length)return['"'+M(n)+'"'];for(var o=[],s=0;s<i.length;++s)o=o.concat(e(i[s]));return o})(n+"").join("][")+"]")},A=function(e){return"function"==typeof e&&!e._reglType||e instanceof S},z=function e(n,t){return"function"==typeof n?new S(0,n):"number"==typeof n||"boolean"==typeof n?new S(5,n):Array.isArray(n)?new S(6,n.map(function(n,r){return e(n,t+"["+r+"]")})):n instanceof S?n:void _(!1,"invalid option type in uniform "+t)},F={next:"function"==typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,16)},cancel:"function"==typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:clearTimeout},O="undefined"!=typeof performance&&performance.now?function(){return performance.now()}:function(){return+new Date};function C(e){return"string"==typeof e?e.split():(_(Array.isArray(e),"invalid extension array"),e)}function E(e){return"string"==typeof e?(_("undefined"!=typeof document,"not supported outside of DOM"),document.querySelector(e)):e}function k(e,n){for(var t=Array(e),r=0;r<e;++r)t[r]=n(r);return t}function D(e){var n,t;return n=(e>65535)<<4,e>>>=n,t=(e>255)<<3,e>>>=t,n|=t,t=(e>15)<<2,e>>>=t,n|=t,t=(e>3)<<1,e>>>=t,(n|=t)|e>>1}function U(){var e=k(8,function(){return[]});function n(n){var t=function(e){for(var n=16;n<=0x10000000;n*=16)if(e<=n)return n;return 0}(n),r=e[D(t)>>2];return r.length>0?r.pop():new ArrayBuffer(t)}function t(n){e[D(n.byteLength)>>2].push(n)}return{alloc:n,free:t,allocType:function(e,t){var r=null;switch(e){case 5120:r=new Int8Array(n(t),0,t);break;case 5121:r=new Uint8Array(n(t),0,t);break;case 5122:r=new Int16Array(n(2*t),0,t);break;case 5123:r=new Uint16Array(n(2*t),0,t);break;case 5124:r=new Int32Array(n(4*t),0,t);break;case 5125:r=new Uint32Array(n(4*t),0,t);break;case 5126:r=new Float32Array(n(4*t),0,t);break;default:return null}return r.length!==t?r.subarray(0,t):r},freeType:function(e){t(e.buffer)}}}var V=U();V.zero=U();var R=function(e,n){var t=1;n.ext_texture_filter_anisotropic&&(t=e.getParameter(34047));var r=1,a=1;n.webgl_draw_buffers&&(r=e.getParameter(34852),a=e.getParameter(36063));var i=!!n.oes_texture_float;if(i){var o=e.createTexture();e.bindTexture(3553,o),e.texImage2D(3553,0,6408,1,1,0,6408,5126,null);var s=e.createFramebuffer();if(e.bindFramebuffer(36160,s),e.framebufferTexture2D(36160,36064,3553,o,0),e.bindTexture(3553,null),36053!==e.checkFramebufferStatus(36160))i=!1;else{e.viewport(0,0,1,1),e.clearColor(1,0,0,1),e.clear(16384);var f=V.allocType(5126,4);e.readPixels(0,0,1,1,6408,5126,f),e.getError()?i=!1:(e.deleteFramebuffer(s),e.deleteTexture(o),i=1===f[0]),V.freeType(f)}}var l="undefined"!=typeof navigator&&(/MSIE/.test(navigator.userAgent)||/Trident\//.test(navigator.appVersion)||/Edge/.test(navigator.userAgent)),c=!0;if(!l){var u=e.createTexture(),d=V.allocType(5121,36);e.activeTexture(33984),e.bindTexture(34067,u),e.texImage2D(34069,0,6408,3,3,0,6408,5121,d),V.freeType(d),e.bindTexture(34067,null),e.deleteTexture(u),c=!e.getError()}return{colorBits:[e.getParameter(3410),e.getParameter(3411),e.getParameter(3412),e.getParameter(3413)],depthBits:e.getParameter(3414),stencilBits:e.getParameter(3415),subpixelBits:e.getParameter(3408),extensions:Object.keys(n).filter(function(e){return!!n[e]}),maxAnisotropic:t,maxDrawbuffers:r,maxColorAttachments:a,pointSizeDims:e.getParameter(33901),lineWidthDims:e.getParameter(33902),maxViewportDims:e.getParameter(3386),maxCombinedTextureUnits:e.getParameter(35661),maxCubeMapSize:e.getParameter(34076),maxRenderbufferSize:e.getParameter(34024),maxTextureUnits:e.getParameter(34930),maxTextureSize:e.getParameter(3379),maxAttributes:e.getParameter(34921),maxVertexUniforms:e.getParameter(36347),maxVertexTextureUnits:e.getParameter(35660),maxVaryingVectors:e.getParameter(36348),maxFragmentUniforms:e.getParameter(36349),glsl:e.getParameter(35724),renderer:e.getParameter(7937),vendor:e.getParameter(7936),version:e.getParameter(7938),readFloat:i,npotTextureCube:c}};function P(n){return!!n&&"object"==typeof n&&Array.isArray(n.shape)&&Array.isArray(n.stride)&&"number"==typeof n.offset&&n.shape.length===n.stride.length&&(Array.isArray(n.data)||e(n.data))}var L=function(e){return Object.keys(e).map(function(n){return e[n]})},N=function(e){for(var n=[],t=e;t.length;t=t[0])n.push(t.length);return n},G=function(e,n,t,r){var a=1;if(n.length)for(var i=0;i<n.length;++i)a*=n[i];else a=0;var o=r||V.allocType(t,a);switch(n.length){case 0:break;case 1:for(var s=n[0],f=0;f<s;++f)o[f]=e[f];break;case 2:!function(e,n,t,r){for(var a=0,i=0;i<n;++i)for(var o=e[i],s=0;s<t;++s)r[a++]=o[s]}(e,n[0],n[1],o);break;case 3:B(e,n[0],n[1],n[2],o,0);break;default:!function e(n,t,r,a,i){for(var o=1,s=r+1;s<t.length;++s)o*=t[s];var f=t[r];if(t.length-r==4){var l=t[r+1],c=t[r+2],u=t[r+3];for(s=0;s<f;++s)B(n[s],l,c,u,a,i),i+=o}else for(s=0;s<f;++s)e(n[s],t,r+1,a,i),i+=o}(e,n,0,o,0)}return o};function B(e,n,t,r,a,i){for(var o=i,s=0;s<n;++s)for(var f=e[s],l=0;l<t;++l)for(var c=f[l],u=0;u<r;++u)a[o++]=c[u]}var I={"[object Int8Array]":5120,"[object Int16Array]":5122,"[object Int32Array]":5124,"[object Uint8Array]":5121,"[object Uint8ClampedArray]":5121,"[object Uint16Array]":5123,"[object Uint32Array]":5125,"[object Float32Array]":5126,"[object Float64Array]":5121,"[object ArrayBuffer]":5121},$={int8:5120,int16:5122,int32:5124,uint8:5121,uint16:5123,uint32:5125,float:5126,float32:5126},K={dynamic:35048,stream:35040,static:35044},j=[];function H(e){return 0|I[Object.prototype.toString.call(e)]}function q(e,n){for(var t=0;t<n.length;++t)e[t]=n[t]}function W(e,n,t,r,a,i,o){for(var s=0,f=0;f<t;++f)for(var l=0;l<r;++l)e[s++]=n[a*f+i*l+o]}j[5120]=1,j[5122]=2,j[5124]=4,j[5121]=1,j[5123]=2,j[5125]=4,j[5126]=4;var Y={points:0,point:0,lines:1,line:1,triangles:4,triangle:4,"line loop":2,"line strip":3,"triangle strip":5,"triangle fan":6},Q=new Float32Array(1),X=new Uint32Array(Q.buffer);function J(e){for(var n=V.allocType(5123,e.length),t=0;t<e.length;++t)if(isNaN(e[t]))n[t]=65535;else if(e[t]===1/0)n[t]=31744;else if(e[t]===-1/0)n[t]=64512;else{Q[0]=e[t];var r=X[0],a=r>>>31<<15,i=(r<<1>>>24)-127,o=r>>13&1023;if(i<-24)n[t]=a;else if(i<-14){var s=-14-i;n[t]=a+(o+1024>>s)}else i>15?n[t]=a+31744:n[t]=a+(i+15<<10)+o}return n}function Z(n){return Array.isArray(n)||e(n)}var ee=function(e){return!(e&e-1)&&!!e},en=[9984,9986,9985,9987],et=[0,6409,6410,6407,6408],er={};function ea(e){return"[object "+e+"]"}er[6409]=er[6406]=er[6402]=1,er[34041]=er[6410]=2,er[6407]=er[35904]=3,er[6408]=er[35906]=4;var ei=ea("HTMLCanvasElement"),eo=ea("OffscreenCanvas"),es=ea("CanvasRenderingContext2D"),ef=ea("ImageBitmap"),el=ea("HTMLImageElement"),ec=ea("HTMLVideoElement"),eu=Object.keys(I).concat([ei,eo,es,ef,el,ec]),ed=[];ed[5121]=1,ed[5126]=4,ed[36193]=2,ed[5123]=2,ed[5125]=4;var ep=[];function em(e){return Array.isArray(e)&&(0===e.length||"number"==typeof e[0])}function ev(e){return!!Array.isArray(e)&&0!==e.length&&!!Z(e[0])}function eh(e){return Object.prototype.toString.call(e)}function eg(e){if(!e)return!1;var n=eh(e);return eu.indexOf(n)>=0||em(e)||ev(e)||P(e)}function eb(e){return 0|I[Object.prototype.toString.call(e)]}function ex(e,n){return V.allocType(36193===e.type?5126:e.type,n)}function ey(e,n){36193===e.type?(e.data=J(n),V.freeType(n)):e.data=n}function e_(e,n,t,r,a,i){var o;if(o=void 0!==ep[e]?ep[e]:er[e]*ed[n],i&&(o*=6),!a)return o*t*r;for(var s=0,f=t;f>=1;)s+=o*f*f,f/=2;return s}ep[32854]=2,ep[32855]=2,ep[36194]=2,ep[34041]=4,ep[33776]=.5,ep[33777]=.5,ep[33778]=1,ep[33779]=1,ep[35986]=.5,ep[35987]=1,ep[34798]=1,ep[35840]=.5,ep[35841]=.25,ep[35842]=.5,ep[35843]=.25,ep[36196]=.5;var ew=[];ew[32854]=2,ew[32855]=2,ew[36194]=2,ew[33189]=2,ew[36168]=1,ew[34041]=4,ew[35907]=4,ew[34836]=16,ew[34842]=8,ew[34843]=6;var eS=function(e,n,t,r,a){var i={rgba4:32854,rgb565:36194,"rgb5 a1":32855,depth:33189,stencil:36168,"depth stencil":34041};n.ext_srgb&&(i.srgba=35907),n.ext_color_buffer_half_float&&(i.rgba16f=34842,i.rgb16f=34843),n.webgl_color_buffer_float&&(i.rgba32f=34836);var o=[];Object.keys(i).forEach(function(e){o[i[e]]=e});var s=0,f={};function l(e){this.id=s++,this.refCount=1,this.renderbuffer=e,this.format=32854,this.width=0,this.height=0,a.profile&&(this.stats={size:0})}function c(n){var t=n.renderbuffer;_(t,"must not double destroy renderbuffer"),e.bindRenderbuffer(36161,null),e.deleteRenderbuffer(t),n.renderbuffer=null,n.refCount=0,delete f[n.id],r.renderbufferCount--}return l.prototype.decRef=function(){--this.refCount<=0&&c(this)},a.profile&&(r.getTotalRenderbufferSize=function(){var e=0;return Object.keys(f).forEach(function(n){e+=f[n].stats.size}),e}),{create:function(n,s){var c=new l(e.createRenderbuffer());function u(n,r){var s,f,l,d=0,p=0,m=32854;if("object"==typeof n&&n){if("shape"in n){var v=n.shape;_(Array.isArray(v)&&v.length>=2,"invalid renderbuffer shape"),d=0|v[0],p=0|v[1]}else"radius"in n&&(d=p=0|n.radius),"width"in n&&(d=0|n.width),"height"in n&&(p=0|n.height);"format"in n&&(_.parameter(n.format,i,"invalid renderbuffer format"),m=i[n.format])}else"number"==typeof n?(d=0|n,p="number"==typeof r?0|r:d):n?_.raise("invalid arguments to renderbuffer constructor"):d=p=1;if(_(d>0&&p>0&&d<=t.maxRenderbufferSize&&p<=t.maxRenderbufferSize,"invalid renderbuffer size"),d!==c.width||p!==c.height||m!==c.format)return u.width=c.width=d,u.height=c.height=p,c.format=m,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,m,d,p),_(0===e.getError(),"invalid render buffer format"),a.profile&&(c.stats.size=(s=c.format,f=c.width,l=c.height,ew[s]*f*l)),u.format=o[c.format],u}return f[c.id]=c,r.renderbufferCount++,u(n,s),u.resize=function(n,r){var i,o,s,f=0|n,l=0|r||f;return f===c.width&&l===c.height?u:(_(f>0&&l>0&&f<=t.maxRenderbufferSize&&l<=t.maxRenderbufferSize,"invalid renderbuffer size"),u.width=c.width=f,u.height=c.height=l,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,c.format,f,l),_(0===e.getError(),"invalid render buffer format"),a.profile&&(c.stats.size=(i=c.format,o=c.width,s=c.height,ew[i]*o*s)),u)},u._reglType="renderbuffer",u._renderbuffer=c,a.profile&&(u.stats=c.stats),u.destroy=function(){c.decRef()},u},clear:function(){L(f).forEach(c)},restore:function(){L(f).forEach(function(n){n.renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,n.renderbuffer),e.renderbufferStorage(36161,n.format,n.width,n.height)}),e.bindRenderbuffer(36161,null)}}},eM=[6407,6408],eT=[];eT[6408]=4,eT[6407]=3;var eA=[];eA[5121]=1,eA[5126]=4,eA[36193]=2;var ez=[32854,32855,36194,35907,34842,34843,34836],eF={};eF[36053]="complete",eF[36054]="incomplete attachment",eF[36057]="incomplete dimensions",eF[36055]="incomplete, missing attachment",eF[36061]="unsupported";var eO=["attributes","elements","offset","count","primitive","instances"];function eC(){this.state=0,this.x=0,this.y=0,this.z=0,this.w=0,this.buffer=null,this.size=0,this.normalized=!1,this.type=5126,this.offset=0,this.stride=0,this.divisor=0}function eE(e){return Array.prototype.slice.call(e)}function ek(e){return eE(e).join("")}var eD="xyzw".split(""),eU="dither",eV="blend.enable",eR="blend.color",eP="blend.equation",eL="blend.func",eN="depth.enable",eG="depth.func",eB="depth.range",eI="depth.mask",e$="colorMask",eK="cull.enable",ej="cull.face",eH="frontFace",eq="lineWidth",eW="polygonOffset.enable",eY="polygonOffset.offset",eQ="sample.alpha",eX="sample.enable",eJ="sample.coverage",eZ="stencil.enable",e0="stencil.mask",e1="stencil.func",e2="stencil.opFront",e3="stencil.opBack",e5="scissor.enable",e4="scissor.box",e6="viewport",e8="profile",e9="framebuffer",e7="vert",ne="frag",nn="elements",nt="primitive",nr="count",na="offset",ni="instances",no="Width",ns="Height",nf=e9+no,nl=e9+ns,nc=e6+no,nu=e6+ns,nd="drawingBuffer",np=nd+no,nm=nd+ns,nv=[eL,eP,e1,e2,e3,eJ,e6,e4,eY],nh={0:0,1:1,zero:0,one:1,"src color":768,"one minus src color":769,"src alpha":770,"one minus src alpha":771,"dst color":774,"one minus dst color":775,"dst alpha":772,"one minus dst alpha":773,"constant color":32769,"one minus constant color":32770,"constant alpha":32771,"one minus constant alpha":32772,"src alpha saturate":776},ng=["constant color, constant alpha","one minus constant color, constant alpha","constant color, one minus constant alpha","one minus constant color, one minus constant alpha","constant alpha, constant color","constant alpha, one minus constant color","one minus constant alpha, constant color","one minus constant alpha, one minus constant color"],nb={never:512,less:513,"<":513,equal:514,"=":514,"==":514,"===":514,lequal:515,"<=":515,greater:516,">":516,notequal:517,"!=":517,"!==":517,gequal:518,">=":518,always:519},nx={0:0,zero:0,keep:7680,replace:7681,increment:7682,decrement:7683,"increment wrap":34055,"decrement wrap":34056,invert:5386},ny={frag:35632,vert:35633},n_={cw:2304,ccw:2305};function nw(n){return Array.isArray(n)||e(n)||P(n)}function nS(e){return e.sort(function(e,n){return e===e6?-1:n===e6?1:e<n?-1:1})}function nM(e,n,t,r){this.thisDep=e,this.contextDep=n,this.propDep=t,this.append=r}function nT(e){return e&&!(e.thisDep||e.contextDep||e.propDep)}function nA(e){return new nM(!1,!1,!1,e)}function nz(e,n){var t=e.type;if(0===t){var r=e.data.length;return new nM(!0,r>=1,r>=2,n)}if(4===t){var a=e.data;return new nM(a.thisDep,a.contextDep,a.propDep,n)}if(5===t)return new nM(!1,!1,!1,n);if(6!==t)return new nM(3===t,2===t,1===t,n);for(var i=!1,o=!1,s=!1,f=0;f<e.data.length;++f){var l=e.data[f];if(1===l.type)s=!0;else if(2===l.type)o=!0;else if(3===l.type)i=!0;else if(0===l.type){i=!0;var c=l.data;c>=1&&(o=!0),c>=2&&(s=!0)}else 4===l.type&&(i=i||l.data.thisDep,o=o||l.data.contextDep,s=s||l.data.propDep)}return new nM(i,o,s,n)}var nF=new nM(!1,!1,!1,function(){}),nO=function(e,n){if(!n.ext_disjoint_timer_query)return null;var t=[],r=[];function a(){this.startQueryIndex=-1,this.endQueryIndex=-1,this.sum=0,this.stats=null}var i=[],o=[];function s(e,n,t){var r=i.pop()||new a;r.startQueryIndex=e,r.endQueryIndex=n,r.sum=0,r.stats=t,o.push(r)}var f=[],l=[];return{beginQuery:function(e){var a=t.pop()||n.ext_disjoint_timer_query.createQueryEXT();n.ext_disjoint_timer_query.beginQueryEXT(35007,a),r.push(a),s(r.length-1,r.length,e)},endQuery:function(){n.ext_disjoint_timer_query.endQueryEXT(35007)},pushScopeStats:s,update:function(){var e,a,s=r.length;if(0!==s){l.length=Math.max(l.length,s+1),f.length=Math.max(f.length,s+1),f[0]=0,l[0]=0;var c=0;for(a=0,e=0;a<r.length;++a){var u=r[a];n.ext_disjoint_timer_query.getQueryObjectEXT(u,34919)?(c+=n.ext_disjoint_timer_query.getQueryObjectEXT(u,34918),t.push(u)):r[e++]=u,f[a+1]=c,l[a+1]=e}for(a=0,r.length=e,e=0;a<o.length;++a){var d=o[a],p=d.startQueryIndex,m=d.endQueryIndex;d.sum+=f[m]-f[p];var v=l[p],h=l[m];h===v?(d.stats.gpuTime+=d.sum/1e6,i.push(d)):(d.startQueryIndex=v,d.endQueryIndex=h,o[e++]=d)}o.length=e}},getNumPendingQueries:function(){return r.length},clear:function(){t.push.apply(t,r);for(var e=0;e<t.length;e++)n.ext_disjoint_timer_query.deleteQueryEXT(t[e]);r.length=0,t.length=0},restore:function(){r.length=0,t.length=0}}},nC="webglcontextlost",nE="webglcontextrestored";function nk(e,n){for(var t=0;t<e.length;++t)if(e[t]===n)return t;return -1}return function(t){var r,a,i=function(e){var t,r,a,i,o=e||{},s={},f=[],l=[],c="undefined"==typeof window?1:window.devicePixelRatio,u=!1,d=function(e){e&&_.raise(e)},p=function(){};if("string"==typeof o?(_("undefined"!=typeof document,"selector queries only supported in DOM environments"),_(t=document.querySelector(o),"invalid query string for element")):"object"==typeof o?"string"==typeof o.nodeName&&"function"==typeof o.appendChild&&"function"==typeof o.getBoundingClientRect?t=o:"function"==typeof o.drawArrays||"function"==typeof o.drawElements?a=(i=o).canvas:(_.constructor(o),"gl"in o?i=o.gl:"canvas"in o?a=E(o.canvas):"container"in o&&(r=E(o.container)),"attributes"in o&&(s=o.attributes,_.type(s,"object","invalid context attributes")),"extensions"in o&&(f=C(o.extensions)),"optionalExtensions"in o&&(l=C(o.optionalExtensions)),"onDone"in o&&(_.type(o.onDone,"function","invalid or missing onDone callback"),d=o.onDone),"profile"in o&&(u=!!o.profile),"pixelRatio"in o&&_((c=+o.pixelRatio)>0,"invalid pixel ratio")):_.raise("invalid arguments to regl"),t&&("canvas"===t.nodeName.toLowerCase()?a=t:r=t),!i){if(!a){_("undefined"!=typeof document,"must manually specify webgl context outside of DOM environments");var m=function(e,t,r){var a,i=document.createElement("canvas");function o(){var n=window.innerWidth,t=window.innerHeight;if(e!==document.body){var a=i.getBoundingClientRect();n=a.right-a.left,t=a.bottom-a.top}i.width=r*n,i.height=r*t}return n(i.style,{border:0,margin:0,padding:0,top:0,left:0,width:"100%",height:"100%"}),e.appendChild(i),e===document.body&&(i.style.position="absolute",n(e.style,{margin:0,padding:0})),e!==document.body&&"function"==typeof ResizeObserver?(a=new ResizeObserver(function(){setTimeout(o)})).observe(e):window.addEventListener("resize",o,!1),o(),{canvas:i,onDestroy:function(){a?a.disconnect():window.removeEventListener("resize",o),e.removeChild(i)}}}(r||document.body,0,c);if(!m)return null;a=m.canvas,p=m.onDestroy}void 0===s.premultipliedAlpha&&(s.premultipliedAlpha=!0),i=function(e,n){function t(t){try{return e.getContext(t,n)}catch(e){return null}}return t("webgl")||t("experimental-webgl")||t("webgl-experimental")}(a,s)}return i?{gl:i,canvas:a,container:r,extensions:f,optionalExtensions:l,pixelRatio:c,profile:u,onDone:d,onDestroy:p}:(p(),d("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org"),null)}(t);if(!i)return null;var o=i.gl,s=o.getContextAttributes(),f=o.isContextLost(),l=function(e,n){var t={};function r(n){_.type(n,"string","extension name must be string");var r,a=n.toLowerCase();try{r=t[a]=e.getExtension(a)}catch(e){}return!!r}for(var a=0;a<n.extensions.length;++a){var i=n.extensions[a];if(!r(i))return n.onDestroy(),n.onDone('"'+i+'" extension is not supported by the current WebGL context, try upgrading your system or a different browser'),null}return n.optionalExtensions.forEach(r),{extensions:t,restore:function(){Object.keys(t).forEach(function(e){if(t[e]&&!r(e))throw Error("(regl): error restoring extension "+e)})}}}(o,i);if(!l)return null;var c=(r={"":0},a=[""],{id:function(e){var n=r[e];return n||(n=r[e]=a.length,a.push(e)),n},str:function(e){return a[e]}}),u={vaoCount:0,bufferCount:0,elementsCount:0,framebufferCount:0,shaderCount:0,textureCount:0,cubeCount:0,renderbufferCount:0,maxTextureUnits:0},d=l.extensions,p=nO(o,d),m=O(),v=o.drawingBufferWidth,h=o.drawingBufferHeight,g={tick:0,time:0,viewportWidth:v,viewportHeight:h,framebufferWidth:v,framebufferHeight:h,drawingBufferWidth:v,drawingBufferHeight:h,pixelRatio:i.pixelRatio},b={elements:null,primitive:4,count:-1,offset:0,instances:-1},x=R(o,d),y=function(n,t,r,a){var i=0,o={};function s(e){this.id=i++,this.buffer=n.createBuffer(),this.type=e,this.usage=35044,this.byteLength=0,this.dimension=1,this.dtype=5121,this.persistentData=null,r.profile&&(this.stats={size:0})}s.prototype.bind=function(){n.bindBuffer(this.type,this.buffer)},s.prototype.destroy=function(){u(this)};var f=[];function l(e,t,r){e.byteLength=t.byteLength,n.bufferData(e.type,t,r)}function c(n,t,r,a,i,o){if(n.usage=r,Array.isArray(t)){if(n.dtype=a||5126,t.length>0)if(Array.isArray(t[0])){for(var s,f=N(t),c=1,u=1;u<f.length;++u)c*=f[u];n.dimension=c,s=G(t,f,n.dtype),l(n,s,r),o?n.persistentData=s:V.freeType(s)}else if("number"==typeof t[0]){n.dimension=i;var d=V.allocType(n.dtype,t.length);q(d,t),l(n,d,r),o?n.persistentData=d:V.freeType(d)}else e(t[0])?(n.dimension=t[0].length,n.dtype=a||H(t[0])||5126,s=G(t,[t.length,t[0].length],n.dtype),l(n,s,r),o?n.persistentData=s:V.freeType(s)):_.raise("invalid buffer data")}else if(e(t))n.dtype=a||H(t),n.dimension=i,l(n,t,r),o&&(n.persistentData=new Uint8Array(new Uint8Array(t.buffer)));else if(P(t)){f=t.shape;var p=t.stride,m=t.offset,v=0,h=0,g=0,b=0;1===f.length?(v=f[0],h=1,g=p[0],b=0):2===f.length?(v=f[0],h=f[1],g=p[0],b=p[1]):_.raise("invalid shape"),n.dtype=a||H(t.data)||5126,n.dimension=h;var x=V.allocType(n.dtype,v*h);W(x,t.data,v,h,g,b,m),l(n,x,r),o?n.persistentData=x:V.freeType(x)}else t instanceof ArrayBuffer?(n.dtype=5121,n.dimension=i,l(n,t,r),o&&(n.persistentData=new Uint8Array(new Uint8Array(t)))):_.raise("invalid buffer data")}function u(e){t.bufferCount--,a(e);var r=e.buffer;_(r,"buffer must not be deleted already"),n.deleteBuffer(r),e.buffer=null,delete o[e.id]}return r.profile&&(t.getTotalBufferSize=function(){var e=0;return Object.keys(o).forEach(function(n){e+=o[n].stats.size}),e}),{create:function(a,i,f,l){t.bufferCount++;var d=new s(i);function p(t){var a=35044,i=null,o=0,s=0,f=1;return Array.isArray(t)||e(t)||P(t)||t instanceof ArrayBuffer?i=t:"number"==typeof t?o=0|t:t&&(_.type(t,"object","buffer arguments must be an object, a number or an array"),"data"in t&&(_(null===i||Array.isArray(i)||e(i)||P(i),"invalid data for buffer"),i=t.data),"usage"in t&&(_.parameter(t.usage,K,"invalid buffer usage"),a=K[t.usage]),"type"in t&&(_.parameter(t.type,$,"invalid buffer type"),s=$[t.type]),"dimension"in t&&(_.type(t.dimension,"number","invalid dimension"),f=0|t.dimension),"length"in t&&(_.nni(o,"buffer length must be a nonnegative integer"),o=0|t.length)),d.bind(),i?c(d,i,a,s,f,l):(o&&n.bufferData(d.type,o,a),d.dtype=s||5121,d.usage=a,d.dimension=f,d.byteLength=o),r.profile&&(d.stats.size=d.byteLength*j[d.dtype]),p}function m(e,t){_(t+e.byteLength<=d.byteLength,"invalid buffer subdata call, buffer is too small.  Can't write data of size "+e.byteLength+" starting from offset "+t+" to a buffer of size "+d.byteLength),n.bufferSubData(d.type,t,e)}return o[d.id]=d,f||p(a),p._reglType="buffer",p._buffer=d,p.subdata=function(n,t){var r,a=0|(t||0);if(d.bind(),e(n)||n instanceof ArrayBuffer)m(n,a);else if(Array.isArray(n)){if(n.length>0)if("number"==typeof n[0]){var i=V.allocType(d.dtype,n.length);q(i,n),m(i,a),V.freeType(i)}else if(Array.isArray(n[0])||e(n[0])){r=N(n);var o=G(n,r,d.dtype);m(o,a),V.freeType(o)}else _.raise("invalid buffer data")}else if(P(n)){r=n.shape;var s=n.stride,f=0,l=0,c=0,u=0;1===r.length?(f=r[0],l=1,c=s[0],u=0):2===r.length?(f=r[0],l=r[1],c=s[0],u=s[1]):_.raise("invalid shape");var v=Array.isArray(n.data)?d.dtype:H(n.data),h=V.allocType(v,f*l);W(h,n.data,f,l,c,u,n.offset),m(h,a),V.freeType(h)}else _.raise("invalid data for buffer subdata");return p},r.profile&&(p.stats=d.stats),p.destroy=function(){u(d)},p},createStream:function(e,n){var t=f.pop();return t||(t=new s(e)),t.bind(),c(t,n,35040,0,1,!1),t},destroyStream:function(e){f.push(e)},clear:function(){L(o).forEach(u),f.forEach(u)},getBuffer:function(e){return e&&e._buffer instanceof s?e._buffer:null},restore:function(){L(o).forEach(function(e){e.buffer=n.createBuffer(),n.bindBuffer(e.type,e.buffer),n.bufferData(e.type,e.persistentData||e.byteLength,e.usage)})},_initBuffer:c}}(o,u,i,function(e){return M.destroyBuffer(e)}),w=function(n,t,r,a){var i={},o=0,s={uint8:5121,uint16:5123};function f(e){this.id=o++,i[this.id]=this,this.buffer=e,this.primType=4,this.vertCount=0,this.type=0}t.oes_element_index_uint&&(s.uint32=5125),f.prototype.bind=function(){this.buffer.bind()};var l=[];function c(a,i,o,s,f,l,c){if(a.buffer.bind(),i){var u,d=c;!c&&(!e(i)||P(i)&&!e(i.data))&&(d=t.oes_element_index_uint?5125:5123),r._initBuffer(a.buffer,i,o,d,3)}else n.bufferData(34963,l,o),a.buffer.dtype=u||5121,a.buffer.usage=o,a.buffer.dimension=3,a.buffer.byteLength=l;if(u=c,!c){switch(a.buffer.dtype){case 5121:case 5120:u=5121;break;case 5123:case 5122:u=5123;break;case 5125:case 5124:u=5125;break;default:_.raise("unsupported type for element array")}a.buffer.dtype=u}a.type=u,_(5125!==u||!!t.oes_element_index_uint,"32 bit element buffers not supported, enable oes_element_index_uint first");var p=f;p<0&&(p=a.buffer.byteLength,5123===u?p>>=1:5125===u&&(p>>=2)),a.vertCount=p;var m=s;if(s<0){m=4;var v=a.buffer.dimension;1===v&&(m=0),2===v&&(m=1),3===v&&(m=4)}a.primType=m}function u(e){a.elementsCount--,_(null!==e.buffer,"must not double destroy elements"),delete i[e.id],e.buffer.destroy(),e.buffer=null}return{create:function(n,t){var i=r.create(null,34963,!0),o=new f(i._buffer);function l(n){if(n)if("number"==typeof n)i(n),o.primType=4,o.vertCount=0|n,o.type=5121;else{var t=null,r=35044,a=-1,f=-1,u=0,d=0;Array.isArray(n)||e(n)||P(n)?t=n:(_.type(n,"object","invalid arguments for elements"),"data"in n&&_(Array.isArray(t=n.data)||e(t)||P(t),"invalid data for element buffer"),"usage"in n&&(_.parameter(n.usage,K,"invalid element buffer usage"),r=K[n.usage]),"primitive"in n&&(_.parameter(n.primitive,Y,"invalid element buffer primitive"),a=Y[n.primitive]),"count"in n&&(_("number"==typeof n.count&&n.count>=0,"invalid vertex count for elements"),f=0|n.count),"type"in n&&(_.parameter(n.type,s,"invalid buffer type"),d=s[n.type]),"length"in n?u=0|n.length:(u=f,5123===d||5122===d?u*=2:(5125===d||5124===d)&&(u*=4))),c(o,t,r,a,f,u,d)}else i(),o.primType=4,o.vertCount=0,o.type=5121;return l}return a.elementsCount++,l(n),l._reglType="elements",l._elements=o,l.subdata=function(e,n){return i.subdata(e,n),l},l.destroy=function(){u(o)},l},createStream:function(e){var n=l.pop();return n||(n=new f(r.create(null,34963,!0,!1)._buffer)),c(n,e,35040,-1,-1,0,0),n},destroyStream:function(e){l.push(e)},getElements:function(e){return"function"==typeof e&&e._elements instanceof f?e._elements:null},clear:function(){L(i).forEach(u)}}}(o,d,y,u),M=function(n,t,r,a,i,o,s){for(var f=r.maxAttributes,l=Array(f),c=0;c<f;++c)l[c]=new eC;var u=0,d={},p={Record:eC,scope:{},state:l,currentVAO:null,targetVAO:null,restore:m()?function(){m()&&L(d).forEach(function(e){e.refresh()})}:function(){},createVAO:function(n){var r=new h;function s(n){if(Array.isArray(n))d=n,r.elements&&r.ownsElements&&r.elements.destroy(),r.elements=null,r.ownsElements=!1,r.offset=0,r.count=0,r.instances=-1,r.primitive=4;else{if(_("object"==typeof n,"invalid arguments for create vao"),_("attributes"in n,"must specify attributes for vao"),n.elements){var a=n.elements;r.ownsElements?("function"==typeof a&&"elements"===a._reglType?r.elements.destroy():r.elements(a),r.ownsElements=!1):o.getElements(n.elements)?(r.elements=n.elements,r.ownsElements=!1):(r.elements=o.create(n.elements),r.ownsElements=!0)}else r.elements=null,r.ownsElements=!1;d=n.attributes,r.offset=0,r.count=-1,r.instances=-1,r.primitive=4,r.elements&&(r.count=r.elements._elements.vertCount,r.primitive=r.elements._elements.primType),"offset"in n&&(r.offset=0|n.offset),"count"in n&&(r.count=0|n.count),"instances"in n&&(r.instances=0|n.instances),"primitive"in n&&(_(n.primitive in Y,"bad primitive type: "+n.primitive),r.primitive=Y[n.primitive]),_.optional(()=>{for(var e=Object.keys(n),t=0;t<e.length;++t)_(eO.indexOf(e[t])>=0,'invalid option for vao: "'+e[t]+'" valid options are '+eO)}),_(Array.isArray(d),"attributes must be an array")}_(d.length<f,"too many attributes"),_(d.length>0,"must specify at least one attribute");var l={},c=r.attributes;c.length=d.length;for(var u=0;u<d.length;++u){var d,p,m=d[u],v=c[u]=new eC,h=m.data||m;Array.isArray(h)||e(h)||P(h)?(r.buffers[u]&&(p=r.buffers[u],e(h)&&p._buffer.byteLength>=h.byteLength?p.subdata(h):(p.destroy(),r.buffers[u]=null)),r.buffers[u]||(p=r.buffers[u]=i.create(m,34962,!1,!0)),v.buffer=i.getBuffer(p),v.size=0|v.buffer.dimension,v.normalized=!1,v.type=v.buffer.dtype,v.offset=0,v.stride=0,v.divisor=0,v.state=1,l[u]=1):i.getBuffer(m)?(v.buffer=i.getBuffer(m),v.size=0|v.buffer.dimension,v.normalized=!1,v.type=v.buffer.dtype,v.offset=0,v.stride=0,v.divisor=0,v.state=1):i.getBuffer(m.buffer)?(v.buffer=i.getBuffer(m.buffer),v.size=0|(+m.size||v.buffer.dimension),v.normalized=!!m.normalized,"type"in m?(_.parameter(m.type,$,"invalid buffer type"),v.type=$[m.type]):v.type=v.buffer.dtype,v.offset=0|(m.offset||0),v.stride=0|(m.stride||0),v.divisor=0|(m.divisor||0),v.state=1,_(v.size>=1&&v.size<=4,"size must be between 1 and 4"),_(v.offset>=0,"invalid offset"),_(v.stride>=0&&v.stride<=255,"stride must be between 0 and 255"),_(v.divisor>=0,"divisor must be positive"),_(!v.divisor||!!t.angle_instanced_arrays,"ANGLE_instanced_arrays must be enabled to use divisor")):"x"in m?(_(u>0,"first attribute must not be a constant"),v.x=+m.x||0,v.y=+m.y||0,v.z=+m.z||0,v.w=+m.w||0,v.state=2):_(!1,"invalid attribute spec for location "+u)}for(var g=0;g<r.buffers.length;++g)!l[g]&&r.buffers[g]&&(r.buffers[g].destroy(),r.buffers[g]=null);return r.refresh(),s}return a.vaoCount+=1,s.destroy=function(){for(var e=0;e<r.buffers.length;++e)r.buffers[e]&&r.buffers[e].destroy();r.buffers.length=0,r.ownsElements&&(r.elements.destroy(),r.elements=null,r.ownsElements=!1),r.destroy()},s._vao=r,s._reglType="vao",s(n)},getVAO:function(e){return"function"==typeof e&&e._vao?e._vao:null},destroyBuffer:function(e){for(var t=0;t<l.length;++t){var r=l[t];r.buffer===e&&(n.disableVertexAttribArray(t),r.buffer=null)}},setVAO:m()?function(e){if(e!==p.currentVAO){var n=m();e?n.bindVertexArrayOES(e.vao):n.bindVertexArrayOES(null),p.currentVAO=e}}:function(e){if(e!==p.currentVAO){if(e)e.bindAttrs();else{for(var t=v(),r=0;r<l.length;++r){var a=l[r];a.buffer?(n.enableVertexAttribArray(r),a.buffer.bind(),n.vertexAttribPointer(r,a.size,a.type,a.normalized,a.stride,a.offfset),t&&a.divisor&&t.vertexAttribDivisorANGLE(r,a.divisor)):(n.disableVertexAttribArray(r),n.vertexAttrib4f(r,a.x,a.y,a.z,a.w))}s.elements?n.bindBuffer(34963,s.elements.buffer.buffer):n.bindBuffer(34963,null)}p.currentVAO=e}},clear:m()?function(){L(d).forEach(function(e){e.destroy()})}:function(){}};function m(){return t.oes_vertex_array_object}function v(){return t.angle_instanced_arrays}function h(){this.id=++u,this.attributes=[],this.elements=null,this.ownsElements=!1,this.count=0,this.offset=0,this.instances=-1,this.primitive=4;var e=m();e?this.vao=e.createVertexArrayOES():this.vao=null,d[this.id]=this,this.buffers=[]}return h.prototype.bindAttrs=function(){for(var e=v(),t=this.attributes,r=0;r<t.length;++r){var a=t[r];a.buffer?(n.enableVertexAttribArray(r),n.bindBuffer(34962,a.buffer.buffer),n.vertexAttribPointer(r,a.size,a.type,a.normalized,a.stride,a.offset),e&&a.divisor&&e.vertexAttribDivisorANGLE(r,a.divisor)):(n.disableVertexAttribArray(r),n.vertexAttrib4f(r,a.x,a.y,a.z,a.w))}for(var i=t.length;i<f;++i)n.disableVertexAttribArray(i);var s=o.getElements(this.elements);s?n.bindBuffer(34963,s.buffer.buffer):n.bindBuffer(34963,null)},h.prototype.refresh=function(){var e=m();e&&(e.bindVertexArrayOES(this.vao),this.bindAttrs(),p.currentVAO=null,e.bindVertexArrayOES(null))},h.prototype.destroy=function(){if(this.vao){var e=m();this===p.currentVAO&&(p.currentVAO=null,e.bindVertexArrayOES(null)),e.deleteVertexArrayOES(this.vao),this.vao=null}this.ownsElements&&(this.elements.destroy(),this.elements=null,this.ownsElements=!1),d[this.id]&&(delete d[this.id],a.vaoCount-=1)},p}(o,d,x,u,y,w,b),D=function(e,t,r,a){var i={},o={};function s(e,n,t,r){this.name=e,this.id=n,this.location=t,this.info=r}function f(e,n){for(var t=0;t<e.length;++t)if(e[t].id===n.id){e[t].location=n.location;return}e.push(n)}function l(n,r,a){var s=35632===n?i:o,f=s[r];if(!f){var l=t.str(r);f=e.createShader(n),e.shaderSource(f,l),e.compileShader(f),_.shaderError(e,f,l,n,a),s[r]=f}return f}var c={},u=[],d=0;function p(e,n){this.id=d++,this.fragId=e,this.vertId=n,this.program=null,this.uniforms=[],this.attributes=[],this.refCount=1,a.profile&&(this.stats={uniformsCount:0,attributesCount:0})}function m(n,r,i){var o,c,u=l(35632,n.fragId),d=l(35633,n.vertId),p=n.program=e.createProgram();if(e.attachShader(p,u),e.attachShader(p,d),i)for(o=0;o<i.length;++o){var m=i[o];e.bindAttribLocation(p,m[0],m[1])}e.linkProgram(p),_.linkError(e,p,t.str(n.fragId),t.str(n.vertId),r);var v=e.getProgramParameter(p,35718);a.profile&&(n.stats.uniformsCount=v);var h=n.uniforms;for(o=0;o<v;++o)if(c=e.getActiveUniform(p,o))if(c.size>1)for(var g=0;g<c.size;++g){var b=c.name.replace("[0]","["+g+"]");f(h,new s(b,t.id(b),e.getUniformLocation(p,b),c))}else f(h,new s(c.name,t.id(c.name),e.getUniformLocation(p,c.name),c));var x=e.getProgramParameter(p,35721);a.profile&&(n.stats.attributesCount=x);var y=n.attributes;for(o=0;o<x;++o)(c=e.getActiveAttrib(p,o))&&f(y,new s(c.name,t.id(c.name),e.getAttribLocation(p,c.name),c))}return a.profile&&(r.getMaxUniformsCount=function(){var e=0;return u.forEach(function(n){n.stats.uniformsCount>e&&(e=n.stats.uniformsCount)}),e},r.getMaxAttributesCount=function(){var e=0;return u.forEach(function(n){n.stats.attributesCount>e&&(e=n.stats.attributesCount)}),e}),{clear:function(){var n=e.deleteShader.bind(e);L(i).forEach(n),i={},L(o).forEach(n),o={},u.forEach(function(n){e.deleteProgram(n.program)}),u.length=0,c={},r.shaderCount=0},program:function(t,a,s,f){_.command(t>=0,"missing vertex shader",s),_.command(a>=0,"missing fragment shader",s);var l=c[a];l||(l=c[a]={});var d=l[t];if(d&&(d.refCount++,!f))return d;var v=new p(a,t);return r.shaderCount++,m(v,s,f),d||(l[t]=v),u.push(v),n(v,{destroy:function(){if(v.refCount--,v.refCount<=0){e.deleteProgram(v.program);var n=u.indexOf(v);u.splice(n,1),r.shaderCount--}l[v.vertId].refCount<=0&&(e.deleteShader(o[v.vertId]),delete o[v.vertId],delete c[v.fragId][v.vertId]),Object.keys(c[v.fragId]).length||(e.deleteShader(i[v.fragId]),delete i[v.fragId],delete c[v.fragId])}})},restore:function(){i={},o={};for(var e=0;e<u.length;++e)m(u[e],null,u[e].attributes.map(function(e){return[e.location,e.name]}))},shader:l,frag:-1,vert:-1}}(o,c,u,i),U=function(t,r,a,i,o,s,f){var l={"don't care":4352,"dont care":4352,nice:4354,fast:4353},c={repeat:10497,clamp:33071,mirror:33648},u={nearest:9728,linear:9729},d=n({mipmap:9987,"nearest mipmap nearest":9984,"linear mipmap nearest":9985,"nearest mipmap linear":9986,"linear mipmap linear":9987},u),p={none:0,browser:37444},m={uint8:5121,rgba4:32819,rgb565:33635,"rgb5 a1":32820},v={alpha:6406,luminance:6409,"luminance alpha":6410,rgb:6407,rgba:6408,rgba4:32854,"rgb5 a1":32855,rgb565:36194},h={};r.ext_srgb&&(v.srgb=35904,v.srgba=35906),r.oes_texture_float&&(m.float32=m.float=5126),r.oes_texture_half_float&&(m.float16=m["half float"]=36193),r.webgl_depth_texture&&(n(v,{depth:6402,"depth stencil":34041}),n(m,{uint16:5123,uint32:5125,"depth stencil":34042})),r.webgl_compressed_texture_s3tc&&n(h,{"rgb s3tc dxt1":33776,"rgba s3tc dxt1":33777,"rgba s3tc dxt3":33778,"rgba s3tc dxt5":33779}),r.webgl_compressed_texture_atc&&n(h,{"rgb atc":35986,"rgba atc explicit alpha":35987,"rgba atc interpolated alpha":34798}),r.webgl_compressed_texture_pvrtc&&n(h,{"rgb pvrtc 4bppv1":35840,"rgb pvrtc 2bppv1":35841,"rgba pvrtc 4bppv1":35842,"rgba pvrtc 2bppv1":35843}),r.webgl_compressed_texture_etc1&&(h["rgb etc1"]=36196);var g=Array.prototype.slice.call(t.getParameter(34467));Object.keys(h).forEach(function(e){var n=h[e];g.indexOf(n)>=0&&(v[e]=n)});var b=Object.keys(v);a.textureFormats=b;var x=[];Object.keys(v).forEach(function(e){x[v[e]]=e});var y=[];Object.keys(m).forEach(function(e){y[m[e]]=e});var w=[];Object.keys(u).forEach(function(e){w[u[e]]=e});var S=[];Object.keys(d).forEach(function(e){S[d[e]]=e});var M=[];Object.keys(c).forEach(function(e){M[c[e]]=e});var T=b.reduce(function(e,n){var t=v[n];return 6409===t||6406===t||6409===t||6410===t||6402===t||34041===t||r.ext_srgb&&(35904===t||35906===t)?e[t]=t:32855===t||n.indexOf("rgba")>=0?e[t]=6408:e[t]=6407,e},{});function A(){this.internalformat=6408,this.format=6408,this.type=5121,this.compressed=!1,this.premultiplyAlpha=!1,this.flipY=!1,this.unpackAlignment=1,this.colorSpace=37444,this.width=0,this.height=0,this.channels=0}function z(e,n){e.internalformat=n.internalformat,e.format=n.format,e.type=n.type,e.compressed=n.compressed,e.premultiplyAlpha=n.premultiplyAlpha,e.flipY=n.flipY,e.unpackAlignment=n.unpackAlignment,e.colorSpace=n.colorSpace,e.width=n.width,e.height=n.height,e.channels=n.channels}function F(e,n){if("object"==typeof n&&n){if("premultiplyAlpha"in n&&(_.type(n.premultiplyAlpha,"boolean","invalid premultiplyAlpha"),e.premultiplyAlpha=n.premultiplyAlpha),"flipY"in n&&(_.type(n.flipY,"boolean","invalid texture flip"),e.flipY=n.flipY),"alignment"in n&&(_.oneOf(n.alignment,[1,2,4,8],"invalid texture unpack alignment"),e.unpackAlignment=n.alignment),"colorSpace"in n&&(_.parameter(n.colorSpace,p,"invalid colorSpace"),e.colorSpace=p[n.colorSpace]),"type"in n){var t=n.type;_(r.oes_texture_float||"float"!==t&&"float32"!==t,"you must enable the OES_texture_float extension in order to use floating point textures."),_(r.oes_texture_half_float||"half float"!==t&&"float16"!==t,"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."),_(r.webgl_depth_texture||"uint16"!==t&&"uint32"!==t&&"depth stencil"!==t,"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),_.parameter(t,m,"invalid texture type"),e.type=m[t]}var i=e.width,o=e.height,s=e.channels,f=!1;"shape"in n?(_(Array.isArray(n.shape)&&n.shape.length>=2,"shape must be an array"),i=n.shape[0],o=n.shape[1],3===n.shape.length&&(_((s=n.shape[2])>0&&s<=4,"invalid number of channels"),f=!0),_(i>=0&&i<=a.maxTextureSize,"invalid width"),_(o>=0&&o<=a.maxTextureSize,"invalid height")):("radius"in n&&_((i=o=n.radius)>=0&&i<=a.maxTextureSize,"invalid radius"),"width"in n&&_((i=n.width)>=0&&i<=a.maxTextureSize,"invalid width"),"height"in n&&_((o=n.height)>=0&&o<=a.maxTextureSize,"invalid height"),"channels"in n&&(_((s=n.channels)>0&&s<=4,"invalid number of channels"),f=!0)),e.width=0|i,e.height=0|o,e.channels=0|s;var l=!1;if("format"in n){var c=n.format;_(r.webgl_depth_texture||"depth"!==c&&"depth stencil"!==c,"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),_.parameter(c,v,"invalid texture format");var u=e.internalformat=v[c];e.format=T[u],c in m&&!("type"in n)&&(e.type=m[c]),c in h&&(e.compressed=!0),l=!0}!f&&l?e.channels=er[e.format]:f&&!l?e.channels!==et[e.format]&&(e.format=e.internalformat=et[e.channels]):l&&f&&_(e.channels===er[e.format],"number of channels inconsistent with specified format")}}function O(e){t.pixelStorei(37440,e.flipY),t.pixelStorei(37441,e.premultiplyAlpha),t.pixelStorei(37443,e.colorSpace),t.pixelStorei(3317,e.unpackAlignment)}function C(){A.call(this),this.xOffset=0,this.yOffset=0,this.data=null,this.needsFree=!1,this.element=null,this.needsCopy=!1}function E(n,t){var r=null;if(eg(t)?r=t:t&&(_.type(t,"object","invalid pixel data type"),F(n,t),"x"in t&&(n.xOffset=0|t.x),"y"in t&&(n.yOffset=0|t.y),eg(t.data)&&(r=t.data)),_(!n.compressed||r instanceof Uint8Array,"compressed texture data must be stored in a uint8array"),t.copy){_(!r,"can not specify copy and data field for the same texture");var i=o.viewportWidth,s=o.viewportHeight;n.width=n.width||i-n.xOffset,n.height=n.height||s-n.yOffset,n.needsCopy=!0,_(n.xOffset>=0&&n.xOffset<i&&n.yOffset>=0&&n.yOffset<s&&n.width>0&&n.width<=i&&n.height>0&&n.height<=s,"copy texture read out of bounds")}else if(r){if(e(r))n.channels=n.channels||4,n.data=r,"type"in t||5121!==n.type||(n.type=eb(r));else if(em(r)){n.channels=n.channels||4;var f=r,l=f.length;switch(n.type){case 5121:case 5123:case 5125:case 5126:var c=V.allocType(n.type,l);c.set(f),n.data=c;break;case 36193:n.data=J(f);break;default:_.raise("unsupported texture type, must specify a typed array")}n.alignment=1,n.needsFree=!0}else if(P(r)){var u,d,p,m,v,h,g=r.data;Array.isArray(g)||5121!==n.type||(n.type=eb(g));var b=r.shape,x=r.stride;3===b.length?(p=b[2],h=x[2]):(_(2===b.length,"invalid ndarray pixel data, must be 2 or 3D"),p=1,h=1),u=b[0],d=b[1],m=x[0],v=x[1],n.alignment=1,n.width=u,n.height=d,n.channels=p,n.format=n.internalformat=et[p],n.needsFree=!0,function(e,n,t,r,a,i){for(var o=e.width,s=e.height,f=e.channels,l=ex(e,o*s*f),c=0,u=0;u<s;++u)for(var d=0;d<o;++d)for(var p=0;p<f;++p)l[c++]=n[t*d+r*u+a*p+i];ey(e,l)}(n,g,m,v,h,r.offset)}else if(eh(r)===ei||eh(r)===eo||eh(r)===es)eh(r)===ei||eh(r)===eo?n.element=r:n.element=r.canvas,n.width=n.element.width,n.height=n.element.height,n.channels=4;else if(eh(r)===ef)n.element=r,n.width=r.width,n.height=r.height,n.channels=4;else if(eh(r)===el)n.element=r,n.width=r.naturalWidth,n.height=r.naturalHeight,n.channels=4;else if(eh(r)===ec)n.element=r,n.width=r.videoWidth,n.height=r.videoHeight,n.channels=4;else if(ev(r)){var y=n.width||r[0].length,w=n.height||r.length,S=n.channels;S=Z(r[0][0])?S||r[0][0].length:S||1;for(var M=N(r),T=1,A=0;A<M.length;++A)T*=M[A];var z=ex(n,T);G(r,M,"",z),ey(n,z),n.alignment=1,n.width=y,n.height=w,n.channels=S,n.format=n.internalformat=et[S],n.needsFree=!0}}else n.width=n.width||1,n.height=n.height||1,n.channels=n.channels||4;5126===n.type?_(a.extensions.indexOf("oes_texture_float")>=0,"oes_texture_float extension not enabled"):36193===n.type&&_(a.extensions.indexOf("oes_texture_half_float")>=0,"oes_texture_half_float extension not enabled")}function k(e,n,r,a,o){var s=e.element,f=e.data,l=e.internalformat,c=e.format,u=e.type,d=e.width,p=e.height;O(e),s?t.texSubImage2D(n,o,r,a,c,u,s):e.compressed?t.compressedTexSubImage2D(n,o,r,a,l,d,p,f):e.needsCopy?(i(),t.copyTexSubImage2D(n,o,r,a,e.xOffset,e.yOffset,d,p)):t.texSubImage2D(n,o,r,a,d,p,c,u,f)}var D=[];function U(){return D.pop()||new C}function R(e){e.needsFree&&V.freeType(e.data),C.call(e),D.push(e)}function B(){A.call(this),this.genMipmaps=!1,this.mipmapHint=4352,this.mipmask=0,this.images=Array(16)}function I(e,n,t){var r=e.images[0]=U();e.mipmask=1,r.width=e.width=n,r.height=e.height=t,r.channels=e.channels=4}function $(e,n){var t=null;if(eg(n))z(t=e.images[0]=U(),e),E(t,n),e.mipmask=1;else if(F(e,n),Array.isArray(n.mipmap))for(var r=n.mipmap,a=0;a<r.length;++a)z(t=e.images[a]=U(),e),t.width>>=a,t.height>>=a,E(t,r[a]),e.mipmask|=1<<a;else z(t=e.images[0]=U(),e),E(t,n),e.mipmask=1;z(e,e.images[0]),e.compressed&&(33776===e.internalformat||33777===e.internalformat||33778===e.internalformat||33779===e.internalformat)&&_(e.width%4==0&&e.height%4==0,"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4")}function K(e,n){for(var r=e.images,a=0;a<r.length;++a){if(!r[a])return;!function(e,n,r){var a=e.element,o=e.data,s=e.internalformat,f=e.format,l=e.type,c=e.width,u=e.height;O(e),a?t.texImage2D(n,r,f,f,l,a):e.compressed?t.compressedTexImage2D(n,r,s,c,u,0,o):e.needsCopy?(i(),t.copyTexImage2D(n,r,f,e.xOffset,e.yOffset,c,u,0)):t.texImage2D(n,r,f,c,u,0,f,l,o||null)}(r[a],n,a)}}var j=[];function H(){var e=j.pop()||new B;A.call(e),e.mipmask=0;for(var n=0;n<16;++n)e.images[n]=null;return e}function q(e){for(var n=e.images,t=0;t<n.length;++t)n[t]&&R(n[t]),n[t]=null;j.push(e)}function W(){this.minFilter=9728,this.magFilter=9728,this.wrapS=33071,this.wrapT=33071,this.anisotropic=1,this.genMipmaps=!1,this.mipmapHint=4352}function Y(e,n){if("min"in n){var t=n.min;_.parameter(t,d),e.minFilter=d[t],!(en.indexOf(e.minFilter)>=0)||"faces"in n||(e.genMipmaps=!0)}if("mag"in n){var r=n.mag;_.parameter(r,u),e.magFilter=u[r]}var i=e.wrapS,o=e.wrapT;if("wrap"in n){var s=n.wrap;"string"==typeof s?(_.parameter(s,c),i=o=c[s]):Array.isArray(s)&&(_.parameter(s[0],c),_.parameter(s[1],c),i=c[s[0]],o=c[s[1]])}else{if("wrapS"in n){var f=n.wrapS;_.parameter(f,c),i=c[f]}if("wrapT"in n){var p=n.wrapT;_.parameter(p,c),o=c[p]}}if(e.wrapS=i,e.wrapT=o,"anisotropic"in n){var m=n.anisotropic;_("number"==typeof m&&m>=1&&m<=a.maxAnisotropic,"aniso samples must be between 1 and "),e.anisotropic=n.anisotropic}if("mipmap"in n){var v=!1;switch(typeof n.mipmap){case"string":_.parameter(n.mipmap,l,"invalid mipmap hint"),e.mipmapHint=l[n.mipmap],e.genMipmaps=!0,v=!0;break;case"boolean":v=e.genMipmaps=n.mipmap;break;case"object":_(Array.isArray(n.mipmap),"invalid mipmap type"),e.genMipmaps=!1,v=!0;break;default:_.raise("invalid mipmap type")}!v||"min"in n||(e.minFilter=9984)}}function Q(e,n){t.texParameteri(n,10241,e.minFilter),t.texParameteri(n,10240,e.magFilter),t.texParameteri(n,10242,e.wrapS),t.texParameteri(n,10243,e.wrapT),r.ext_texture_filter_anisotropic&&t.texParameteri(n,34046,e.anisotropic),e.genMipmaps&&(t.hint(33170,e.mipmapHint),t.generateMipmap(n))}var X=0,ea={},eu=a.maxTextureUnits,ed=Array(eu).map(function(){return null});function ep(e){A.call(this),this.mipmask=0,this.internalformat=6408,this.id=X++,this.refCount=1,this.target=e,this.texture=t.createTexture(),this.unit=-1,this.bindCount=0,this.texInfo=new W,f.profile&&(this.stats={size:0})}function ew(e){t.activeTexture(33984),t.bindTexture(e.target,e.texture)}function eS(){var e=ed[0];e?t.bindTexture(e.target,e.texture):t.bindTexture(3553,null)}function eM(e){var n=e.texture;_(n,"must not double destroy texture");var r=e.unit,a=e.target;r>=0&&(t.activeTexture(33984+r),t.bindTexture(a,null),ed[r]=null),t.deleteTexture(n),e.texture=null,e.params=null,e.pixels=null,e.refCount=0,delete ea[e.id],s.textureCount--}return n(ep.prototype,{bind:function(){this.bindCount+=1;var e=this.unit;if(e<0){for(var n=0;n<eu;++n){var r=ed[n];if(r){if(r.bindCount>0)continue;r.unit=-1}ed[n]=this,e=n;break}e>=eu&&_.raise("insufficient number of texture units"),f.profile&&s.maxTextureUnits<e+1&&(s.maxTextureUnits=e+1),this.unit=e,t.activeTexture(33984+e),t.bindTexture(this.target,this.texture)}return e},unbind:function(){this.bindCount-=1},decRef:function(){--this.refCount<=0&&eM(this)}}),f.profile&&(s.getTotalTextureSize=function(){var e=0;return Object.keys(ea).forEach(function(n){e+=ea[n].stats.size}),e}),{create2D:function(e,n){var r=new ep(3553);function i(e,n){var t=r.texInfo;W.call(t);var o=H();return"number"==typeof e?"number"==typeof n?I(o,0|e,0|n):I(o,0|e,0|e):e?(_.type(e,"object","invalid arguments to regl.texture"),Y(t,e),$(o,e)):I(o,1,1),t.genMipmaps&&(o.mipmask=(o.width<<1)-1),r.mipmask=o.mipmask,z(r,o),_.texture2D(t,o,a),r.internalformat=o.internalformat,i.width=o.width,i.height=o.height,ew(r),K(o,3553),Q(t,3553),eS(),q(o),f.profile&&(r.stats.size=e_(r.internalformat,r.type,o.width,o.height,t.genMipmaps,!1)),i.format=x[r.internalformat],i.type=y[r.type],i.mag=w[t.magFilter],i.min=S[t.minFilter],i.wrapS=M[t.wrapS],i.wrapT=M[t.wrapT],i}return ea[r.id]=r,s.textureCount++,i(e,n),i.subimage=function(e,n,t,a){_(!!e,"must specify image data");var o=0|n,s=0|t,f=0|a,l=U();return z(l,r),l.width=0,l.height=0,E(l,e),l.width=l.width||(r.width>>f)-o,l.height=l.height||(r.height>>f)-s,_(r.type===l.type&&r.format===l.format&&r.internalformat===l.internalformat,"incompatible format for texture.subimage"),_(o>=0&&s>=0&&o+l.width<=r.width&&s+l.height<=r.height,"texture.subimage write out of bounds"),_(r.mipmask&1<<f,"missing mipmap data"),_(l.data||l.element||l.needsCopy,"missing image data"),ew(r),k(l,3553,o,s,f),eS(),R(l),i},i.resize=function(e,n){var a=0|e,o=0|n||a;if(a===r.width&&o===r.height)return i;i.width=r.width=a,i.height=r.height=o,ew(r);for(var s=0;r.mipmask>>s;++s){var l=a>>s,c=o>>s;if(!l||!c)break;t.texImage2D(3553,s,r.format,l,c,0,r.format,r.type,null)}return eS(),f.profile&&(r.stats.size=e_(r.internalformat,r.type,a,o,!1,!1)),i},i._reglType="texture2d",i._texture=r,f.profile&&(i.stats=r.stats),i.destroy=function(){r.decRef()},i},createCube:function(e,n,r,i,o,l){var c=new ep(34067);ea[c.id]=c,s.cubeCount++;var u=Array(6);function d(e,n,t,r,i,o){var s,l=c.texInfo;for(W.call(l),s=0;s<6;++s)u[s]=H();if("number"!=typeof e&&e)if("object"==typeof e)if(n)$(u[0],e),$(u[1],n),$(u[2],t),$(u[3],r),$(u[4],i),$(u[5],o);else if(Y(l,e),F(c,e),"faces"in e){var p=e.faces;for(_(Array.isArray(p)&&6===p.length,"cube faces must be a length 6 array"),s=0;s<6;++s)_("object"==typeof p[s]&&!!p[s],"invalid input for cube map face"),z(u[s],c),$(u[s],p[s])}else for(s=0;s<6;++s)$(u[s],e);else _.raise("invalid arguments to cube map");else{var m=0|e||1;for(s=0;s<6;++s)I(u[s],m,m)}for(z(c,u[0]),_.optional(function(){a.npotTextureCube||_(ee(c.width)&&ee(c.height),"your browser does not support non power or two texture dimensions")}),l.genMipmaps?c.mipmask=(u[0].width<<1)-1:c.mipmask=u[0].mipmask,_.textureCube(c,l,u,a),c.internalformat=u[0].internalformat,d.width=u[0].width,d.height=u[0].height,ew(c),s=0;s<6;++s)K(u[s],34069+s);for(Q(l,34067),eS(),f.profile&&(c.stats.size=e_(c.internalformat,c.type,d.width,d.height,l.genMipmaps,!0)),d.format=x[c.internalformat],d.type=y[c.type],d.mag=w[l.magFilter],d.min=S[l.minFilter],d.wrapS=M[l.wrapS],d.wrapT=M[l.wrapT],s=0;s<6;++s)q(u[s]);return d}return d(e,n,r,i,o,l),d.subimage=function(e,n,t,r,a){_(!!n,"must specify image data"),_("number"==typeof e&&e===(0|e)&&e>=0&&e<6,"invalid face");var i=0|t,o=0|r,s=0|a,f=U();return z(f,c),f.width=0,f.height=0,E(f,n),f.width=f.width||(c.width>>s)-i,f.height=f.height||(c.height>>s)-o,_(c.type===f.type&&c.format===f.format&&c.internalformat===f.internalformat,"incompatible format for texture.subimage"),_(i>=0&&o>=0&&i+f.width<=c.width&&o+f.height<=c.height,"texture.subimage write out of bounds"),_(c.mipmask&1<<s,"missing mipmap data"),_(f.data||f.element||f.needsCopy,"missing image data"),ew(c),k(f,34069+e,i,o,s),eS(),R(f),d},d.resize=function(e){var n=0|e;if(n!==c.width){d.width=c.width=n,d.height=c.height=n,ew(c);for(var r=0;r<6;++r)for(var a=0;c.mipmask>>a;++a)t.texImage2D(34069+r,a,c.format,n>>a,n>>a,0,c.format,c.type,null);return eS(),f.profile&&(c.stats.size=e_(c.internalformat,c.type,d.width,d.height,!1,!0)),d}},d._reglType="textureCube",d._texture=c,f.profile&&(d.stats=c.stats),d.destroy=function(){c.decRef()},d},clear:function(){for(var e=0;e<eu;++e)t.activeTexture(33984+e),t.bindTexture(3553,null),ed[e]=null;L(ea).forEach(eM),s.cubeCount=0,s.textureCount=0},getTexture:function(e){return null},restore:function(){for(var e=0;e<eu;++e){var n=ed[e];n&&(n.bindCount=0,n.unit=-1,ed[e]=null)}L(ea).forEach(function(e){e.texture=t.createTexture(),t.bindTexture(e.target,e.texture);for(var n=0;n<32;++n)if((e.mipmask&1<<n)!=0)if(3553===e.target)t.texImage2D(3553,n,e.internalformat,e.width>>n,e.height>>n,0,e.internalformat,e.type,null);else for(var r=0;r<6;++r)t.texImage2D(34069+r,n,e.internalformat,e.width>>n,e.height>>n,0,e.internalformat,e.type,null);Q(e.texInfo,e.target)})},refresh:function(){for(var e=0;e<eu;++e){var n=ed[e];n&&(n.bindCount=0,n.unit=-1,ed[e]=null),t.activeTexture(33984+e),t.bindTexture(3553,null),t.bindTexture(34067,null)}}}}(o,d,x,function(){Q.procs.poll()},g,u,i),B=eS(o,d,x,u,i),I=function(e,t,r,a,i,o){var s={cur:null,next:null,dirty:!1,setFBO:null},f=["rgba"],l=["rgba4","rgb565","rgb5 a1"];t.ext_srgb&&l.push("srgba"),t.ext_color_buffer_half_float&&l.push("rgba16f","rgb16f"),t.webgl_color_buffer_float&&l.push("rgba32f");var c=["uint8"];function u(e,n,t){this.target=e,this.texture=n,this.renderbuffer=t;var r=0,a=0;n?(r=n.width,a=n.height):t&&(r=t.width,a=t.height),this.width=r,this.height=a}function d(e){e&&(e.texture&&e.texture._texture.decRef(),e.renderbuffer&&e.renderbuffer._renderbuffer.decRef())}function p(e,n,t){if(e)if(e.texture){var r=e.texture._texture,a=Math.max(1,r.width),i=Math.max(1,r.height);_(a===n&&i===t,"inconsistent width/height for supplied texture"),r.refCount+=1}else{var o=e.renderbuffer._renderbuffer;_(o.width===n&&o.height===t,"inconsistent width/height for renderbuffer"),o.refCount+=1}}function m(n,t){t&&(t.texture?e.framebufferTexture2D(36160,n,t.target,t.texture._texture.texture,0):e.framebufferRenderbuffer(36160,n,36161,t.renderbuffer._renderbuffer.renderbuffer))}function v(e){var n=3553,t=null,r=null,a=e;"object"==typeof e&&(a=e.data,"target"in e&&(n=0|e.target)),_.type(a,"function","invalid attachment data");var i=a._reglType;return"texture2d"===i?(t=a,_(3553===n)):"textureCube"===i?(t=a,_(n>=34069&&n<34075,"invalid cube map target")):"renderbuffer"===i?(r=a,n=36161):_.raise("invalid regl object for attachment"),new u(n,t,r)}function h(e,n,t,r,o){if(t){var s=a.create2D({width:e,height:n,format:r,type:o});return s._texture.refCount=0,new u(3553,s,null)}var f=i.create({width:e,height:n,format:r});return f._renderbuffer.refCount=0,new u(36161,null,f)}function g(e){return e&&(e.texture||e.renderbuffer)}function b(e,n,t){e&&(e.texture?e.texture.resize(n,t):e.renderbuffer&&e.renderbuffer.resize(n,t),e.width=n,e.height=t)}t.oes_texture_half_float&&c.push("half float","float16"),t.oes_texture_float&&c.push("float","float32");var x=0,y={};function w(){this.id=x++,y[this.id]=this,this.framebuffer=e.createFramebuffer(),this.width=0,this.height=0,this.colorAttachments=[],this.depthAttachment=null,this.stencilAttachment=null,this.depthStencilAttachment=null}function S(e){e.colorAttachments.forEach(d),d(e.depthAttachment),d(e.stencilAttachment),d(e.depthStencilAttachment)}function M(n){var t=n.framebuffer;_(t,"must not double destroy framebuffer"),e.deleteFramebuffer(t),n.framebuffer=null,o.framebufferCount--,delete y[n.id]}function T(n){e.bindFramebuffer(36160,n.framebuffer);var t,a=n.colorAttachments;for(t=0;t<a.length;++t)m(36064+t,a[t]);for(t=a.length;t<r.maxColorAttachments;++t)e.framebufferTexture2D(36160,36064+t,3553,null,0);e.framebufferTexture2D(36160,33306,3553,null,0),e.framebufferTexture2D(36160,36096,3553,null,0),e.framebufferTexture2D(36160,36128,3553,null,0),m(36096,n.depthAttachment),m(36128,n.stencilAttachment),m(33306,n.depthStencilAttachment);var i=e.checkFramebufferStatus(36160);e.isContextLost()||36053===i||_.raise("framebuffer configuration not supported, status = "+eF[i]),e.bindFramebuffer(36160,s.next?s.next.framebuffer:null),s.cur=s.next,e.getError()}function A(e,a){var i=new w;function u(e,n){_(s.next!==i,"can not update framebuffer which is currently in use");var a,o=0,d=0,m=!0,b=!0,x=null,y=!0,w="rgba",M="uint8",A=1,z=null,F=null,O=null,C=!1;if("number"==typeof e)o=0|e,d=0|n||o;else if(e){if(_.type(e,"object","invalid arguments for framebuffer"),"shape"in e){var E=e.shape;_(Array.isArray(E)&&E.length>=2,"invalid shape for framebuffer"),o=E[0],d=E[1]}else"radius"in e&&(o=d=e.radius),"width"in e&&(o=e.width),"height"in e&&(d=e.height);("color"in e||"colors"in e)&&Array.isArray(x=e.color||e.colors)&&_(1===x.length||t.webgl_draw_buffers,"multiple render targets not supported"),!x&&("colorCount"in e&&_((A=0|e.colorCount)>0,"invalid color buffer count"),"colorTexture"in e&&(y=!!e.colorTexture,w="rgba4"),"colorType"in e&&(M=e.colorType,y?(_(t.oes_texture_float||"float"!==M&&"float32"!==M,"you must enable OES_texture_float in order to use floating point framebuffer objects"),_(t.oes_texture_half_float||"half float"!==M&&"float16"!==M,"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects")):"half float"===M||"float16"===M?(_(t.ext_color_buffer_half_float,"you must enable EXT_color_buffer_half_float to use 16-bit render buffers"),w="rgba16f"):("float"===M||"float32"===M)&&(_(t.webgl_color_buffer_float,"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"),w="rgba32f"),_.oneOf(M,c,"invalid color type")),"colorFormat"in e&&(w=e.colorFormat,f.indexOf(w)>=0?y=!0:l.indexOf(w)>=0?y=!1:_.optional(function(){y?_.oneOf(e.colorFormat,f,"invalid color format for texture"):_.oneOf(e.colorFormat,l,"invalid color format for renderbuffer")}))),("depthTexture"in e||"depthStencilTexture"in e)&&_(!(C=!!(e.depthTexture||e.depthStencilTexture))||t.webgl_depth_texture,"webgl_depth_texture extension not supported"),"depth"in e&&("boolean"==typeof e.depth?m=e.depth:(z=e.depth,b=!1)),"stencil"in e&&("boolean"==typeof e.stencil?b=e.stencil:(F=e.stencil,m=!1)),"depthStencil"in e&&("boolean"==typeof e.depthStencil?m=b=e.depthStencil:(O=e.depthStencil,m=!1,b=!1))}else o=d=1;var k=null,D=null,U=null,V=null;if(Array.isArray(x))k=x.map(v);else if(x)k=[v(x)];else for(a=0,k=Array(A);a<A;++a)k[a]=h(o,d,y,w,M);_(t.webgl_draw_buffers||k.length<=1,"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."),_(k.length<=r.maxColorAttachments,"too many color attachments, not supported"),o=o||k[0].width,d=d||k[0].height,z?D=v(z):m&&!b&&(D=h(o,d,C,"depth","uint32")),F?U=v(F):b&&!m&&(U=h(o,d,!1,"stencil","uint8")),O?V=v(O):!z&&!F&&b&&m&&(V=h(o,d,C,"depth stencil","depth stencil")),_(!!z+!!F+!!O<=1,"invalid framebuffer configuration, can specify exactly one depth/stencil attachment");var R=null;for(a=0;a<k.length;++a)if(p(k[a],o,d),_(!k[a]||k[a].texture&&eM.indexOf(k[a].texture._texture.format)>=0||k[a].renderbuffer&&ez.indexOf(k[a].renderbuffer._renderbuffer.format)>=0,"framebuffer color attachment "+a+" is invalid"),k[a]&&k[a].texture){var P=eT[k[a].texture._texture.format]*eA[k[a].texture._texture.type];null===R?R=P:_(R===P,"all color attachments much have the same number of bits per pixel.")}return p(D,o,d),_(!D||D.texture&&6402===D.texture._texture.format||D.renderbuffer&&33189===D.renderbuffer._renderbuffer.format,"invalid depth attachment for framebuffer object"),p(U,o,d),_(!U||U.renderbuffer&&36168===U.renderbuffer._renderbuffer.format,"invalid stencil attachment for framebuffer object"),p(V,o,d),_(!V||V.texture&&34041===V.texture._texture.format||V.renderbuffer&&34041===V.renderbuffer._renderbuffer.format,"invalid depth-stencil attachment for framebuffer object"),S(i),i.width=o,i.height=d,i.colorAttachments=k,i.depthAttachment=D,i.stencilAttachment=U,i.depthStencilAttachment=V,u.color=k.map(g),u.depth=g(D),u.stencil=g(U),u.depthStencil=g(V),u.width=i.width,u.height=i.height,T(i),u}return o.framebufferCount++,u(e,a),n(u,{resize:function(e,n){_(s.next!==i,"can not resize a framebuffer which is currently in use");var t=Math.max(0|e,1),r=Math.max(0|n||t,1);if(t===i.width&&r===i.height)return u;for(var a=i.colorAttachments,o=0;o<a.length;++o)b(a[o],t,r);return b(i.depthAttachment,t,r),b(i.stencilAttachment,t,r),b(i.depthStencilAttachment,t,r),i.width=u.width=t,i.height=u.height=r,T(i),u},_reglType:"framebuffer",_framebuffer:i,destroy:function(){M(i),S(i)},use:function(e){s.setFBO({framebuffer:u},e)}})}return n(s,{getFramebuffer:function(e){if("function"==typeof e&&"framebuffer"===e._reglType){var n=e._framebuffer;if(n instanceof w)return n}return null},create:A,createCube:function(e){var i=Array(6);function o(e){_(0>i.indexOf(s.next),"can not update framebuffer which is currently in use");var r,l,u={color:null},d=0,p=null,m="rgba",v="uint8",h=1;if("number"==typeof e)d=0|e;else if(e){if(_.type(e,"object","invalid arguments for framebuffer"),"shape"in e){var g=e.shape;_(Array.isArray(g)&&g.length>=2,"invalid shape for framebuffer"),_(g[0]===g[1],"cube framebuffer must be square"),d=g[0]}else"radius"in e&&(d=0|e.radius),"width"in e?(d=0|e.width,"height"in e&&_(e.height===d,"must be square")):"height"in e&&(d=0|e.height);("color"in e||"colors"in e)&&Array.isArray(p=e.color||e.colors)&&_(1===p.length||t.webgl_draw_buffers,"multiple render targets not supported"),!p&&("colorCount"in e&&_((h=0|e.colorCount)>0,"invalid color buffer count"),"colorType"in e&&(_.oneOf(e.colorType,c,"invalid color type"),v=e.colorType),"colorFormat"in e&&(m=e.colorFormat,_.oneOf(e.colorFormat,f,"invalid color format for texture"))),"depth"in e&&(u.depth=e.depth),"stencil"in e&&(u.stencil=e.stencil),"depthStencil"in e&&(u.depthStencil=e.depthStencil)}else d=1;if(p)if(Array.isArray(p))for(r=0,l=[];r<p.length;++r)l[r]=p[r];else l=[p];else{l=Array(h);var b={radius:d,format:m,type:v};for(r=0;r<h;++r)l[r]=a.createCube(b)}for(r=0,u.color=Array(l.length);r<l.length;++r){var x=l[r];_("function"==typeof x&&"textureCube"===x._reglType,"invalid cube map"),d=d||x.width,_(x.width===d&&x.height===d,"invalid cube map shape"),u.color[r]={target:34069,data:l[r]}}for(r=0;r<6;++r){for(var y=0;y<l.length;++y)u.color[y].target=34069+r;r>0&&(u.depth=i[0].depth,u.stencil=i[0].stencil,u.depthStencil=i[0].depthStencil),i[r]?i[r](u):i[r]=A(u)}return n(o,{width:d,height:d,color:l})}return o(e),n(o,{faces:i,resize:function(e){var n,t=0|e;if(_(t>0&&t<=r.maxCubeMapSize,"invalid radius for cube fbo"),t===o.width)return o;var a=o.color;for(n=0;n<a.length;++n)a[n].resize(t);for(n=0;n<6;++n)i[n].resize(t);return o.width=o.height=t,o},_reglType:"framebufferCube",destroy:function(){i.forEach(function(e){e.destroy()})}})},clear:function(){L(y).forEach(M)},restore:function(){s.cur=null,s.next=null,s.dirty=!0,L(y).forEach(function(n){n.framebuffer=e.createFramebuffer(),T(n)})}})}(o,d,x,U,B,u),Q=function(e,t,r,a,i,o,s,f,l,c,u,d,p,m,v){var h=c.Record,g={add:32774,subtract:32778,"reverse subtract":32779};r.ext_blend_minmax&&(g.min=32775,g.max=32776);var b=r.angle_instanced_arrays,x=r.webgl_draw_buffers,y=r.oes_vertex_array_object,w={dirty:!0,profile:v.profile},M={},T=[],F={},O={};function C(e){return e.replace(".","_")}function E(e,n,t){var r=C(e);T.push(e),M[r]=w[r]=!!t,F[r]=n}function D(e,n,t){var r=C(e);T.push(e),Array.isArray(t)?(w[r]=t.slice(),M[r]=t.slice()):w[r]=M[r]=t,O[r]=n}E(eU,3024),E(eV,3042),D(eR,"blendColor",[0,0,0,0]),D(eP,"blendEquationSeparate",[32774,32774]),D(eL,"blendFuncSeparate",[1,0,1,0]),E(eN,2929,!0),D(eG,"depthFunc",513),D(eB,"depthRange",[0,1]),D(eI,"depthMask",!0),D(e$,e$,[!0,!0,!0,!0]),E(eK,2884),D(ej,"cullFace",1029),D(eH,eH,2305),D(eq,eq,1),E(eW,32823),D(eY,"polygonOffset",[0,0]),E(eQ,32926),E(eX,32928),D(eJ,"sampleCoverage",[1,!1]),E(eZ,2960),D(e0,"stencilMask",-1),D(e1,"stencilFunc",[519,0,-1]),D(e2,"stencilOpSeparate",[1028,7680,7680,7680]),D(e3,"stencilOpSeparate",[1029,7680,7680,7680]),E(e5,3089),D(e4,"scissor",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]),D(e6,e6,[0,0,e.drawingBufferWidth,e.drawingBufferHeight]);var U={gl:e,context:p,strings:t,next:M,current:w,draw:d,elements:o,buffer:i,shader:u,attributes:c.state,vao:c,uniforms:l,framebuffer:f,extensions:r,timer:m,isBufferArgs:nw},V={primTypes:Y,compareFuncs:nb,blendFuncs:nh,blendEquations:g,stencilOps:nx,glTypes:$,orientationType:n_};_.optional(function(){U.isArrayLike=Z}),x&&(V.backBuffer=[1029],V.drawBuffer=k(a.maxDrawbuffers,function(e){return 0===e?[0]:k(e,function(e){return 36064+e})}));var R=0;function P(){var e=function(){var e=0,t=[],r=[];function a(){var t=[],r=[];return n(function(){t.push.apply(t,eE(arguments))},{def:function(){var n="v"+e++;return r.push(n),arguments.length>0&&(t.push(n,"="),t.push.apply(t,eE(arguments)),t.push(";")),n},toString:function(){return ek([r.length>0?"var "+r.join(",")+";":"",ek(t)])}})}function i(){var e=a(),t=a(),r=e.toString,i=t.toString;function o(n,r){t(n,r,"=",e.def(n,r),";")}return n(function(){e.apply(e,eE(arguments))},{def:e.def,entry:e,exit:t,save:o,set:function(n,t,r){o(n,t),e(n,t,"=",r,";")},toString:function(){return r()+i()}})}var o=a(),s={};return{global:o,link:function(n){for(var a=0;a<r.length;++a)if(r[a]===n)return t[a];var i="g"+e++;return t.push(i),r.push(n),i},block:a,proc:function(e,t){var r=[];function a(){var e="a"+r.length;return r.push(e),e}t=t||0;for(var o=0;o<t;++o)a();var f=i(),l=f.toString;return s[e]=n(f,{arg:a,toString:function(){return ek(["function(",r.join(),"){",l(),"}"])}})},scope:i,cond:function(){var e=ek(arguments),t=i(),r=i(),a=t.toString,o=r.toString;return n(t,{then:function(){return t.apply(t,eE(arguments)),this},else:function(){return r.apply(r,eE(arguments)),this},toString:function(){var n=o();return n&&(n="else{"+n+"}"),ek(["if(",e,"){",a(),"}",n])}})},compile:function(){var e=['"use strict";',o,"return {"];Object.keys(s).forEach(function(n){e.push('"',n,'":',s[n].toString(),",")}),e.push("}");var n=ek(e).replace(/;/g,";\n").replace(/}/g,"}\n").replace(/{/g,"{\n");return Function.apply(null,t.concat(n)).apply(null,r)}}}(),r=e.link,a=e.global;e.id=R++,e.batchId="0";var i=r(U),o=e.shared={props:"a0"};Object.keys(U).forEach(function(e){o[e]=a.def(i,".",e)}),_.optional(function(){e.CHECK=r(_),e.commandStr=_.guessCommand(),e.command=r(e.commandStr),e.assert=function(e,n,t){e("if(!(",n,"))",this.CHECK,".commandRaise(",r(t),",",this.command,");")},V.invalidBlendCombinations=ng});var s=e.next={},f=e.current={};Object.keys(O).forEach(function(e){Array.isArray(w[e])&&(s[e]=a.def(o.next,".",e),f[e]=a.def(o.current,".",e))});var l=e.constants={};Object.keys(V).forEach(function(e){l[e]=a.def(JSON.stringify(V[e]))}),e.invoke=function(n,t){switch(t.type){case 0:var a=["this",o.context,o.props,e.batchId];return n.def(r(t.data),".call(",a.slice(0,Math.max(t.data.length+1,4)),")");case 1:return n.def(o.props,t.data);case 2:return n.def(o.context,t.data);case 3:return n.def("this",t.data);case 4:return t.data.append(e,n),t.data.ref;case 5:return t.data.toString();case 6:return t.data.map(function(t){return e.invoke(n,t)})}},e.attribCache={};var u={};return e.scopeAttrib=function(e){var n=t.id(e);if(n in u)return u[n];var a=c.scope[n];return a||(a=c.scope[n]=new h),u[n]=r(a)},e}function L(e,n,t){var r=e.shared.context,a=e.scope();Object.keys(t).forEach(function(i){n.save(r,"."+i);var o=t[i].append(e,n);Array.isArray(o)?a(r,".",i,"=[",o.join(),"];"):a(r,".",i,"=",o,";")}),n(a)}function N(e,n,t,r){var a,i,o=e.shared,s=o.gl,f=o.framebuffer;x&&(a=n.def(o.extensions,".webgl_draw_buffers"));var l=e.constants,c=l.drawBuffer,u=l.backBuffer;i=t?t.append(e,n):n.def(f,".next"),r||n("if(",i,"!==",f,".cur){"),n("if(",i,"){",s,".bindFramebuffer(",36160,",",i,".framebuffer);"),x&&n(a,".drawBuffersWEBGL(",c,"[",i,".colorAttachments.length]);"),n("}else{",s,".bindFramebuffer(",36160,",null);"),x&&n(a,".drawBuffersWEBGL(",u,");"),n("}",f,".cur=",i,";"),r||n("}")}function G(e,n,t){var r=e.shared,a=r.gl,i=e.current,o=e.next,s=r.current,f=r.next,l=e.cond(s,".dirty");T.forEach(function(n){var r,c,u=C(n);if(!(u in t.state))if(u in o){r=o[u],c=i[u];var d=k(w[u].length,function(e){return l.def(r,"[",e,"]")});l(e.cond(d.map(function(e,n){return e+"!=="+c+"["+n+"]"}).join("||")).then(a,".",O[u],"(",d,");",d.map(function(e,n){return c+"["+n+"]="+e}).join(";"),";"))}else{r=l.def(f,".",u);var p=e.cond(r,"!==",s,".",u);l(p),u in F?p(e.cond(r).then(a,".enable(",F[u],");").else(a,".disable(",F[u],");"),s,".",u,"=",r,";"):p(a,".",O[u],"(",r,");",s,".",u,"=",r,";")}}),0===Object.keys(t.state).length&&l(s,".dirty=false;"),n(l)}function B(e,n,t,r){var a=e.shared,i=e.current,o=a.current,s=a.gl;nS(Object.keys(t)).forEach(function(a){var f=t[a];if(!r||r(f)){var l=f.append(e,n);if(F[a]){var c=F[a];nT(f)?l?n(s,".enable(",c,");"):n(s,".disable(",c,");"):n(e.cond(l).then(s,".enable(",c,");").else(s,".disable(",c,");")),n(o,".",a,"=",l,";")}else if(Z(l)){var u=i[a];n(s,".",O[a],"(",l,");",l.map(function(e,n){return u+"["+n+"]="+e}).join(";"),";")}else n(s,".",O[a],"(",l,");",o,".",a,"=",l,";")}})}function I(e,n){b&&(e.instancing=n.def(e.shared.extensions,".angle_instanced_arrays"))}function K(e,n,t,r,a){var i,o,s,f=e.shared,l=e.stats,c=f.current,u=f.timer,d=t.profile;function p(){return"undefined"==typeof performance?"Date.now()":"performance.now()"}function v(e){e(i=n.def(),"=",p(),";"),"string"==typeof a?e(l,".count+=",a,";"):e(l,".count++;"),m&&(r?e(o=n.def(),"=",u,".getNumPendingQueries();"):e(u,".beginQuery(",l,");"))}function h(e){e(l,".cpuTime+=",p(),"-",i,";"),m&&(r?e(u,".pushScopeStats(",o,",",u,".getNumPendingQueries(),",l,");"):e(u,".endQuery();"))}function g(e){var t=n.def(c,".profile");n(c,".profile=",e,";"),n.exit(c,".profile=",t,";")}if(d){if(nT(d))return void(d.enable?(v(n),h(n.exit),g("true")):g("false"));g(s=d.append(e,n))}else s=n.def(c,".profile");var b=e.block();v(b),n("if(",s,"){",b,"}");var x=e.block();h(x),n.exit("if(",s,"){",x,"}")}function j(e,n,t,r,a){var i=e.shared;r.forEach(function(r){var o,s=r.name,f=t.attributes[s];if(f){if(!a(f))return;o=f.append(e,n)}else{if(!a(nF))return;var l=e.scopeAttrib(s);_.optional(function(){e.assert(n,l+".state","missing attribute "+s)}),o={},Object.keys(new h).forEach(function(e){o[e]=n.def(l,".",e)})}!function(t,r,a){var o=i.gl,s=n.def(t,".location"),f=n.def(i.attributes,"[",s,"]"),l=a.state,c=a.buffer,u=[a.x,a.y,a.z,a.w],d=["buffer","normalized","offset","stride"];function p(){n("if(!",f,".buffer){",o,".enableVertexAttribArray(",s,");}");var t,i=a.type;if(t=a.size?n.def(a.size,"||",r):r,n("if(",f,".type!==",i,"||",f,".size!==",t,"||",d.map(function(e){return f+"."+e+"!=="+a[e]}).join("||"),"){",o,".bindBuffer(",34962,",",c,".buffer);",o,".vertexAttribPointer(",[s,t,i,a.normalized,a.stride,a.offset],");",f,".type=",i,";",f,".size=",t,";",d.map(function(e){return f+"."+e+"="+a[e]+";"}).join(""),"}"),b){var l=a.divisor;n("if(",f,".divisor!==",l,"){",e.instancing,".vertexAttribDivisorANGLE(",[s,l],");",f,".divisor=",l,";}")}}function m(){n("if(",f,".buffer){",o,".disableVertexAttribArray(",s,");",f,".buffer=null;","}if(",eD.map(function(e,n){return f+"."+e+"!=="+u[n]}).join("||"),"){",o,".vertexAttrib4f(",s,",",u,");",eD.map(function(e,n){return f+"."+e+"="+u[n]+";"}).join(""),"}")}1===l?p():2===l?m():(n("if(",l,"===",1,"){"),p(),n("}else{"),m(),n("}"))}(e.link(r),function(e){switch(e){case 35664:case 35667:case 35671:return 2;case 35665:case 35668:case 35672:return 3;case 35666:case 35669:case 35673:return 4;default:return 1}}(r.info.type),o)})}function H(e,n,r,a,i,o){for(var s=e.shared,f=s.gl,l=0;l<a.length;++l){var c,u,d=a[l],p=d.name,m=d.info.type,v=r.uniforms[p],h=e.link(d)+".location";if(v){if(!i(v))continue;if(nT(v)){var g=v.value;if(_.command(null!=g,'missing uniform "'+p+'"',e.commandStr),35678===m||35680===m){_.command("function"==typeof g&&(35678===m&&("texture2d"===g._reglType||"framebuffer"===g._reglType)||35680===m&&("textureCube"===g._reglType||"framebufferCube"===g._reglType)),"invalid texture for uniform "+p,e.commandStr);var b=e.link(g._texture||g.color[0]._texture);n(f,".uniform1i(",h,",",b+".bind());"),n.exit(b,".unbind();")}else if(35674===m||35675===m||35676===m){_.optional(function(){_.command(Z(g),"invalid matrix for uniform "+p,e.commandStr),_.command(35674===m&&4===g.length||35675===m&&9===g.length||35676===m&&16===g.length,"invalid length for matrix uniform "+p,e.commandStr)});var x=e.global.def("new Float32Array(["+Array.prototype.slice.call(g)+"])"),y=2;35675===m?y=3:35676===m&&(y=4),n(f,".uniformMatrix",y,"fv(",h,",false,",x,");")}else{switch(m){case 5126:_.commandType(g,"number","uniform "+p,e.commandStr),c="1f";break;case 35664:_.command(Z(g)&&2===g.length,"uniform "+p,e.commandStr),c="2f";break;case 35665:_.command(Z(g)&&3===g.length,"uniform "+p,e.commandStr),c="3f";break;case 35666:_.command(Z(g)&&4===g.length,"uniform "+p,e.commandStr),c="4f";break;case 35670:_.commandType(g,"boolean","uniform "+p,e.commandStr),c="1i";break;case 5124:_.commandType(g,"number","uniform "+p,e.commandStr),c="1i";break;case 35671:case 35667:_.command(Z(g)&&2===g.length,"uniform "+p,e.commandStr),c="2i";break;case 35672:case 35668:_.command(Z(g)&&3===g.length,"uniform "+p,e.commandStr),c="3i";break;case 35673:case 35669:_.command(Z(g)&&4===g.length,"uniform "+p,e.commandStr),c="4i"}n(f,".uniform",c,"(",h,",",Z(g)?Array.prototype.slice.call(g):g,");")}continue}u=v.append(e,n)}else{if(!i(nF))continue;u=n.def(s.uniforms,"[",t.id(p),"]")}35678===m?(_(!Array.isArray(u),"must specify a scalar prop for textures"),n("if(",u,"&&",u,'._reglType==="framebuffer"){',u,"=",u,".color[0];","}")):35680===m&&(_(!Array.isArray(u),"must specify a scalar prop for cube maps"),n("if(",u,"&&",u,'._reglType==="framebufferCube"){',u,"=",u,".color[0];","}")),_.optional(function(){function t(t,r){e.assert(n,t,'bad data or missing for uniform "'+p+'".  '+r)}function r(e){_(!Array.isArray(u),"must not specify an array type for uniform"),t("typeof "+u+'==="'+e+'"',"invalid type, expected "+e)}function a(n,r){Array.isArray(u)?_(u.length===n,"must have length "+n):t(s.isArrayLike+"("+u+")&&"+u+".length==="+n,"invalid vector, should have length "+n,e.commandStr)}function i(n){_(!Array.isArray(u),"must not specify a value type"),t("typeof "+u+'==="function"&&'+u+'._reglType==="texture'+(3553===n?"2d":"Cube")+'"',"invalid texture type",e.commandStr)}switch(m){case 5124:case 5126:r("number");break;case 35667:case 35664:a(2,"number");break;case 35668:case 35665:a(3,"number");break;case 35669:case 35666:case 35674:a(4,"number");break;case 35670:r("boolean");break;case 35671:a(2,"boolean");break;case 35672:a(3,"boolean");break;case 35673:a(4,"boolean");break;case 35675:a(9,"number");break;case 35676:a(16,"number");break;case 35678:i(3553);break;case 35680:i(34067)}});var w=1;switch(m){case 35678:case 35680:var S=n.def(u,"._texture");n(f,".uniform1i(",h,",",S,".bind());"),n.exit(S,".unbind();");continue;case 5124:case 35670:c="1i";break;case 35667:case 35671:c="2i",w=2;break;case 35668:case 35672:c="3i",w=3;break;case 35669:case 35673:c="4i",w=4;break;case 5126:c="1f";break;case 35664:c="2f",w=2;break;case 35665:c="3f",w=3;break;case 35666:c="4f",w=4;break;case 35674:c="Matrix2fv";break;case 35675:c="Matrix3fv";break;case 35676:c="Matrix4fv"}if("M"===c.charAt(0)){n(f,".uniform",c,"(",h,",");var M=Math.pow(m-35674+2,2),T=e.global.def("new Float32Array(",M,")");Array.isArray(u)?n("false,(",k(M,function(e){return T+"["+e+"]="+u[e]}),",",T,")"):n("false,(Array.isArray(",u,")||",u," instanceof Float32Array)?",u,":(",k(M,function(e){return T+"["+e+"]="+u+"["+e+"]"}),",",T,")"),n(");")}else if(w>1){for(var A=[],z=[],F=0;F<w;++F)Array.isArray(u)?z.push(u[F]):z.push(n.def(u+"["+F+"]")),o&&A.push(n.def());o&&n("if(!",e.batchId,"||",A.map(function(e,n){return e+"!=="+z[n]}).join("||"),"){",A.map(function(e,n){return e+"="+z[n]+";"}).join("")),n(f,".uniform",c,"(",h,",",z.join(","),");"),o&&n("}")}else{if(_(!Array.isArray(u),"uniform value must not be an array"),o){var O=n.def();n("if(!",e.batchId,"||",O,"!==",u,"){",O,"=",u,";")}n(f,".uniform",c,"(",h,",",u,");"),o&&n("}")}}}function q(e,n,t,r){var a,i,o,s,f,l,c,u,d=e.shared,p=d.gl,m=d.draw,v=r.draw,h=(i=v.elements,o=n,i?((i.contextDep&&r.contextDynamic||i.propDep)&&(o=t),a=i.append(e,o),v.elementsActive&&o("if("+a+")"+p+".bindBuffer(34963,"+a+".buffer.buffer);")):(a=o.def(),o(a,"=",m,".",nn,";","if(",a,"){",p,".bindBuffer(",34963,",",a,".buffer.buffer);}","else if(",d.vao,".currentVAO){",a,"=",e.shared.elements+".getElements("+d.vao,".currentVAO.elements);",y?"":"if("+a+")"+p+".bindBuffer(34963,"+a+".buffer.buffer);","}")),a);function g(a){var i=v[a];return i?i.contextDep&&r.contextDynamic||i.propDep?i.append(e,t):i.append(e,n):n.def(m,".",a)}var x=g(nt),w=g(na),S=(f=v.count,l=n,f?((f.contextDep&&r.contextDynamic||f.propDep)&&(l=t),s=f.append(e,l),_.optional(function(){f.MISSING&&e.assert(n,"false","missing vertex count"),f.DYNAMIC&&e.assert(l,s+">=0","missing vertex count")})):(s=l.def(m,".",nr),_.optional(function(){e.assert(l,s+">=0","missing vertex count")})),s);if("number"==typeof S){if(0===S)return}else t("if(",S,"){"),t.exit("}");b&&(c=g(ni),u=e.instancing);var M=h+".type",T=v.elements&&nT(v.elements)&&!v.vaoActive;function A(){function e(){t(u,".drawElementsInstancedANGLE(",[x,S,M,w+"<<(("+M+"-5121)>>1)",c],");")}function n(){t(u,".drawArraysInstancedANGLE(",[x,w,S,c],");")}h&&"null"!==h?T?e():(t("if(",h,"){"),e(),t("}else{"),n(),t("}")):n()}function z(){function e(){t(p+".drawElements("+[x,S,M,w+"<<(("+M+"-5121)>>1)"]+");")}function n(){t(p+".drawArrays("+[x,w,S]+");")}h&&"null"!==h?T?e():(t("if(",h,"){"),e(),t("}else{"),n(),t("}")):n()}b&&("number"!=typeof c||c>=0)?"string"==typeof c?(t("if(",c,">0){"),A(),t("}else if(",c,"<0){"),z(),t("}")):A():z()}function W(e,n,t,r,a){var i=P(),o=i.proc("body",a);return _.optional(function(){i.commandStr=n.commandStr,i.command=i.link(n.commandStr)}),b&&(i.instancing=o.def(i.shared.extensions,".angle_instanced_arrays")),e(i,o,t,r),i.compile().body}function Q(e,n,t,r){I(e,n),t.useVAO?t.drawVAO?n(e.shared.vao,".setVAO(",t.drawVAO.append(e,n),");"):n(e.shared.vao,".setVAO(",e.shared.vao,".targetVAO);"):(n(e.shared.vao,".setVAO(null);"),j(e,n,t,r.attributes,function(){return!0})),H(e,n,t,r.uniforms,function(){return!0},!1),q(e,n,n,t)}function X(e,n,t,r){function a(){return!0}e.batchId="a1",I(e,n),j(e,n,t,r.attributes,a),H(e,n,t,r.uniforms,a,!1),q(e,n,n,t)}function J(e,n,t,r){I(e,n);var a=t.contextDep,i=n.def(),o=n.def();e.shared.props=o,e.batchId=i;var s=e.scope(),f=e.scope();function l(e){return e.contextDep&&a||e.propDep}function c(e){return!l(e)}if(n(s.entry,"for(",i,"=0;",i,"<","a1",";++",i,"){",o,"=","a0","[",i,"];",f,"}",s.exit),t.needsContext&&L(e,f,t.context),t.needsFramebuffer&&N(e,f,t.framebuffer),B(e,f,t.state,l),t.profile&&l(t.profile)&&K(e,f,t,!1,!0),r)t.useVAO?t.drawVAO?l(t.drawVAO)?f(e.shared.vao,".setVAO(",t.drawVAO.append(e,f),");"):s(e.shared.vao,".setVAO(",t.drawVAO.append(e,s),");"):s(e.shared.vao,".setVAO(",e.shared.vao,".targetVAO);"):(s(e.shared.vao,".setVAO(null);"),j(e,s,t,r.attributes,c),j(e,f,t,r.attributes,l)),H(e,s,t,r.uniforms,c,!1),H(e,f,t,r.uniforms,l,!0),q(e,s,f,t);else{var u=e.global.def("{}"),d=t.shader.progVar.append(e,f),p=f.def(d,".id"),m=f.def(u,"[",p,"]");f(e.shared.gl,".useProgram(",d,".program);","if(!",m,"){",m,"=",u,"[",p,"]=",e.link(function(n){return W(X,e,t,n,2)}),"(",d,");}",m,".call(this,a0[",i,"],",i,");")}}function ee(e,n,t){var r=n.static[t];if(r&&function(e){if(!("object"!=typeof e||Z(e))){for(var n=Object.keys(e),t=0;t<n.length;++t)if(A(e[n[t]]))return!0;return!1}}(r)){var a=e.global,i=Object.keys(r),o=!1,s=!1,f=!1,l=e.global.def("{}");i.forEach(function(n){var t=r[n];if(A(t)){"function"==typeof t&&(t=r[n]=z(t));var i=nz(t,null);o=o||i.thisDep,f=f||i.propDep,s=s||i.contextDep}else{switch(a(l,".",n,"="),typeof t){case"number":a(t);break;case"string":a('"',t,'"');break;case"object":Array.isArray(t)&&a("[",t.join(),"]");break;default:a(e.link(t))}a(";")}}),n.dynamic[t]=new S(4,{thisDep:o,contextDep:s,propDep:f,ref:l,append:function(e,n){i.forEach(function(t){var a=r[t];if(A(a)){var i=e.invoke(n,a);n(l,".",t,"=",i,";")}})}}),delete n.static[t]}}return{next:M,current:w,procs:function(){var e,n=P(),t=n.proc("poll"),i=n.proc("refresh"),o=n.block();t(o),i(o);var s=n.shared,f=s.gl,l=s.next,c=s.current;o(c,".dirty=false;"),N(n,t),N(n,i,null,!0),b&&(e=n.link(b)),r.oes_vertex_array_object&&i(n.link(r.oes_vertex_array_object),".bindVertexArrayOES(null);");for(var u=0;u<a.maxAttributes;++u){var d=i.def(s.attributes,"[",u,"]"),p=n.cond(d,".buffer");p.then(f,".enableVertexAttribArray(",u,");",f,".bindBuffer(",34962,",",d,".buffer.buffer);",f,".vertexAttribPointer(",u,",",d,".size,",d,".type,",d,".normalized,",d,".stride,",d,".offset);").else(f,".disableVertexAttribArray(",u,");",f,".vertexAttrib4f(",u,",",d,".x,",d,".y,",d,".z,",d,".w);",d,".buffer=null;"),i(p),b&&i(e,".vertexAttribDivisorANGLE(",u,",",d,".divisor);")}return i(n.shared.vao,".currentVAO=null;",n.shared.vao,".setVAO(",n.shared.vao,".targetVAO);"),Object.keys(F).forEach(function(e){var r=F[e],a=o.def(l,".",e),s=n.block();s("if(",a,"){",f,".enable(",r,")}else{",f,".disable(",r,")}",c,".",e,"=",a,";"),i(s),t("if(",a,"!==",c,".",e,"){",s,"}")}),Object.keys(O).forEach(function(e){var r,a,s=O[e],u=w[e],d=n.block();if(d(f,".",s,"("),Z(u)){var p=u.length;r=n.global.def(l,".",e),a=n.global.def(c,".",e),d(k(p,function(e){return r+"["+e+"]"}),");",k(p,function(e){return a+"["+e+"]="+r+"["+e+"];"}).join("")),t("if(",k(p,function(e){return r+"["+e+"]!=="+a+"["+e+"]"}).join("||"),"){",d,"}")}else r=o.def(l,".",e),a=o.def(c,".",e),d(r,");",c,".",e,"=",r,";"),t("if(",r,"!==",a,"){",d,"}");i(d)}),n.compile()}(),compile:function(e,s,l,d,p){var m=P();m.stats=m.link(p),Object.keys(s.static).forEach(function(e){ee(m,s,e)}),nv.forEach(function(n){ee(m,e,n)});var v=function(e,n,s,l,d){var p,m,v,x,y,w,S,M,A,z,F,O,E=e.static,D=e.dynamic;_.optional(function(){var e=[e9,e7,ne,nn,nt,na,nr,ni,e8,"vao"].concat(T);function n(n){Object.keys(n).forEach(function(n){_.command(e.indexOf(n)>=0,'unknown parameter "'+n+'"',d.commandStr)})}n(E),n(D)});var U=function(e,n){var t=e.static;if("string"==typeof t[ne]&&"string"==typeof t[e7]){if(Object.keys(n.dynamic).length>0)return null;var r=n.static,a=Object.keys(r);if(a.length>0&&"number"==typeof r[a[0]]){for(var i=[],o=0;o<a.length;++o)_("number"==typeof r[a[o]],"must specify all vertex attribute locations when using vaos"),i.push([0|r[a[o]],a[o]]);return i}}return null}(e,n),V=function(e,n){var t=e.static,r=e.dynamic;if(e9 in t){var a=t[e9];return a?(a=f.getFramebuffer(a),_.command(a,"invalid framebuffer object"),nA(function(e,n){var t=e.link(a),r=e.shared;n.set(r.framebuffer,".next",t);var i=r.context;return n.set(i,"."+nf,t+".width"),n.set(i,"."+nl,t+".height"),t})):nA(function(e,n){var t=e.shared;n.set(t.framebuffer,".next","null");var r=t.context;return n.set(r,"."+nf,r+"."+np),n.set(r,"."+nl,r+"."+nm),"null"})}if(!(e9 in r))return null;var i=r[e9];return nz(i,function(e,n){var t=e.invoke(n,i),r=e.shared,a=r.framebuffer,o=n.def(a,".getFramebuffer(",t,")");_.optional(function(){e.assert(n,"!"+t+"||"+o,"invalid framebuffer object")}),n.set(a,".next",o);var s=r.context;return n.set(s,"."+nf,o+"?"+o+".width:"+s+"."+np),n.set(s,"."+nl,o+"?"+o+".height:"+s+"."+nm),o})}(e,0),R=function(e,n,t){var r=e.static,a=e.dynamic;function i(e){if(e in r){var i,o,s=r[e];_.commandType(s,"object","invalid "+e,t.commandStr);var f=!0,l=0|s.x,c=0|s.y;return"width"in s?(i=0|s.width,_.command(i>=0,"invalid "+e,t.commandStr)):f=!1,"height"in s?(o=0|s.height,_.command(o>=0,"invalid "+e,t.commandStr)):f=!1,new nM(!f&&n&&n.thisDep,!f&&n&&n.contextDep,!f&&n&&n.propDep,function(e,n){var t=e.shared.context,r=i;"width"in s||(r=n.def(t,".",nf,"-",l));var a=o;return"height"in s||(a=n.def(t,".",nl,"-",c)),[l,c,r,a]})}if(e in a){var u=a[e],d=nz(u,function(n,t){var r=n.invoke(t,u);_.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)});var a=n.shared.context,i=t.def(r,".x|0"),o=t.def(r,".y|0"),s=t.def('"width" in ',r,"?",r,".width|0:","(",a,".",nf,"-",i,")"),f=t.def('"height" in ',r,"?",r,".height|0:","(",a,".",nl,"-",o,")");return _.optional(function(){n.assert(t,s+">=0&&"+f+">=0","invalid "+e)}),[i,o,s,f]});return n&&(d.thisDep=d.thisDep||n.thisDep,d.contextDep=d.contextDep||n.contextDep,d.propDep=d.propDep||n.propDep),d}return n?new nM(n.thisDep,n.contextDep,n.propDep,function(e,n){var t=e.shared.context;return[0,0,n.def(t,".",nf),n.def(t,".",nl)]}):null}var o=i(e6);if(o){var s=o;o=new nM(o.thisDep,o.contextDep,o.propDep,function(e,n){var t=s.append(e,n),r=e.shared.context;return n.set(r,"."+nc,t[2]),n.set(r,"."+nu,t[3]),t})}return{viewport:o,scissor_box:i(e4)}}(e,V,d),P=function(e,n){var t=e.static,r=e.dynamic,a={},i=!1,s=function(){if("vao"in t){var e=t.vao;return null!==e&&null===c.getVAO(e)&&(e=c.createVAO(e)),i=!0,a.vao=e,nA(function(n){var t=c.getVAO(e);return t?n.link(t):"null"})}if("vao"in r){i=!0;var n=r.vao;return nz(n,function(e,t){var r=e.invoke(t,n);return t.def(e.shared.vao+".getVAO("+r+")")})}return null}(),f=!1,l=function(){if(nn in t){var e=t[nn];if(a.elements=e,nw(e)){var l=a.elements=o.create(e,!0);e=o.getElements(l),f=!0}else e&&(e=o.getElements(e),f=!0,_.command(e,"invalid elements",n.commandStr));var c=nA(function(n,t){if(e){var r=n.link(e);return n.ELEMENTS=r,r}return n.ELEMENTS=null,null});return c.value=e,c}if(nn in r){f=!0;var u=r[nn];return nz(u,function(e,n){var t=e.shared,r=t.isBufferArgs,a=t.elements,i=e.invoke(n,u),o=n.def("null"),s=n.def(r,"(",i,")"),f=e.cond(s).then(o,"=",a,".createStream(",i,");").else(o,"=",a,".getElements(",i,");");return _.optional(function(){e.assert(f.else,"!"+i+"||"+o,"invalid elements")}),n.entry(f),n.exit(e.cond(s).then(a,".destroyStream(",o,");")),e.ELEMENTS=o,o})}return i?new nM(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.elements+".getElements("+e.shared.vao+".currentVAO.elements):null")}):null}();function u(e,o){if(e in t){var l=0|t[e];return o?a.offset=l:a.instances=l,_.command(!o||l>=0,"invalid "+e,n.commandStr),nA(function(e,n){return o&&(e.OFFSET=l),l})}if(e in r){var c=r[e];return nz(c,function(n,t){var r=n.invoke(t,c);return o&&(n.OFFSET=r,_.optional(function(){n.assert(t,r+">=0","invalid "+e)})),r})}if(o){if(f)return nA(function(e,n){return e.OFFSET=0,0});else if(i)return new nM(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.offset:0")})}else if(i)return new nM(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.instances:-1")});return null}var d=u(na,!0),p=function(){if(nt in t){var e=t[nt];return a.primitive=e,_.commandParameter(e,Y,"invalid primitve",n.commandStr),nA(function(n,t){return Y[e]})}if(nt in r){var o=r[nt];return nz(o,function(e,n){var t=e.constants.primTypes,r=e.invoke(n,o);return _.optional(function(){e.assert(n,r+" in "+t,"invalid primitive, must be one of "+Object.keys(Y))}),n.def(t,"[",r,"]")})}if(f)if(!nT(l))return new nM(l.thisDep,l.contextDep,l.propDep,function(e,n){var t=e.ELEMENTS;return n.def(t,"?",t,".primType:",4)});else if(l.value)return nA(function(e,n){return n.def(e.ELEMENTS,".primType")});else return nA(function(){return 4});return i?new nM(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.primitive:4")}):null}(),m=function(){if(nr in t){var e=0|t[nr];return a.count=e,_.command("number"==typeof e&&e>=0,"invalid vertex count",n.commandStr),nA(function(){return e})}if(nr in r){var o=r[nr];return nz(o,function(e,n){var t=e.invoke(n,o);return _.optional(function(){e.assert(n,"typeof "+t+'==="number"&&'+t+">=0&&"+t+"===("+t+"|0)","invalid vertex count")}),t})}if(f)if(nT(l))if(l)if(d)return new nM(d.thisDep,d.contextDep,d.propDep,function(e,n){var t=n.def(e.ELEMENTS,".vertCount-",e.OFFSET);return _.optional(function(){e.assert(n,t+">=0","invalid vertex offset/element buffer too small")}),t});else return nA(function(e,n){return n.def(e.ELEMENTS,".vertCount")});else{var c=nA(function(){return -1});return _.optional(function(){c.MISSING=!0}),c}else{var u=new nM(l.thisDep||d.thisDep,l.contextDep||d.contextDep,l.propDep||d.propDep,function(e,n){var t=e.ELEMENTS;return e.OFFSET?n.def(t,"?",t,".vertCount-",e.OFFSET,":-1"):n.def(t,"?",t,".vertCount:-1")});return _.optional(function(){u.DYNAMIC=!0}),u}return i?new nM(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao,".currentVAO?",e.shared.vao,".currentVAO.count:-1")}):null}();return{elements:l,primitive:p,count:m,instances:u(ni,!1),offset:d,vao:s,vaoActive:i,elementsActive:f,static:a}}(e,d),L=(p=e.static,m=e.dynamic,v={},T.forEach(function(e){var n=C(e);function t(t,r){if(e in p){var a=t(p[e]);v[n]=nA(function(){return a})}else if(e in m){var i=m[e];v[n]=nz(i,function(e,n){return r(e,n,e.invoke(n,i))})}}switch(e){case eK:case eV:case eU:case eZ:case eN:case e5:case eW:case eQ:case eX:case eI:return t(function(n){return _.commandType(n,"boolean",e,d.commandStr),n},function(n,t,r){return _.optional(function(){n.assert(t,"typeof "+r+'==="boolean"',"invalid flag "+e,n.commandStr)}),r});case eG:return t(function(n){return _.commandParameter(n,nb,"invalid "+e,d.commandStr),nb[n]},function(n,t,r){var a=n.constants.compareFuncs;return _.optional(function(){n.assert(t,r+" in "+a,"invalid "+e+", must be one of "+Object.keys(nb))}),t.def(a,"[",r,"]")});case eB:return t(function(e){return _.command(Z(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&e[0]<=e[1],"depth range is 2d array",d.commandStr),e},function(e,n,t){return _.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===2&&typeof "+t+'[0]==="number"&&typeof '+t+'[1]==="number"&&'+t+"[0]<="+t+"[1]","depth range must be a 2d array")}),[n.def("+",t,"[0]"),n.def("+",t,"[1]")]});case eL:return t(function(e){_.commandType(e,"object","blend.func",d.commandStr);var t="srcRGB"in e?e.srcRGB:e.src,r="srcAlpha"in e?e.srcAlpha:e.src,a="dstRGB"in e?e.dstRGB:e.dst,i="dstAlpha"in e?e.dstAlpha:e.dst;return _.commandParameter(t,nh,n+".srcRGB",d.commandStr),_.commandParameter(r,nh,n+".srcAlpha",d.commandStr),_.commandParameter(a,nh,n+".dstRGB",d.commandStr),_.commandParameter(i,nh,n+".dstAlpha",d.commandStr),_.command(-1===ng.indexOf(t+", "+a),"unallowed blending combination (srcRGB, dstRGB) = ("+t+", "+a+")",d.commandStr),[nh[t],nh[a],nh[r],nh[i]]},function(n,t,r){var a=n.constants.blendFuncs;function i(i,o){var s=t.def('"',i,o,'" in ',r,"?",r,".",i,o,":",r,".",i);return _.optional(function(){n.assert(t,s+" in "+a,"invalid "+e+"."+i+o+", must be one of "+Object.keys(nh))}),s}_.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid blend func, must be an object")});var o=i("src","RGB"),s=i("dst","RGB");_.optional(function(){var e=n.constants.invalidBlendCombinations;n.assert(t,e+".indexOf("+o+'+", "+'+s+") === -1 ","unallowed blending combination for (srcRGB, dstRGB)")});var f=t.def(a,"[",o,"]"),l=t.def(a,"[",i("src","Alpha"),"]");return[f,t.def(a,"[",s,"]"),l,t.def(a,"[",i("dst","Alpha"),"]")]});case eP:return t(function(n){return"string"==typeof n?(_.commandParameter(n,g,"invalid "+e,d.commandStr),[g[n],g[n]]):"object"==typeof n?(_.commandParameter(n.rgb,g,e+".rgb",d.commandStr),_.commandParameter(n.alpha,g,e+".alpha",d.commandStr),[g[n.rgb],g[n.alpha]]):void _.commandRaise("invalid blend.equation",d.commandStr)},function(n,t,r){var a=n.constants.blendEquations,i=t.def(),o=t.def(),s=n.cond("typeof ",r,'==="string"');return _.optional(function(){function t(e,t,r){n.assert(e,r+" in "+a,"invalid "+t+", must be one of "+Object.keys(g))}t(s.then,e,r),n.assert(s.else,r+"&&typeof "+r+'==="object"',"invalid "+e),t(s.else,e+".rgb",r+".rgb"),t(s.else,e+".alpha",r+".alpha")}),s.then(i,"=",o,"=",a,"[",r,"];"),s.else(i,"=",a,"[",r,".rgb];",o,"=",a,"[",r,".alpha];"),t(s),[i,o]});case eR:return t(function(e){return _.command(Z(e)&&4===e.length,"blend.color must be a 4d array",d.commandStr),k(4,function(n){return+e[n]})},function(e,n,t){return _.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===4","blend.color must be a 4d array")}),k(4,function(e){return n.def("+",t,"[",e,"]")})});case e0:return t(function(e){return _.commandType(e,"number",n,d.commandStr),0|e},function(e,n,t){return _.optional(function(){e.assert(n,"typeof "+t+'==="number"',"invalid stencil.mask")}),n.def(t,"|0")});case e1:return t(function(t){_.commandType(t,"object",n,d.commandStr);var r=t.cmp||"keep",a=t.ref||0,i="mask"in t?t.mask:-1;return _.commandParameter(r,nb,e+".cmp",d.commandStr),_.commandType(a,"number",e+".ref",d.commandStr),_.commandType(i,"number",e+".mask",d.commandStr),[nb[r],a,i]},function(e,n,t){var r=e.constants.compareFuncs;return _.optional(function(){function a(){e.assert(n,Array.prototype.join.call(arguments,""),"invalid stencil.func")}a(t+"&&typeof ",t,'==="object"'),a('!("cmp" in ',t,")||(",t,".cmp in ",r,")")}),[n.def('"cmp" in ',t,"?",r,"[",t,".cmp]",":",7680),n.def(t,".ref|0"),n.def('"mask" in ',t,"?",t,".mask|0:-1")]});case e2:case e3:return t(function(t){_.commandType(t,"object",n,d.commandStr);var r=t.fail||"keep",a=t.zfail||"keep",i=t.zpass||"keep";return _.commandParameter(r,nx,e+".fail",d.commandStr),_.commandParameter(a,nx,e+".zfail",d.commandStr),_.commandParameter(i,nx,e+".zpass",d.commandStr),[e===e3?1029:1028,nx[r],nx[a],nx[i]]},function(n,t,r){var a=n.constants.stencilOps;function i(i){return _.optional(function(){n.assert(t,'!("'+i+'" in '+r+")||("+r+"."+i+" in "+a+")","invalid "+e+"."+i+", must be one of "+Object.keys(nx))}),t.def('"',i,'" in ',r,"?",a,"[",r,".",i,"]:",7680)}return _.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)}),[e===e3?1029:1028,i("fail"),i("zfail"),i("zpass")]});case eY:return t(function(e){_.commandType(e,"object",n,d.commandStr);var t=0|e.factor,r=0|e.units;return _.commandType(t,"number",n+".factor",d.commandStr),_.commandType(r,"number",n+".units",d.commandStr),[t,r]},function(n,t,r){return _.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)}),[t.def(r,".factor|0"),t.def(r,".units|0")]});case ej:return t(function(e){var t=0;return"front"===e?t=1028:"back"===e&&(t=1029),_.command(!!t,n,d.commandStr),t},function(e,n,t){return _.optional(function(){e.assert(n,t+'==="front"||'+t+'==="back"',"invalid cull.face")}),n.def(t,'==="front"?',1028,":",1029)});case eq:return t(function(e){return _.command("number"==typeof e&&e>=a.lineWidthDims[0]&&e<=a.lineWidthDims[1],"invalid line width, must be a positive number between "+a.lineWidthDims[0]+" and "+a.lineWidthDims[1],d.commandStr),e},function(e,n,t){return _.optional(function(){e.assert(n,"typeof "+t+'==="number"&&'+t+">="+a.lineWidthDims[0]+"&&"+t+"<="+a.lineWidthDims[1],"invalid line width")}),t});case eH:return t(function(e){return _.commandParameter(e,n_,n,d.commandStr),n_[e]},function(e,n,t){return _.optional(function(){e.assert(n,t+'==="cw"||'+t+'==="ccw"',"invalid frontFace, must be one of cw,ccw")}),n.def(t+'==="cw"?2304:2305')});case e$:return t(function(e){return _.command(Z(e)&&4===e.length,"color.mask must be length 4 array",d.commandStr),e.map(function(e){return!!e})},function(e,n,t){return _.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===4","invalid color.mask")}),k(4,function(e){return"!!"+t+"["+e+"]"})});case eJ:return t(function(e){_.command("object"==typeof e&&e,n,d.commandStr);var t="value"in e?e.value:1,r=!!e.invert;return _.command("number"==typeof t&&t>=0&&t<=1,"sample.coverage.value must be a number between 0 and 1",d.commandStr),[t,r]},function(e,n,t){return _.optional(function(){e.assert(n,t+"&&typeof "+t+'==="object"',"invalid sample.coverage")}),[n.def('"value" in ',t,"?+",t,".value:1"),n.def("!!",t,".invert")]})}}),v),N=function(e,n,r){var a,i=e.static,o=e.dynamic;function s(e){if(e in i){var n=t.id(i[e]);_.optional(function(){u.shader(ny[e],n,_.guessCommand())});var r=nA(function(){return n});return r.id=n,r}if(e in o){var a=o[e];return nz(a,function(n,t){var r=n.invoke(t,a),i=t.def(n.shared.strings,".id(",r,")");return _.optional(function(){t(n.shared.shader,".shader(",ny[e],",",i,",",n.command,");")}),i})}return null}var f=s(ne),l=s(e7),c=null;return nT(f)&&nT(l)?(c=u.program(l.id,f.id,null,r),a=nA(function(e,n){return e.link(c)})):a=new nM(f&&f.thisDep||l&&l.thisDep,f&&f.contextDep||l&&l.contextDep,f&&f.propDep||l&&l.propDep,function(e,n){var t,r,a=e.shared.shader;t=f?f.append(e,n):n.def(a,".",ne),r=l?l.append(e,n):n.def(a,".",e7);var i=a+".program("+r+","+t;return _.optional(function(){i+=","+e.command}),n.def(i+")")}),{frag:f,vert:l,progVar:a,program:c}}(e,0,U);function G(e){var n=R[e];n&&(L[e]=n)}G(e6),G(C(e4));var B=Object.keys(L).length>0,I={framebuffer:V,draw:P,shader:N,state:L,dirty:B,scopeVAO:null,drawVAO:null,useVAO:!1,attributes:{}};if(I.profile=function(e){var n,t=e.static,r=e.dynamic;if(e8 in t){var a=!!t[e8];(n=nA(function(e,n){return a})).enable=a}else if(e8 in r){var i=r[e8];n=nz(i,function(e,n){return e.invoke(n,i)})}return n}(e,d),x=s.static,y=s.dynamic,w={},Object.keys(x).forEach(function(e){var n,t=x[e];if("number"==typeof t||"boolean"==typeof t)n=nA(function(){return t});else if("function"==typeof t){var r=t._reglType;"texture2d"===r||"textureCube"===r?n=nA(function(e){return e.link(t)}):"framebuffer"===r||"framebufferCube"===r?(_.command(t.color.length>0,'missing color attachment for framebuffer sent to uniform "'+e+'"',d.commandStr),n=nA(function(e){return e.link(t.color[0])})):_.commandRaise('invalid data for uniform "'+e+'"',d.commandStr)}else Z(t)?n=nA(function(n){return n.global.def("[",k(t.length,function(r){return _.command("number"==typeof t[r]||"boolean"==typeof t[r],"invalid uniform "+e,n.commandStr),t[r]}),"]")}):_.commandRaise('invalid or missing data for uniform "'+e+'"',d.commandStr);n.value=t,w[e]=n}),Object.keys(y).forEach(function(e){var n=y[e];w[e]=nz(n,function(e,t){return e.invoke(t,n)})}),I.uniforms=w,I.drawVAO=I.scopeVAO=P.vao,!I.drawVAO&&N.program&&!U&&r.angle_instanced_arrays&&P.static.elements){var K=!0,j=N.program.attributes.map(function(e){var t=n.static[e];return K=K&&!!t,t});if(K&&j.length>0){var H=c.getVAO(c.createVAO({attributes:j,elements:P.static.elements}));I.drawVAO=new nM(null,null,null,function(e,n){return e.link(H)}),I.useVAO=!0}}return U?I.useVAO=!0:(S=n.static,M=n.dynamic,A={},Object.keys(S).forEach(function(e){var n=S[e],r=t.id(e),a=new h;if(nw(n))a.state=1,a.buffer=i.getBuffer(i.create(n,34962,!1,!0)),a.type=0;else{var o=i.getBuffer(n);if(o)a.state=1,a.buffer=o,a.type=0;else if(_.command("object"==typeof n&&n,"invalid data for attribute "+e,d.commandStr),"constant"in n){var s=n.constant;a.buffer="null",a.state=2,"number"==typeof s?a.x=s:(_.command(Z(s)&&s.length>0&&s.length<=4,"invalid constant for attribute "+e,d.commandStr),eD.forEach(function(e,n){n<s.length&&(a[e]=s[n])}))}else{o=nw(n.buffer)?i.getBuffer(i.create(n.buffer,34962,!1,!0)):i.getBuffer(n.buffer),_.command(!!o,'missing buffer for attribute "'+e+'"',d.commandStr);var f=0|n.offset;_.command(f>=0,'invalid offset for attribute "'+e+'"',d.commandStr);var l=0|n.stride;_.command(l>=0&&l<256,'invalid stride for attribute "'+e+'", must be integer betweeen [0, 255]',d.commandStr);var c=0|n.size;_.command(!("size"in n)||c>0&&c<=4,'invalid size for attribute "'+e+'", must be 1,2,3,4',d.commandStr);var u=!!n.normalized,p=0;"type"in n&&(_.commandParameter(n.type,$,"invalid type for attribute "+e,d.commandStr),p=$[n.type]);var m=0|n.divisor;_.optional(function(){"divisor"in n&&(_.command(0===m||b,'cannot specify divisor for attribute "'+e+'", instancing not supported',d.commandStr),_.command(m>=0,'invalid divisor for attribute "'+e+'"',d.commandStr));var t=d.commandStr,r=["buffer","offset","divisor","normalized","type","size","stride"];Object.keys(n).forEach(function(n){_.command(r.indexOf(n)>=0,'unknown parameter "'+n+'" for attribute pointer "'+e+'" (valid parameters are '+r+")",t)})}),a.buffer=o,a.state=1,a.size=c,a.normalized=u,a.type=p||o.dtype,a.offset=f,a.stride=l,a.divisor=m}}A[e]=nA(function(e,n){var t=e.attribCache;if(r in t)return t[r];var i={isStream:!1};return Object.keys(a).forEach(function(e){i[e]=a[e]}),a.buffer&&(i.buffer=e.link(a.buffer),i.type=i.type||i.buffer+".dtype"),t[r]=i,i})}),Object.keys(M).forEach(function(e){var n=M[e];A[e]=nz(n,function(t,r){var a=t.invoke(r,n),i=t.shared,o=t.constants,s=i.isBufferArgs,f=i.buffer;_.optional(function(){t.assert(r,a+"&&(typeof "+a+'==="object"||typeof '+a+'==="function")&&('+s+"("+a+")||"+f+".getBuffer("+a+")||"+f+".getBuffer("+a+".buffer)||"+s+"("+a+'.buffer)||("constant" in '+a+"&&(typeof "+a+'.constant==="number"||'+i.isArrayLike+"("+a+".constant))))",'invalid dynamic attribute "'+e+'"')});var l={isStream:r.def(!1)},c=new h;c.state=1,Object.keys(c).forEach(function(e){l[e]=r.def(""+c[e])});var u=l.buffer,d=l.type;function p(e){r(l[e],"=",a,".",e,"|0;")}return r("if(",s,"(",a,")){",l.isStream,"=true;",u,"=",f,".createStream(",34962,",",a,");",d,"=",u,".dtype;","}else{",u,"=",f,".getBuffer(",a,");","if(",u,"){",d,"=",u,".dtype;",'}else if("constant" in ',a,"){",l.state,"=",2,";","if(typeof "+a+'.constant === "number"){',l[eD[0]],"=",a,".constant;",eD.slice(1).map(function(e){return l[e]}).join("="),"=0;","}else{",eD.map(function(e,n){return l[e]+"="+a+".constant.length>"+n+"?"+a+".constant["+n+"]:0;"}).join(""),"}}else{","if(",s,"(",a,".buffer)){",u,"=",f,".createStream(",34962,",",a,".buffer);","}else{",u,"=",f,".getBuffer(",a,".buffer);","}",d,'="type" in ',a,"?",o.glTypes,"[",a,".type]:",u,".dtype;",l.normalized,"=!!",a,".normalized;"),p("size"),p("offset"),p("stride"),p("divisor"),r("}}"),r.exit("if(",l.isStream,"){",f,".destroyStream(",u,");","}"),l})}),I.attributes=A),z=l.static,F=l.dynamic,O={},Object.keys(z).forEach(function(e){var n=z[e];O[e]=nA(function(e,t){return"number"==typeof n||"boolean"==typeof n?""+n:e.link(n)})}),Object.keys(F).forEach(function(e){var n=F[e];O[e]=nz(n,function(e,t){return e.invoke(t,n)})}),I.context=O,I}(e,s,l,d,m);!function(e,n){var t=e.proc("draw",1);I(e,t),L(e,t,n.context),N(e,t,n.framebuffer),G(e,t,n),B(e,t,n.state),K(e,t,n,!1,!0);var r=n.shader.progVar.append(e,t);if(t(e.shared.gl,".useProgram(",r,".program);"),n.shader.program)Q(e,t,n,n.shader.program);else{t(e.shared.vao,".setVAO(null);");var a=e.global.def("{}"),i=t.def(r,".id"),o=t.def(a,"[",i,"]");t(e.cond(o).then(o,".call(this,a0);").else(o,"=",a,"[",i,"]=",e.link(function(t){return W(Q,e,n,t,1)}),"(",r,");",o,".call(this,a0);"))}Object.keys(n.state).length>0&&t(e.shared.current,".dirty=true;"),e.shared.vao&&t(e.shared.vao,".setVAO(null);")}(m,v);var x=m.proc("scope",3);m.batchId="a2";var y=m.shared,w=y.current;function S(e){var n=v.shader[e];n&&x.set(y.shader,"."+e,n.append(m,x))}return L(m,x,v.context),v.framebuffer&&v.framebuffer.append(m,x),nS(Object.keys(v.state)).forEach(function(e){var n=v.state[e].append(m,x);Z(n)?n.forEach(function(n,t){x.set(m.next[e],"["+t+"]",n)}):x.set(y.next,"."+e,n)}),K(m,x,v,!0,!0),[nn,na,nr,ni,nt].forEach(function(e){var n=v.draw[e];n&&x.set(y.draw,"."+e,""+n.append(m,x))}),Object.keys(v.uniforms).forEach(function(e){var n=v.uniforms[e].append(m,x);Array.isArray(n)&&(n="["+n.join()+"]"),x.set(y.uniforms,"["+t.id(e)+"]",n)}),Object.keys(v.attributes).forEach(function(e){var n=v.attributes[e].append(m,x),t=m.scopeAttrib(e);Object.keys(new h).forEach(function(e){x.set(t,"."+e,n[e])})}),v.scopeVAO&&x.set(y.vao,".targetVAO",v.scopeVAO.append(m,x)),S(e7),S(ne),Object.keys(v.state).length>0&&(x(w,".dirty=true;"),x.exit(w,".dirty=true;")),x("a1(",m.shared.context,",a0,",m.batchId,");"),!function(e,n){var t=e.proc("batch",2);e.batchId="0",I(e,t);var r=!1,a=!0;Object.keys(n.context).forEach(function(e){r=r||n.context[e].propDep}),r||(L(e,t,n.context),a=!1);var i=n.framebuffer,o=!1;function s(e){return e.contextDep&&r||e.propDep}i?(i.propDep?r=o=!0:i.contextDep&&r&&(o=!0),o||N(e,t,i)):N(e,t,null),n.state.viewport&&n.state.viewport.propDep&&(r=!0),G(e,t,n),B(e,t,n.state,function(e){return!s(e)}),n.profile&&s(n.profile)||K(e,t,n,!1,"a1"),n.contextDep=r,n.needsContext=a,n.needsFramebuffer=o;var f=n.shader.progVar;if(f.contextDep&&r||f.propDep)J(e,t,n,null);else{var l=f.append(e,t);if(t(e.shared.gl,".useProgram(",l,".program);"),n.shader.program)J(e,t,n,n.shader.program);else{t(e.shared.vao,".setVAO(null);");var c=e.global.def("{}"),u=t.def(l,".id"),d=t.def(c,"[",u,"]");t(e.cond(d).then(d,".call(this,a0,a1);").else(d,"=",c,"[",u,"]=",e.link(function(t){return W(J,e,n,t,2)}),"(",l,");",d,".call(this,a0,a1);"))}}Object.keys(n.state).length>0&&t(e.shared.current,".dirty=true;"),e.shared.vao&&t(e.shared.vao,".setVAO(null);")}(m,v),n(m.compile(),{destroy:function(){v.shader.program.destroy()}})}}}(o,c,d,x,y,w,0,I,{},M,D,b,g,p,i),X=function(n,t,r,a,i,o,s){function f(f){null===t.next?(_(i.preserveDrawingBuffer,'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'),l=5121):(_(null!==t.next.colorAttachments[0].texture,"You cannot read from a renderbuffer"),l=t.next.colorAttachments[0].texture._texture.type,_.optional(function(){o.oes_texture_float?(_(5121===l||5126===l,"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"),5126===l&&_(s.readFloat,"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float")):_(5121===l,"Reading from a framebuffer is only allowed for the type 'uint8'")}));var l,c=0,u=0,d=a.framebufferWidth,p=a.framebufferHeight,m=null;e(f)?m=f:f&&(_.type(f,"object","invalid arguments to regl.read()"),c=0|f.x,u=0|f.y,_(c>=0&&c<a.framebufferWidth,"invalid x offset for regl.read"),_(u>=0&&u<a.framebufferHeight,"invalid y offset for regl.read"),d=0|(f.width||a.framebufferWidth-c),p=0|(f.height||a.framebufferHeight-u),m=f.data||null),m&&(5121===l?_(m instanceof Uint8Array,"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"):5126===l&&_(m instanceof Float32Array,"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'")),_(d>0&&d+c<=a.framebufferWidth,"invalid width for read pixels"),_(p>0&&p+u<=a.framebufferHeight,"invalid height for read pixels"),r();var v=d*p*4;return m||(5121===l?m=new Uint8Array(v):5126===l&&(m=m||new Float32Array(v))),_.isTypedArray(m,"data buffer for regl.read() must be a typedarray"),_(m.byteLength>=v,"data buffer for regl.read() too small"),n.pixelStorei(3333,4),n.readPixels(c,u,d,p,6408,l,m),m}return function(e){var n;return e&&"framebuffer"in e?(t.setFBO({framebuffer:e.framebuffer},function(){n=f(e)}),n):f(e)}}(o,I,Q.procs.poll,g,s,d,x),ea=Q.next,eu=o.canvas,ed=[],ep=[],ew=[],no=[i.onDestroy],ns=null;function nd(){if(0===ed.length){p&&p.update(),ns=null;return}ns=F.next(nd),nI();for(var e=ed.length-1;e>=0;--e){var n=ed[e];n&&n(g,null,0)}o.flush(),p&&p.update()}function nD(){!ns&&ed.length>0&&(ns=F.next(nd))}function nU(){ns&&(F.cancel(nd),ns=null)}function nV(e){e.preventDefault(),f=!0,nU(),ep.forEach(function(e){e()})}function nR(e){o.getError(),f=!1,l.restore(),D.restore(),y.restore(),U.restore(),B.restore(),I.restore(),M.restore(),p&&p.restore(),Q.procs.refresh(),nD(),ew.forEach(function(e){e()})}function nP(e){function t(e,n){var t={},r={};return Object.keys(e).forEach(function(a){var i=e[a];if(A(i)){r[a]=z(i,a);return}if(n&&Array.isArray(i)){for(var o=0;o<i.length;++o)if(A(i[o])){r[a]=z(i,a);return}}t[a]=i}),{dynamic:r,static:t}}_(!!e,"invalid args to regl({...})"),_.type(e,"object","invalid args to regl({...})");var r=t(e.context||{},!0),a=t(e.uniforms||{},!0),i=t(e.attributes||{},!1),o=t(function(e){var t=n({},e);function r(e){if(e in t){var n=t[e];delete t[e],Object.keys(n).forEach(function(r){t[e+"."+r]=n[r]})}}return delete t.uniforms,delete t.attributes,delete t.context,delete t.vao,"stencil"in t&&t.stencil.op&&(t.stencil.opBack=t.stencil.opFront=t.stencil.op,delete t.stencil.op),r("blend"),r("depth"),r("cull"),r("stencil"),r("polygonOffset"),r("scissor"),r("sample"),"vao"in e&&(t.vao=e.vao),t}(e),!1),s={gpuTime:0,cpuTime:0,count:0},l=Q.compile(o,i,a,r,s),c=l.draw,u=l.batch,d=l.scope,p=[];return n(function(e,n){var t;if(f&&_.raise("context lost"),"function"==typeof e)return d.call(this,null,e,0);if("function"==typeof n)if("number"==typeof e)for(t=0;t<e;++t)d.call(this,null,n,t);else if(!Array.isArray(e))return d.call(this,e,n,0);else for(t=0;t<e.length;++t)d.call(this,e[t],n,t);else if("number"==typeof e){if(e>0)return u.call(this,function(e){for(;p.length<e;)p.push(null);return p}(0|e),0|e)}else if(!Array.isArray(e))return c.call(this,e);else if(e.length)return u.call(this,e,e.length)},{stats:s,destroy:function(){l.destroy()}})}eu&&(eu.addEventListener(nC,nV,!1),eu.addEventListener(nE,nR,!1));var nL=I.setFBO=nP({framebuffer:T.call(null,1,"framebuffer")});function nN(e,n){var t=0;Q.procs.poll();var r=n.color;r&&(o.clearColor(+r[0]||0,+r[1]||0,+r[2]||0,+r[3]||0),t|=16384),"depth"in n&&(o.clearDepth(+n.depth),t|=256),"stencil"in n&&(o.clearStencil(0|n.stencil),t|=1024),_(!!t,"called regl.clear with no buffer specified"),o.clear(t)}function nG(e){return _.type(e,"function","regl.frame() callback must be a function"),ed.push(e),nD(),{cancel:function(){var n=nk(ed,e);_(n>=0,"cannot cancel a frame twice"),ed[n]=function e(){var n=nk(ed,e);ed[n]=ed[ed.length-1],ed.length-=1,ed.length<=0&&nU()}}}}function nB(){var e=ea.viewport,n=ea.scissor_box;e[0]=e[1]=n[0]=n[1]=0,g.viewportWidth=g.framebufferWidth=g.drawingBufferWidth=e[2]=n[2]=o.drawingBufferWidth,g.viewportHeight=g.framebufferHeight=g.drawingBufferHeight=e[3]=n[3]=o.drawingBufferHeight}function nI(){g.tick+=1,g.time=nK(),nB(),Q.procs.poll()}function n$(){U.refresh(),nB(),Q.procs.refresh(),p&&p.update()}function nK(){return(O()-m)/1e3}n$();var nj=n(nP,{clear:function(e){if(_("object"==typeof e&&e,"regl.clear() takes an object as input"),"framebuffer"in e)if(e.framebuffer&&"framebufferCube"===e.framebuffer_reglType)for(var t=0;t<6;++t)nL(n({framebuffer:e.framebuffer.faces[t]},e),nN);else nL(e,nN);else nN(null,e)},prop:T.bind(null,1),context:T.bind(null,2),this:T.bind(null,3),draw:nP({}),buffer:function(e){return y.create(e,34962,!1,!1)},elements:function(e){return w.create(e,!1)},texture:U.create2D,cube:U.createCube,renderbuffer:B.create,framebuffer:I.create,framebufferCube:I.createCube,vao:M.createVAO,attributes:s,frame:nG,on:function(e,n){var t;switch(_.type(n,"function","listener callback must be a function"),e){case"frame":return nG(n);case"lost":t=ep;break;case"restore":t=ew;break;case"destroy":t=no;break;default:_.raise("invalid event, must be one of frame,lost,restore,destroy")}return t.push(n),{cancel:function(){for(var e=0;e<t.length;++e)if(t[e]===n){t[e]=t[t.length-1],t.pop();return}}}},limits:x,hasExtension:function(e){return x.extensions.indexOf(e.toLowerCase())>=0},read:X,destroy:function(){ed.length=0,nU(),eu&&(eu.removeEventListener(nC,nV),eu.removeEventListener(nE,nR)),D.clear(),I.clear(),B.clear(),M.clear(),U.clear(),w.clear(),y.clear(),p&&p.clear(),no.forEach(function(e){e()})},_gl:o,_refresh:n$,poll:function(){nI(),p&&p.update()},now:nK,stats:u});return i.onDone(null,nj),nj}}();const[tT,tA,tz,tF]=eZ("/"),[tO,tC,tE,tk]=eJ(([e,n])=>`${e}=1/${n};`),tD=(e,n)=>e[0]*n[0]+e[1]*n[1]+e[2]*n[2];m(0,(e,n)=>{let t=0;for(let r=e.length;r-- >0;)t+=e[r]*n[r];return t},(e,n)=>e[0]*n[0]+e[1]*n[1],tD,(e,n)=>e[0]*n[0]+e[1]*n[1]+e[2]*n[2]+e[3]*n[3]);const tU=nQ({mode:"srgb",order:["r","g","b","alpha"],from:{abgr32:(e,n)=>{let t;return c(e||[],(255&(t=n[0]))*nG,(t>>>8&255)*nG,(t>>>16&255)*nG,(t>>>24)*nG)},argb32:(e,n)=>n$(e,n[0]),hcy:(e,n)=>{let t=n[0],r=n[1],a=n[2],i=n5(e||n,t,nY(n[3])),o=((e,n=nP)=>tD(e,n))(i);return a<o?r*=a/o:o<1&&(r*=(1-a)/(1-o)),l(i,ez((i[0]-o)*r+a),ez((i[1]-o)*r+a),ez((i[2]-o)*r+a))},hsi:(e,n)=>{let t=(e=nX(e||n,n))[1],r=e[2];if(t<1e-6)return l(e,r,r,r);let a=6*e[0]%6,i=r*(1-t),o=1-Math.abs(a%2-1),s=3*r*t/(1+o),f=s*o+i;switch(s+=i,0|a){case 0:return l(e,s,f,i);case 1:return l(e,f,s,i);case 2:return l(e,i,s,f);case 3:return l(e,i,f,s);case 4:return l(e,f,i,s);case 5:return l(e,s,i,f);default:return l(e,i,i,i)}},hsl:n4,hsv:(e,n)=>{let t=(e=nX(e||n,n))[1],r=e[2];return n5(e,n[0],e[3]),l(e,((e[0]-1)*t+1)*r,((e[1]-1)*t+1)*r,((e[2]-1)*t+1)*r)},rgb:n3},toRgb:(e,n)=>c(e||n,n2(n[0]),n2(n[1]),n2(n[2]),nY(n[3]))});var tV={},tR={},tP={},tL={},tN=tL={};function tG(){throw Error("setTimeout has not been defined")}function tB(){throw Error("clearTimeout has not been defined")}try{r="function"==typeof setTimeout?setTimeout:tG}catch(e){r=tG}try{a="function"==typeof clearTimeout?clearTimeout:tB}catch(e){a=tB}function tI(e){if(r===setTimeout)return setTimeout(e,0);if((r===tG||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(n){try{return r.call(null,e,0)}catch(n){return r.call(this,e,0)}}}var t$=[],tK=!1,tj=-1;function tH(){tK&&i&&(tK=!1,i.length?t$=i.concat(t$):tj=-1,t$.length&&tq())}function tq(){if(!tK){var e=tI(tH);tK=!0;for(var n=t$.length;n;){for(i=t$,t$=[];++tj<n;)i&&i[tj].run();tj=-1,n=t$.length}i=null,tK=!1,function(e){if(a===clearTimeout)return clearTimeout(e);if((a===tB||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(e);try{a(e)}catch(n){try{return a.call(null,e)}catch(n){return a.call(this,e)}}}(e)}}function tW(e,n){this.fun=e,this.array=n}function tY(){}tN.nextTick=function(e){var n=Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];t$.push(new tW(e,n)),1!==t$.length||tK||tI(tq)},tW.prototype.run=function(){this.fun.apply(null,this.array)},tN.title="browser",tN.browser=!0,tN.env={},tN.argv=[],tN.version="",tN.versions={},tN.on=tY,tN.addListener=tY,tN.once=tY,tN.off=tY,tN.removeListener=tY,tN.removeAllListeners=tY,tN.emit=tY,tN.prependListener=tY,tN.prependOnceListener=tY,tN.listeners=function(e){return[]},tN.binding=function(e){throw Error("process.binding is not supported")},tN.cwd=function(){return"/"},tN.chdir=function(e){throw Error("process.chdir is not supported")},tN.umask=function(){return 0},(function(){var e,n,t,r;"undefined"!=typeof performance&&null!==performance&&performance.now?tP=function(){return performance.now()}:null!=tL&&tL.hrtime?(tP=function(){return(e()-r)/1e6},n=tL.hrtime,r=(e=function(){var e;return 1e9*(e=n())[0]+e[1]})()-1e9*tL.uptime()):Date.now?(tP=function(){return Date.now()-t},t=Date.now()):(tP=function(){return new Date().getTime()-t},t=new Date().getTime())}).call(tP);for(var tQ="undefined"==typeof window?s:window,tX=["moz","webkit"],tJ="AnimationFrame",tZ=tQ["request"+tJ],t0=tQ["cancel"+tJ]||tQ["cancelRequest"+tJ],t1=0;!tZ&&t1<tX.length;t1++)tZ=tQ[tX[t1]+"Request"+tJ],t0=tQ[tX[t1]+"Cancel"+tJ]||tQ[tX[t1]+"CancelRequest"+tJ];if(!tZ||!t0){var t2=0,t3=0,t5=[],t4=1e3/60;tZ=function(e){if(0===t5.length){var n=tP(),t=Math.max(0,t4-(n-t2));t2=t+n,setTimeout(function(){var e=t5.slice(0);t5.length=0;for(var n=0;n<e.length;n++)if(!e[n].cancelled)try{e[n].callback(t2)}catch(e){setTimeout(function(){throw e},0)}},Math.round(t))}return t5.push({handle:++t3,callback:e,cancelled:!1}),t3},t0=function(e){for(var n=0;n<t5.length;n++)t5[n].handle===e&&(t5[n].cancelled=!0)}}(tR=function(e){return tZ.call(tQ,e)}).cancel=function(){t0.apply(tQ,arguments)},tR.polyfill=function(e){e||(e=tQ),e.requestAnimationFrame=tZ,e.cancelAnimationFrame=t0};var t6={};t6=s.performance&&s.performance.now?function(){return performance.now()}:Date.now||function(){return+new Date};var t8={},t9={},t7="";t9=function(e,n){if("string"!=typeof e)throw TypeError("expected a string");if(1===n)return e;if(2===n)return e+e;var t=e.length*n;if(o!==e||void 0===o)o=e,t7="";else if(t7.length>=t)return t7.substr(0,t);for(;t>t7.length&&n>1;)1&n&&(t7+=e),n>>=1,e+=e;return t7+=e,t7=t7.substr(0,t)};var re={},rn=Object.getOwnPropertySymbols,rt=Object.prototype.hasOwnProperty,rr=Object.prototype.propertyIsEnumerable;re=!function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;var r=Object.getOwnPropertyNames(n).map(function(e){return n[e]});if("0123456789"!==r.join(""))return!1;var a={};if("abcdefghijklmnopqrst".split("").forEach(function(e){a[e]=e}),"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},a)).join(""))return!1;return!0}catch(e){return!1}}()?function(e,n){for(var t,r,a=function(e){if(null==e)throw TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),i=1;i<arguments.length;i++){for(var o in t=Object(arguments[i]))rt.call(t,o)&&(a[o]=t[o]);if(rn){r=rn(t);for(var s=0;s<r.length;s++)rr.call(t,r[s])&&(a[r[s]]=t[r[s]])}}return a}:Object.assign;var ra={};function ri(e,n){var t={};return t[e]=n,t}function ro(e){return e}function rs(e,n){return e?t9(e,n):""}ra=function(e){return null==e?[]:Array.isArray(e)?e:[e]},t8=function(e,n){function t(e,t){return ra(e).reduce(function(e,r){return e.concat(n.property(r,t))},[])}function r(e,t){return ra(e).reduce(function(e,r){return e.concat(n.value(r,t))},[])}return"number"==typeof(n=re({indent:"",property:ro,value:ro,selector:ro},n)).indent&&(n.indent=t9(" ",n.indent)),ra(e).map(function(e){return function e(a,i){var o="";return Object.keys(a).forEach(function(s){var f,l=a[s];if("string"==typeof(f=l)||Array.isArray(f)&&f.length&&"object"!=typeof f[0]){o+=rl(t(s,l),r(l,s),n.indent,i-1);return}if(Array.isArray(l))return void l.forEach(function(n){o+=e(ri(s,n),i)});ra(s).reduce(function(e,t){return e.concat(n.selector(t,l))},[]).forEach(function(f){var c,u,d;o+=(c=f,u=n.indent,rs(u,i)+c+(u?" ":"")+"{"+rf(u)),Object.keys(l).forEach(function(f){var l,c=a[s][f];"object"!=typeof(l=c)||Array.isArray(l)?o+=rl(t(f,c),r(c,f),n.indent,i):o+=e(ri(f,c),i+1)}),o+=(d=n.indent,rs(d,i)+"}"+rf(d))})}),o}(e,0)}).join(rf(n.indent))};function rf(e){return e?"\n":""}function rl(e,n,t,r){for(var a=rs(t,r+1),i=rf(t),o=t?" ":"",s="",f=0,l=e.length;f<l;f++)for(var c=0,u=n.length;c<u;c++)s+=a+e[f]+(0===e[f].indexOf("@")?" ":":")+o+n[c]+";"+i;return s}tV=function e(n){if(!(this instanceof e))return new e(n);"string"==typeof n&&(n=rc[n]?{position:n}:{container:n}),(n=n||{}).container?"string"==typeof n.container?this.container=document.querySelector(n.container):this.container=n.container:this.container=document.body||document.documentElement,this.element=document.createElement("div"),this.element.className="fps",this.element.innerHTML='<div class="fps-bg"></div><canvas class="fps-canvas"></canvas><span class="fps-text">fps <span class="fps-value">60.0</span></span>',this.container.appendChild(this.element),this.canvas=this.element.querySelector(".fps-canvas"),this.textEl=this.element.querySelector(".fps-text"),this.valueEl=this.element.querySelector(".fps-value"),this.bgEl=this.element.querySelector(".fps-bg");var t=n.css||n.style||"";"object"==typeof t&&(t=t8(t));var r="";r=rc[n.position]||rc["top-left"],this.element.style.cssText="line-height: 1;position: fixed;font-family: Roboto, sans-serif;z-index: 1;font-weight: 300;font-size: small;padding: 1rem;"+r+(n.color?"color:"+n.color:"")+t,this.canvas.style.cssText="position: relative;width: 2em;height: 1em;display: block;float: left;margin-right: .333em;",this.bgEl.style.cssText="position: absolute;height: 1em;width: 2em;background: currentcolor;opacity: .1;",this.canvas.width=parseInt(getComputedStyle(this.canvas).width)||1,this.canvas.height=parseInt(getComputedStyle(this.canvas).height)||1,this.context=this.canvas.getContext("2d");var a=this.context,i=this.canvas.width,o=this.canvas.height,s=0,f=0,l=n.values||Array(this.canvas.width),c=n.period||1e3,u=n.max||100,d=this;tR(function e(){s++;var n=t6();if(n-f>c){f=n,l.push(s/(u*c*.001)),l=l.slice(-i),s=0,a.clearRect(0,0,i,o),a.fillStyle=getComputedStyle(d.canvas).color;for(var t=i;t--;){var r=l[t];if(null==r)break;a.fillRect(t,o-o*r,1,o*r)}d.valueEl.innerHTML=(l[l.length-1]*u).toFixed(1)}tR(e)})};var rc={"top-left":"left: 0; top: 0;","top-right":"right: 0; top: 0;","bottom-right":"right: 0; bottom: 0;","bottom-left":"left: 0; bottom: 0;"},ru={};ru="/** Grid-fade fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\n#if defined(gridFade_output_fade)\n  #define typeHash 0\n  #define typeGauss 1\n\n  #ifndef type\n    #define type typeHash\n  #endif\n\n  #if type == typeGauss\n    #define qualityTap5 0\n    #define qualityTap9 1\n    #define qualityTap13 2\n\n    #ifndef quality\n      #define quality qualityTap5\n    #endif\n  #elif !defined(quality)\n    #define quality 3\n  #endif\n\n  gridFade_useSamples\n  gridFade_useReads_fade\n\n  #ifdef gridFade_splits\n    uniform sampler2D gridFade_states[gridFade_splits];\n  #else\n    uniform sampler2D gridFade_states;\n  #endif\n\n  uniform float gridFade_stepNow;\n  uniform vec4 gridFade_stateShape;\n\n  uniform float fade;\n  uniform float expose;\n  uniform float scale;\n\n  uniform vec4 colorLo;\n  uniform float dt;\n\n  #if type == typeHash\n    uniform float chaos;\n  #endif\n\n  varying vec2 gridFade_uv;\n\n  #if type == typeGauss\n    const vec2 axis = vec2(1, 0);\n    const float passes = 2.0;\n  #else\n    const float passes = 1.0;\n  #endif\n\n  #if type == typeGauss\n    #if quality > qualityTap9\n      vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\n    #elif quality > qualityTap5\n      vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += texture2D(image, uv) * 0.2270270270;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\n    #elif quality > qualityHash\n      vec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3333333333333333) * direction;\n  color += texture2D(image, uv) * 0.29411764705882354;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n  return color; \n}\n\n    #endif\n  #else\n    vec4 sampleFade(vec2 uv) {\n      gridFade_tapState(uv);\n\n      return gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\n    }\n\n    vec3 sampleHash(vec2 uv) { return sampleFade(uv).rgb; }\n\n    highp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n#ifndef TAU\n  #define TAU 6.28318530718\n#endif\n\n//Use last part of hash function to generate new random radius and angle\nvec2 mult(inout vec2 r) {\n  r = fract(r * vec2(12.9898,78.233));\n  return sqrt(r.x + .001) * vec2(sin(r.y * TAU), cos(r.y * TAU));\n}\n\nvec3 blur(vec2 uv, float radius, float aspect, float offset) {\n  vec2 circle = vec2(radius);\n  circle.x *= aspect;\n  vec2 rnd = vec2(random(vec2(uv + offset)));\n\n  vec3 acc = vec3(0.0);\n  for (int i = 0; i < quality; i++) {\n    acc += sampleHash(uv + circle * mult(rnd)).xyz;\n  }\n  return acc / float(quality);\n}\n\nvec3 blur(vec2 uv, float radius, float aspect) {\n  return blur(uv, radius, aspect, 0.0);\n}\n\nvec3 blur(vec2 uv, float radius) {\n  return blur(uv, radius, 1.0);\n}\n\n  #endif\n\n  float when_eq_2281831123(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec2 when_eq_2281831123(vec2 x, vec2 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec3 when_eq_2281831123(vec3 x, vec3 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec4 when_eq_2281831123(vec4 x, vec4 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\n#endif\n\nvoid main() {\n  #if defined(gridFade_output_fade)\n    float end = when_eq_2281831123(fract(gridFade_stepNow/passes), 0.0);\n\n    #if type == typeGauss\n      vec4 to = blur(gridFade_states[0], gridFade_uv, gridFade_stateShape.xy,\n        mix(axis.xy, axis.yx, end)*scale);\n    #else\n      float radius = scale/max(gridFade_stateShape.x, gridFade_stateShape.y);\n      float aspect = gridFade_stateShape.x/gridFade_stateShape.y;\n\n      vec4 to = vec4(blur(gridFade_uv, radius, aspect, chaos),\n        /** @todo Can this extra tap be removed? */\n        sampleFade(gridFade_uv).a);\n    #endif\n\n    gridFade_output_fade =\n      mix(to, mix(to*(1.0+(expose*dt)), colorLo, fade*dt), end);\n  #endif\n}\n";var rd={};rd="/** Grid-fade-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\ngridFade_useSamples\ngridFade_useReads_fade\n\n#ifdef gridFade_splits\n  uniform sampler2D gridFade_states[gridFade_splits];\n#else\n  uniform sampler2D gridFade_states;\n#endif\n\nuniform float gridFade_stepNow;\nuniform vec4 gridFade_stateShape;\n\nvarying vec2 gridFade_uv;\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\nvoid main() {\n  vec2 uv = offsetUV(gridFade_uv, gridFade_stateShape.xy);\n  // vec2 uv = gridFade_uv;\n\n  gridFade_tapState(uv);\n\n  vec4 to = gridFade_data[gridFade_reads_fade_fade].gridFade_channels_fade;\n\n  gl_FragColor = to;\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";var rp={};rp="/** Optical-flow fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D next;\nuniform sampler2D past;\nuniform float gap;\nuniform float lambda;\nuniform float alpha;\nuniform vec2 flip;\nuniform vec4 offset;\nuniform vec2 frameAspect;\nuniform vec2 screenAspect;\n\nvarying vec2 opticalFlow_uv;\n\nfloat when_gt_1540259130(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_2281831123(float x, float y) {\n  return 1.0 - when_gt_1540259130(x, y);\n}\n\nvec2 when_le_2281831123(vec2 x, vec2 y) {\n  return 1.0 - when_gt_1540259130(x, y);\n}\n\nvec3 when_le_2281831123(vec3 x, vec3 y) {\n  return 1.0 - when_gt_1540259130(x, y);\n}\n\nvec4 when_le_2281831123(vec4 x, vec4 y) {\n  return 1.0 - when_gt_1540259130(x, y);\n}\n\n/**\n * Optical flow GLSL module.\n * May work best if the views are pre-processed (e.g: blur).\n *\n * @see https://forum.openframeworks.cc/t/ofxflowtools-optical-flow-fluid-dynamics-and-particles-in-glsl/15470\n * @see https://github.com/moostrik/ofxFlowTools\n * @see https://github.com/diwi/PixelFlow\n * @see http://thomasdiewald.com/blog/?p=2766\n * @see https://adamferriss.com/gush/\n * @see https://github.com/princemio/ofxMIOFlowGLSL/blob/master/src/FlowShader.cpp\n */\n\n#define opticalFlowPixel_extern 0\n#define opticalFlowPixel_normal 1\n#define opticalFlowPixel_luma 2\n#ifndef opticalFlowPixel\n  #define opticalFlowPixel opticalFlowPixel_luma\n#endif\n\n#if opticalFlowPixel == opticalFlowPixel_luma\n  float luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\n  vec4 pixel(sampler2D texture, vec2 uv) {\n    vec4 color = texture2D(texture, uv);\n\n    return vec4(vec3(luma(color)), color.a);\n  }\n#elif opticalFlowPixel == opticalFlowPixel_normal\n  vec4 pixel(sampler2D texture, vec2 uv) { return texture2D(texture, uv); }\n#else\n  // To provide external `pixel` lookup function.\n  vec4 pixel(sampler2D texture, vec2 uv);\n#endif\n\n// @todo Sample mimaps at different LODs/scales to capture wider features.\nvec2 opticalFlow(in vec2 uv, in sampler2D next, in sampler2D past,\n    in float offset, in float lambda) {\n  vec2 off = vec2(offset, 0.0);\n\n  vec4 gradX = (pixel(next, uv+off.xy)-pixel(next, uv-off.xy))+\n    (pixel(past, uv+off.xy)-pixel(past, uv-off.xy));\n\n  vec4 gradY = (pixel(next, uv+off.yx)-pixel(next, uv-off.yx))+\n    (pixel(past, uv+off.yx)-pixel(past, uv-off.yx));\n\n  vec4 gradMag = sqrt((gradX*gradX)+(gradY*gradY)+vec4(lambda));\n\n  vec4 diff = pixel(next, uv)-pixel(past, uv);\n\n  return vec2((diff*(gradX/gradMag)).x, (diff*(gradY/gradMag)).x);\n}\n\nvec2 opticalFlow(in vec2 uv, in sampler2D views[2], in float offset,\n    in float lambda) {\n  return opticalFlow(uv, views[0], views[1], offset, lambda);\n}\n\n// Implementations for each dimension.\n\nfloat aspect(in float size, in float scale) {\n    return scale/size;\n}\n\nvec2 aspect(in vec2 size, in vec2 scale) {\n    return scale/size;\n}\n\nvec3 aspect(in vec3 size, in vec3 scale) {\n    return scale/size;\n}\n\nvec4 aspect(in vec4 size, in vec4 scale) {\n    return scale/size;\n}\n\n// These are for `scale` always `float`:\n\nvec2 aspect(in vec2 size, in float scale) {\n    return aspect(size, vec2(scale));\n}\n\nvec3 aspect(in vec3 size, in float scale) {\n    return aspect(size, vec3(scale));\n}\n\nvec4 aspect(in vec4 size, in float scale) {\n    return aspect(size, vec4(scale));\n}\n\nvec2 aspectCover(in vec2 size) {\n    return aspect(size, min(size.x, size.y));\n}\n\nvec3 aspectCover(in vec3 size) {\n    return aspect(size, min(size.x, min(size.y, size.z)));\n}\n\nvec4 aspectCover(in vec4 size) {\n    return aspect(size, min(size.x, min(size.y, min(size.z, size.w))));\n}\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\n\nvoid main() {\n  vec2 scale = screenAspect*aspectCover(screenAspect/frameAspect);\n  vec2 shift = (screenAspect-scale)*0.5;\n  vec2 uv = clamp((opticalFlow_uv/offset.zw)-offset.xy, v0, v1);\n  vec2 st = fract(uv*flip);\n\n  gl_FragColor.xy =\n    opticalFlow(((st*scale)+shift)/screenAspect, next, past, gap, lambda);\n}\n";var rm={};rm="/**\n * Optical-flow-to-grid fragment shader.\n *\n * @todo Center the flow and cover the grid/screen.\n */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\n#if defined(grid_output_motionFull)\n  uniform vec2 rescaleFlow;\n  uniform sampler2D opticalFlow;\n  uniform float dt;\n\n  #ifdef rescale_motion\n    uniform vec2 rescaleMotion;\n  #else\n    const float rescaledMotion = 1.0;\n  #endif\n#endif\n\nvarying vec2 opticalFlowToGrid_uv;\n\n#ifdef grid_output_motionFull\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\nvoid main() {\n  #ifdef grid_output_motionFull\n    #ifdef rescale_motion\n      float rescaledMotion = exponent(rescaleMotion);\n    #endif\n\n    float rescaledFlow = exponent(rescaleFlow);\n    vec2 flow = dt*texture2D(opticalFlow, opticalFlowToGrid_uv).xy*rescaledFlow;\n\n    grid_output_motionFull = flow/rescaledMotion;\n  #endif\n}\n";const{min:rv,max:rh,sign:rg,log2:rb}=Math,{isFinite:rx,isInteger:ry}=Number,{assign:r_}=Object,{parse:rw}=JSON,{createObjectURL:rS}=URL,rM=void 0,rT=R(),rA=(e,n,t,r=[])=>{let[a,i]=e,o=n(a,i);return o?tA(r,e,o):en(r,1,1),t?tC(r,r):r},rz=(e=location.search)=>new URLSearchParams(e),rF=(e,n,t=rz())=>t.get(e)||n,rO=(e,n,t)=>parseFloat(rF(e,n,t),10);function rC(e,n,t){let r=rF(e,n,t);return"true"===r||"false"!==r&&n}const rE=(e,n,t,r=E(e),a)=>A((e,r,i)=>{let o=rO(`${n}[${i}]`,t?.[i],a);return rx(o)?e[i]=o:void 0===e[i]&&delete e[i],e},r,r),rk=(e,n,t)=>z(e=>parseFloat(e,10),parseFloat(rF(e,n,t),10).toExponential().split("e"),0);function rD(e,n,t=tU,r,a){let i=rF(e,n,a),o=t(("#"!==i[0]&&0>i.indexOf("(")?"#":"")+i).buf;return r?r_(r,o):o}async function rU(n){let{$canvas:t,pixelRatio:r=devicePixelRatio}=n,a=e(tM)({canvas:t,pixelRatio:r,extensions:tx(),optionalExtensions:[...tg.extensionsFloat??=["oes_texture_float","webgl_color_buffer_float"],...tg.extensionsDrawBuffers??=["webgl_draw_buffers"],...tg.extensionsInstances??=tb()],...n.api}),{command:i=a,frame:o,texture:s,buffer:f,framebuffer:l,clear:c}=a;!function(n,t={}){let r;console.log("mpm",t);let{command:a=n,buffer:i,elements:o,clear:s,hasExtension:f,now:l,limits:c}=t.api=n,{pointSizeDims:u,lineWidthDims:d}=c,p=(tg.extensionsInstances??=tb()).every(f);t.support={hasInstances:p};let m=t.vertex=[[1,1],[1,0],[0,0],[0,1]],v=t.quad=[[0,1,2],[2,3,0]],h=t.timer?.step??1e3/30;t.timer=eT({to:t,now:h?void 0:()=>1e3*l(),period:1e6,...t.timer,step:h||"-"}),t.g=tf([0,-1e9,100*th],t.g);let g=t.rescale={mass:[1,0],position:[1,0],motion:[1,0],affine:[1,0],deform:[1,0],stress:[1,0],...t.rescale};t.head={to:t,test:"",kernelSize:3,kernelType:"",kernelBase:"",rescales:ts(g),glsl(e=t.head){let{test:n,kernelType:r,kernelSize:a,kernelBase:i,rescales:o,to:s}=e,{rescale:f}=s;return(n?`#define test ${n}
`:"")+(a?`#define kernelSize ${a}
`:"")+(r?`#define kernelType${r}
`:"")+(i?`#define kernelBase${i}
`:"")+A((e,n)=>{let[t,r]=f[n];return e+(t*10**r==1?"":`#define rescale_${n}
`)},o,"")+`
`},...t.head};let b=t.grid={to:t,frag:e(te),detail:90,limit:1e9,bounds:[-1,-1,1,1],boundsIn:[1,1,-1,-1],boundsHit:1,on:!0,...t.grid},{detail:x,limit:y,bounds:_}=b;e3(null,_,y);let w=b.fields=ty(new Map().set("mass",1).set("motionFull",2).set("motionBase",2)),S="grid_",M=[],{index:T,values:F,alias:O}=w,{mass:C,motionFull:k,motionBase:D}=T;M[k]=[k,C],M[D]=[D,C];let U={values:F,alias:O,derives:M},V=b.gpgpu?.steps??2,R=b.gpgpu=e_(n,{to:t,pre:S,maps:U,stepNow:0,steps:V,stepMax:V,side:x,clearPass:!0,macros:{vert:0},frag:(e,{to:{grid:n,head:t}})=>t.glsl(t)+n.frag,uniforms:{boundsIn:(e,n)=>n.to.grid.boundsIn,boundsHit:(e,n)=>n.to.grid.boundsHit,dt:(e,n)=>n.to.timer.dt,g:(e,n)=>n.to.g,rescaleMass:(e,n)=>n.to.rescale.mass,rescaleMotion:(e,n)=>n.to.rescale.motion},...b.gpgpu}),P=R.merge;b.step=(e=b)=>{let n=e.onStep?.(e)??e,{on:t,gpgpu:r}=n;return t&&r.step(r),n};let L=(t.points={to:t}).fields=ty(new Map().set("position",2).set("motion",2).set("mass",1).set("affine",4).set("deform",4).set("stress",4)),N=t.gridToPoints={to:t,frag:e(tn),mass:1,volume:5e-4,volumeSplit:[1e-6,-.001],motionAdjust:.97,positionAdjusts:[0,1],youngMod:5e5,poissonRatio:.3,bulkMod:null,shearMod:null,frictionAngle:40*ne,materialFriction:null,speedClamp:1e9,boundsClamp:!0,spawnOn:{any:!0,out:!0,slow:!1,centre:!1},wander:[-1e-5,.01,1e-6],on:!0,...t.gridToPoints};N.volume??=(()=>{let{volume:e,volumeScale:n}=N;if(null!=e)return e;let[t,r]=b.gpgpu.size.shape;return n/t*(n/r)})();let{index:G,values:B,alias:I}=L,{position:$,motion:K,mass:H,affine:q,deform:X,stress:J}=G,Z=[];Z[$]=[$,K,H],Z[K]=[K,$,H],Z[H]=[H],Z[q]=[$,H],Z[X]=[X,H],Z[J]=[H];let ee={values:B,derives:Z,alias:I},en="points_",et=t_({...tw,pre:S,steps:V,merge:P,macros:{output:0},maps:j({...U,...tw.maps,derives:[[k,D]]})},(e,n)=>n.to.grid.gpgpu);N.link={grid:et};let er=N.gpgpu?.steps??2,{size:ei,merge:eo,bound:es}=N.gpgpu=e_(n,{to:t,pre:en,maps:ee,stepNow:0,steps:er,stepMax:er,scale:8,macros:{vert:0},frag:(e,{to:{gridToPoints:{frag:n,link:t},head:r}})=>r.glsl(r)+t.grid.macros+n,uniforms:{...et.state.uniforms,mass:(e,n)=>n.to.gridToPoints.mass,volume:(e,n)=>n.to.gridToPoints.volume,volumeSplit:(e,n)=>n.to.gridToPoints.volumeSplit,motionAdjust:(e,n)=>n.to.gridToPoints.motionAdjust,positionAdjusts:(e,n)=>n.to.gridToPoints.positionAdjusts,bulkMod(e,{to:{gridToPoints:n}}){let{bulkMod:t,youngMod:r,poissonRatio:a}=n;return t??r/(3*(1-2*a))},shearMod(e,{to:{gridToPoints:n}}){let{shearMod:t,youngMod:r,poissonRatio:a}=n;return t??r/(2*(1+a))},materialFriction(e,{to:{gridToPoints:n}}){let{materialFriction:t,frictionAngle:r}=n;if(null!=t)return t;let a=tv(r);return 1.633*a/(3-a)},speedClamp:(e,n)=>n.to.gridToPoints.speedClamp,boundsClamp:(e,n)=>+(n.to.gridToPoints.boundsClamp||0),spawnOnAny:(e,n)=>+(n.to.gridToPoints.spawnOn.any||0),spawnOnOut:(e,n)=>+(n.to.gridToPoints.spawnOn.out||0),spawnOnSlow:(e,n)=>+(n.to.gridToPoints.spawnOn.slow||0),spawnOnCentre:(e,n)=>+(n.to.gridToPoints.spawnOn.centre||0),wander:(e,n)=>n.to.gridToPoints.wander,dt:(e,n)=>n.to.timer.dt,bounds:(e,n)=>n.to.grid.bounds,chaos:(e,n)=>n.to.chaos,rescaleMass:(e,n)=>n.to.rescale.mass,rescalePosition:(e,n)=>n.to.rescale.position,rescaleMotion:(e,n)=>n.to.rescale.motion,rescaleAffine:(e,n)=>n.to.rescale.affine,rescaleDeform:(e,n)=>n.to.rescale.deform,rescaleStress:(e,n)=>n.to.rescale.stress},...N.gpgpu}),{entries:ef}=ei;N.step=(e=N)=>{let n=e.onStep?.(e)??e,{on:t,gpgpu:r}=n;return t&&r.step(r),n};let el=t.pointsToGrid={to:t,vert:e(tt),frag:e(tr),stretch:1,turn:1,on:!0,blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},...t.pointsToGrid},{[C]:ec,[k]:eu,[D]:ed}=U.valueToPass,ep=el.size={},em=ep.splats=(el.splats=new Set().add(ec).add(eu).add(ed)).size,ev=ep.instances=ef*em,eg=t_({...tw,pre:en,steps:er,merge:eo,macros:{output:0},maps:j({...ee,...tw.maps,derives:[[$,K,H,q,J]]})},(e,n)=>n.to.gridToPoints.gpgpu),eb=t_({...tw,pre:S,steps:V,merge:P,macros:{samples:0,taps:0},maps:j({...U,...tw.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);el.link={points:eg,grid:eb};let ex=el.quads??=u[1]<3,ey=el.instanced??=p&&ex,ew=el.batch??=!ey&&em>1,eS=el.order??=ey?"point-splat":"splat-point",eM=el.form??=ex?v:null,ez=ep.forms=eM?.length??1,eF=ep.formVertexes=eM?.[0]?.length??1,eO=el.formSource??=ex?m:[[.5,.5]],eC=ep.formSources=eO.length;ep.pointVertexes=ez*eF;let eE=ep.formSourcesSplats=eC*em,ek=ep.instancesSources=ev*eC;el.pass=a(el.pipeline={vert:(e,{vert:n,quads:t,link:{points:r,grid:a},to:{head:i}})=>i.glsl(i)+(t?"#define points_grid_quads\n\n":"")+r.macros+a.macros+n,frag:(e,{frag:n,quads:t,link:r,to:{head:a}})=>a.glsl(a)+(t?"#define points_grid_quads\n\n":"")+r.grid.macros+n,primitive:(e,n)=>n.quads?"triangles":"points",attributes:{vertex:ex?i(el.vertex=ey||ew?eO:z((e,n)=>ea(n,eO),E(ek),0)):el.vertex={constant:eO},index:ey?{...el.index="splat-point"===eS?{buffer:z((e,n)=>n,E(ef),0),divisor:em}:{buffer:z((e,n)=>n%ef,E(ev),0),divisor:1},buffer:i(el.index.buffer)}:ew?"splat-point"===eS&&((e,n,t)=>(el.index??=[])[t]??={constant:tl(t/n.splats.size)}):"splat-point"===eS&&i(el.index=z((e,n)=>tl(n/eE),E(ek),0)),splat:ey?{...el.splat="splat-point"===eS?{buffer:z((e,n)=>n%em,E(ev),0),divisor:1}:{buffer:z((e,n)=>n,E(em),0),divisor:ef},buffer:i(el.splat.buffer)}:ew?"splat-point"===eS&&((e,n,t)=>(el.splat??=[])[t]??={constant:t%n.splats.size}):"splat-point"===eS&&i(el.splat=z((e,n)=>n%eE,E(ek),0))},uniforms:{...eg.state.uniforms,...eb.state.uniforms,stretch:(e,n)=>n.stretch,turn:(e,n)=>n.turn,bounds:(e,n)=>n.to.grid.bounds,rescaleMotion:(e,n)=>n.to.rescale.motion,rescaleMass:(e,n)=>n.to.rescale.mass,rescaleAffine:(e,n)=>n.to.rescale.affine,rescaleStress:(e,n)=>n.to.rescale.stress,loop:(e,n)=>n.to.timer.loop},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},elements:eM?o(el.elements=ey||ew?eM:z((e,n)=>e5([],ea(n,eM),tl(n/ez)*eC),E(ev*ez),0)):el.elements=null,count:(e,{instanced:n,batch:t,size:{pointVertexes:r,instances:a}})=>r*(n||t?1:a),instances:(e,{instanced:n,size:t})=>n?t.instances:1,framebuffer:(e,{to:n,framebuffer:t=eh(n.grid.gpgpu)})=>t?.framebuffer}),el.step=(e=el)=>{let n=e.onStep?.(e)??e,{on:t,batch:r,pass:a,size:i,to:o}=n;if(!t)return n;let{gpgpu:s,fields:f}=o.grid,l=n;return r&&E(l=n.batchStates??=[],n,0,l.length=i.instances),a(l),s.merge?.update?.(s),n};let eD=t.screen={to:t,size:[1,1],aspect:[1,1],clears:{color:[0,0,0,0],depth:1},clear:(e=eD)=>s(e.clears)},eU=t.gridToScreen={to:t,frag:e(ta),paceLinear:!1,ranges:[[0,1e10],[0,1e5]],curves:[z((e,n,t)=>E(2,n/(t.length-1)),E(4),0),z((e,n,t)=>E(2,n/(t.length-1)),E(4),0)],colorHi:[1,1,1,.15],colorLo:[0,0,0,0],angleHSLA:n6("hsla(0deg, 80%, 70%, 0.5)").buf,on:!0,...t.gridToScreen},eV=t_({...tS,bound:+!P,pre:S,steps:V,merge:P,macros:{output:0},maps:j({...U,...tS.maps,derives:[[k,C]]})},(e,n)=>n.to.grid.gpgpu);eU.link={grid:eV},eU.pass=a(eU.pipeline={vert:(e,{link:n,to:{head:t,grid:r}})=>t.glsl(t)+n.grid.macros+r.gpgpu.vert,frag:(e,{frag:n,link:t,to:{head:r},angleHSLA:a,paceLinear:i})=>r.glsl(r)+t.grid.macros+(a?.[3]?"#define angleHSLA angleHSLA\n\n":"")+(i?"#define paceLinear\n\n":"")+n,attributes:{[S+"position"]:R.positions},uniforms:{...eV.state.uniforms,angleHSLA:(e,n)=>n.angleHSLA,range:(e,{ranges:n,paceLinear:t})=>n[+t],...A((e,n,t)=>(e[`curve[${t}]`]=(e,{curves:n,paceLinear:r})=>n[+r][t],e),eU.curves[0],{}),colorHi:(e,n)=>n.colorHi,colorLo:(e,n)=>n.colorLo,aspect:(e,n)=>n.to.screen.aspect,rescaleMotion:(e,n)=>n.to.rescale.motion},blend:{enable:!0,func:{src:1,dst:"one minus src alpha"}},depth:{enable:!1},count:R.count,framebuffer:(e,n)=>n.framebuffer}),eU.draw=(e=eU)=>{let n=e.onDraw?.(e)??e,{on:t,pass:r}=n;return t&&r(n),n};let eR=t.pointsToScreen={to:t,vert:e(ti),frag:e(to),form:1,colorHi:[1,1,1,.5],colorLo:[0,0,0,0],colorImage:null,colorBy:[0,0],flip:[1,-1],offset:[0,0,0,0],aspectImage:[1,1],useDiscard:!1,lengthLinear:!1,wideHi:[.004,4e-6],wideLo:[.002,2e-6],widths:[,u,d],primitives:[,"points","lines"],blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},count:null,on:!0,...t.pointsToScreen},eP=+!eo,eL=er-eP,eN=t_({...tS,bound:eP,pre:en,steps:er,merge:eo,macros:{output:0},maps:j({...ee,...tS.maps,derives:[[$,H]]})},(e,n)=>n.to.gridToPoints.gpgpu);eR.link={points:eN};let eG=eR.counts=z((e,n)=>n&&((e=1,n=2,t=1)=>n7(1,e-n+1)*n*t)(eL,n,ef),E(3),0);eR.pass=a(eR.pipeline={vert:(e,{vert:n,colorImage:t,link:r,to:{head:a}})=>a.glsl(a)+(t?"#define colorImage colorImage\n\n":"")+r.points.macros+n,frag:(e,{frag:n,link:t,to:{head:r},useDiscard:a,lengthLinear:i})=>r.glsl(r)+t.points.macros+(a?"#define useDiscard\n\n":"")+(i?"#define lengthLinear\n\n":"")+n,primitive:(e,{form:n,primitives:t})=>t[n],attributes:{index:z((e,n)=>n,E(W(r=tu(...eG))?r:((e=1,n=1)=>e?.entries??(Y(e)??1)*(Q(n)??1))(r)),0)},uniforms:{...eN.state.uniforms,form:(e,n)=>n.form,colorHi:(e,n)=>n.colorHi,colorLo:(e,n)=>n.colorLo,colorImage:(e,n)=>n.colorImage,colorBy:(e,n)=>n.colorBy,flip:(e,n)=>n.flip,offset:(e,n)=>n.offset,aspectImage:(e,n)=>n.aspectImage,wideHi:(e,{wideHi:n,lengthLinear:t,widths:r,form:a,to:i})=>eA(n[+t]*tc(...i.screen.size),...r[a]),wideLo:(e,{wideLo:n,lengthLinear:t,widths:r,form:a,to:i})=>eA(n[+t]*tc(...i.screen.size),...r[a]),widths:(e,{widths:n,form:t})=>n[t],size:(e,n)=>n.to.screen.size,aspectScreen:(e,n)=>n.to.screen.aspect,dt:(e,n)=>n.to.timer.dt,bounds:(e,n)=>n.to.grid.bounds,rescaleMass:(e,n)=>n.to.rescale.mass,rescalePosition:(e,n)=>n.to.rescale.position},lineWidth:(e,{wideHi:n,lengthLinear:t,widths:r,to:a})=>eA(n[+t]*tc(...a.screen.size),...r[2]),blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,{count:n,counts:t,form:r})=>n??t[r],framebuffer:(e,n)=>n.framebuffer}),eR.draw=(e=eR)=>{let n=e.onDraw?.(e)??e,{on:t,pass:r}=n;return t&&r(n),n},t.uses={tick:!0,clear:!0,update:!0,draw:!0,post:!0,log:!1,...t.uses},t.linksBy??=1,t.passes??=6,t.passAt=0,t.tick=(e=t)=>{let n=e.onTick?.(e)??e,{uses:r,timer:a}=n;if(!r.tick)return n;let{time:i,period:o}=eT(a);return a.loop=td((i+o)%(2*o)-o),n},t.clear=(e=t)=>{let n=e.onClear?.(e)??e,{uses:r,screen:a}=n;return r.clear&&a.clear(a),n};let eB=(e,n,t)=>console.log(e+"."+n,e+"-"+t?._framebuffer?.id);t.update=(e=t)=>{let n=e.onUpdate?.(e)??e,{uses:r,pointsToGrid:a,grid:i,gridToPoints:o,linksBy:s}=n,{update:f,log:l}=r;if(!f)return n;let{step:c,pipeline:u}=a,{step:d,gpgpu:p}=i,{pipeline:m,clear:v}=p,{step:h,gpgpu:g}=o,{pipeline:b}=g;return n.chaos=tp(),v(p),l&&eB("g","clear",eh(p)?.framebuffer),c(a),l&&eB("pg","step",u.framebuffer(0,a)),d(i),l&&eB("g","step",m.framebuffer(0,p)),s&&p.stepBy(p,s),l&&eB("g","stepBy",m.framebuffer(0,p)),h(o),l&&eB("gp","step",b.framebuffer(0,g)),s&&g.stepBy(g,s),l&&eB("gp","stepBy",b.framebuffer(0,g)),n},t.reset=(e=t)=>{let n=e.onReset?.(e)??e,{gridToPoints:r,update:a}=n,{gpgpu:i}=r,o=i.clearPass;return i.clearPass??=r.clears,r.clears=i.clear(i).clearPass,i.clearPass=o,a(n),n},t.draw=(e=t)=>{let n=e.onDraw?.(e)??e,{uses:r,gridToScreen:a,pointsToScreen:i}=n;return r.draw&&(a.draw(a),i.draw(i)),n},t.post=(e=t)=>{let n=e.onPost?.(e)??e,{uses:r,grid:a,gridToPoints:i,linksBy:o}=n;if(!r.post)return n;if(o){let e=a.gpgpu,n=i.gpgpu;e.stepBy(e,-o),n.stepBy(n,-o)}return n},t.pass=(e=t)=>{let n=e.onPass?.(e)??e,{tick:r,clear:a,update:i,draw:o,post:s,uses:{log:f}}=n;return f&&console.groupCollapsed(Date.now()),r(n),a(n),i(n),o(n),s(n),f&&console.groupEnd(),n},t.step=(e=t)=>{let n=e.onStep?.(e)??e,{passes:r,pass:a,timer:i,tick:o,clear:s,update:f,draw:l,post:c,uses:u}=n;if(1===r)return a(n);let{log:d}=u,{time:p}=i,{time:m,dt:v}=o(n).timer,h=i.dt=v/r;for(d&&console.groupCollapsed(Date.now()),i.time=p,s(n),n.passAt=0;n.passAt<r;++n.passAt)i.time+=h,f(n);return i.time=m,i.dt=v,n.passAt=0,l(n),c(n),d&&console.groupEnd(),n},t.frame=()=>t.step()}(a,n);let{grid:u,gridToScreen:d,pointsToScreen:p}=n,{fields:{index:m},gpgpu:v}=u,{pre:h,size:g,merge:b,maps:x}=v,y=n.demo={to:n,...n.demo},_=V.replaceAll(P,"opticalFlow_"),w=[1,-1],S=y.opticalFlow={to:n,vert:_,frag:e(rp),count:D,gap:3,lambda:.001,alpha:100,flip:[-1,-1],aspect:[1,1],size:[0,0],offset:[0,0,1,1],at:0,$root:null,on:!0,...y.opticalFlow,media:{facingMode:"user",video:!0,...y.opticalFlow?.media},input:{data:document.createElement("video"),min:"linear",mag:"linear",...y.opticalFlow?.input},frames:z(()=>s(),E(2),0),blend:{enable:!0,func:{src:1,dst:0}},depth:{enable:!1},framebuffer:l({colorType:"float",depth:!1,stencil:!1})};S.pass=i(S.pipeline={vert:(e,n)=>n.vert,frag:(e,n)=>n.frag,attributes:{opticalFlow_position:f(rT)},uniforms:{next:(e,{frames:n,at:t})=>ea(t,n),past:(e,{frames:n,at:t})=>ea(t+1,n),gap:(e,n)=>n.gap,lambda:(e,n)=>n.lambda,alpha:(e,n)=>n.alpha,flip:(e,n)=>n.flip,offset:(e,n)=>n.offset,frameAspect:(e,n)=>n.aspect,screenAspect:(e,n)=>n.to.screen.aspect},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>n.framebuffer}),S.step=(e=S)=>{let n=e.onStep?.(e)??e,{on:t,pass:r,at:a,frames:i,input:o}=n;return t&&(i[n.at=(a+1)%i.length].subimage(o.data),r(n)),n};let T=V.replaceAll(P,"opticalFlowToGrid_"),F=y.opticalFlowToGrid={to:n,vert:T,frag:e(rm),count:D,rescaleFlow:[2,5],blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},onStep:null,...y.opticalFlowToGrid},O=t_({...tw,pre:h,steps:g.steps,merge:b,macros:{samples:0,taps:0},maps:j({...x,...tw.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);F.link={grid:O},F.pass=i(F.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:t,to:{head:r}})=>r.glsl(r)+t.grid.macros+n,attributes:{opticalFlowToGrid_position:f(rT)},uniforms:{...O.state.uniforms,rescaleFlow:(e,n)=>n.rescaleFlow,opticalFlow:(e,n)=>n.to.demo.opticalFlow.framebuffer.color[0],dt:(e,n)=>n.to.timer.dt,rescaleMotion:(e,n)=>n.to.rescale.motion},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>eh(n.to.grid.gpgpu)?.framebuffer}),F.step=(e=F)=>{let n=e.onStep?.(e)??e,{pass:t,to:{demo:r,grid:a}}=n;if(!r.opticalFlow.on)return n;let{gpgpu:i,fields:o}=a,{maps:s,passNow:f,stepBy:l}=i;l(i,-1),i.passNow=s.valueToPass[o.index.motionFull],t(n),i.merge?.update?.(i),i.passNow=f,l(i,1)},S.setup=async()=>{let{demo:{opticalFlow:e,opticalFlowToGrid:t},gridToPoints:r}=n,{$root:a,input:i,frames:o,setup:s,offset:f,flip:l,aspect:c,size:u}=e,d=r.gpgpu,{onStep:p}=d,m=i.data,v=a?.appendChild?.(m)?.style,{videoWidth:h,videoHeight:g}=m;await m.play(),rA(en(u,h,g),rh,!0,c),e.framebuffer.resize(h,g),e.gap/=rh(h,g),M(e=>e(i),o),v&&(v.transform=`scale(${A((e,n,t)=>e+(e?",":"")+n*w[t],l,"")})`,v.objectFit="cover",v.aspectRatio=h/g),d.onStep=e=>{let n=p?.(e)??e,{passAt:t,demo:{opticalFlow:r,opticalFlowToGrid:a}}=n.to;return t||r.step(r),a.step(a),n},e.on=!0,m.removeEventListener("canplay",s)};let C=S.start=async(e=S)=>{let{media:n,setup:t,input:{data:r}}=e;if(!n.video)return e;try{let a=e.stream=await navigator.mediaDevices.getUserMedia(n);r.addEventListener("canplay",t),"srcObject"in r?r.srcObject=a:r.src=rS(a)}catch(e){console.warn(e)}return e};S.stop=(e=S)=>{let{input:{data:n},$root:t}=e;return M(e=>e.stop(),n.srcObject?.getTracks?.()),t?.removeChild?.(n),e.on=!1,e};let k=y.gridFade={to:n,frag:e(ru),fade:.002,expose:0,scale:30,order:"next",on:!0,...y.gridFade},U="gridFade_",R=k.fields=ty(new Map().set("fade",4)),L=k.derives=[],{index:N,values:G,alias:B}=R,{fade:I}=N;L[I]=[I];let $={values:G,alias:B,derives:L};k.gpgpu=e_(a,{to:n,pre:U,steps:2,stepMax:2,stepNow:0,passNow:0,shape:[...g.shape],maps:$,merge:!1,macros:{vert:0},frag:(e,{to:{demo:{gridFade:{frag:n,type:t,quality:r}}}})=>(t?`#define type ${t}

`:"")+(r?`#define quality ${r}

`:"")+n,type:"uint8",min:"linear",mag:"linear",uniforms:{fade:(e,n)=>n.to.demo.gridFade.fade,expose:(e,n)=>n.to.demo.gridFade.expose,scale:(e,n)=>n.to.demo.gridFade.scale,colorLo:(e,n)=>n.to.gridToScreen.colorLo,dt:(e,n)=>n.to.timer.dt,chaos:(e,n)=>n.to.chaos}}),k.step=(e=k)=>{let{on:n,type:t,gpgpu:r}=e;if(!n)return e;let{step:a}=r;return a(r),(1===t||"typeGauss"===t)&&a(r),e};let K=y.gridFadeToScreen={to:n,frag:e(rd),blend:{enable:!0,func:{src:1,dst:"one minus src alpha"}},depth:{enable:!1}},H=t_({...tS,pre:U,steps:2,merge:!1,macros:{output:0},maps:j({...$,...tS.maps,derives:[[I]]})},(e,n)=>n.to.demo.gridFade.gpgpu);K.link={gridFade:H},K.pass=i(K.pipeline={vert:(e,n)=>n.to.demo.gridFade.gpgpu.vert,frag:(e,{frag:n,link:{gridFade:t},to:{head:r}})=>r.glsl(r)+t.macros+n,attributes:{gridFade_position:f(rT)},uniforms:{...H.state.uniforms},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.to.demo.gridFade.gpgpu.count}),K.draw=(e=K)=>{let{pass:n,to:t}=e;return t.demo.gridFade.on&&n(e),e};let{onDraw:q}=d,{onDraw:X}=p;return d.onDraw=e=>{let n=q?.(e)??e,{gridFade:t}=n.to.demo,{on:r,order:a,step:i,gpgpu:o}=t;return"past"===a&&i(t),e.framebuffer=r?eh(o)?.framebuffer:null,n},p.onDraw=e=>{let n=X?.(e)??e,{gridFade:t,gridFadeToScreen:r}=n.to.demo,{order:a,step:i}=t;return"next"===a&&i(t),r.draw(r),n},y.view??=[],y.resize=(e=y)=>{let n=e.onResize?.(e)??e,{to:t,gridFade:a,view:i,onResized:o}=n,{$canvas:s,screen:f,grid:l}=t,[c=innerWidth,u=innerHeight]=i,{bounds:d,limit:p,detail:m,gpgpu:v}=l,h=v.size.shape,{size:g,aspect:b}=f,[x,_]=e1(g,en(g,c,u),r);return s.width=x,s.height=_,rA(g,rh,!1,b),z((e,n)=>p*rg(e)*ea(n,b),d,0),v.resize(e1(h,b,m)),a.gpgpu.resize(g),rA(g,rh,!0,b),o?.(n,x,_)},y.fps=(y.fps??!0)!==!0?y.fps:e(tV)({style:"color: #fff; background-color: #0006;"}),y.start=async(e=y)=>{let{opticalFlow:n,resize:t,to:{timer:r,frame:a}}=e;n.on&&await C(),addEventListener("resize",()=>t()),t();let i=r.step;return y.queued=rx(i)?function e(){return y.queued=setTimeout(()=>y.queued=o(()=>e(a().demo.queued.cancel())),i)}():o(a),e},self.mpm=n}function rV(e){e.at??=0}function rR(e,n,t){let r;r=e.at,e.at=r+(n.at-r)*t}function rP(e,n=rV){let t=null==e||isFinite(e)?{by:e}:e;return n?.(t)??t}var rL=function(e,n,t,r={}){return r.eases=e??=E(3).fill(.05,1),r.make=n??=rV,r.mix=t??=rR,r.easeTo=({eases:e,make:n,mix:t}=r)=>((e,n,t=rR)=>A((r,a,i)=>{let o=e[i-1]=rP(r,n),s=rP(a,n);return e[i]=t(s,o,s.by??=.05)??s},e))(e,n,t),r},rN={};rN="/** Audio-visual fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float sampleRate;\nuniform vec2 dbRange;\nuniform sampler2D spectrogram;\nuniform float by;\nuniform vec4 axis;\nuniform vec2 hues;\nuniform vec2 sats;\nuniform vec2 lits;\nuniform float turn;\nuniform vec2 mirror;\nuniform vec4 fade;\nuniform float curveTime;\nuniform float flip;\nuniform vec2 curve[4];\n\nuniform vec2 aspect;\n\nvarying vec2 audioVisual_uv;\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\nconst float log10 = log(10.0);\n\nfloat when_gt_2281831123(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_2281831123(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_2281831123(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_2281831123(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_1062606552(float x, float y) {\n  return 1.0 - when_gt_2281831123(x, y);\n}\n\nvec2 when_le_1062606552(vec2 x, vec2 y) {\n  return 1.0 - when_gt_2281831123(x, y);\n}\n\nvec3 when_le_1062606552(vec3 x, vec3 y) {\n  return 1.0 - when_gt_2281831123(x, y);\n}\n\nvec4 when_le_1062606552(vec4 x, vec4 y) {\n  return 1.0 - when_gt_2281831123(x, y);\n}\n\nconst float PI = 3.14159265359;\n\nfloat range(float vmin, float vmax, float value) {\n  return (value - vmin) / (vmax - vmin);\n}\n\nvec2 range(vec2 vmin, vec2 vmax, vec2 value) {\n  return (value - vmin) / (vmax - vmin);\n}\n\nvec3 range(vec3 vmin, vec3 vmax, vec3 value) {\n  return (value - vmin) / (vmax - vmin);\n}\n\nvec4 range(vec4 vmin, vec4 vmax, vec4 value) {\n  return (value - vmin) / (vmax - vmin);\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n/**\n * Cubic Bézier interpolation, CSS-style.\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\n * corresponding `y` value using the Bézier curve; note that this doesn't\n * directly use the usual `t` value as input for interpolation.\n *\n * @todo Split up and generalise, add to `bezier-gen` or other package.\n *\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n */\n\n// Code generated by `bezier-gen` - start:\n\nfloat bezier(float cp0, float cp1, float cp2, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n    float p3 = mix(cp3, cp4, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n    p2 = mix(p2, p3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\n// Code generated by `bezier-gen` - end.\n\n// float bezier(float p0, float p1, float p2, float p3, float t) {\n//   float u = 1.0-t;\n\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\n// }\n\n/** @todo Generalise to other orders. */\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\n  float u = 1.0-t;\n\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\n}\n\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\n  float t = x;\n\n  // Netwon's method iteration.\n  for(int i = 0; i < 4; ++i) {\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\n    float error = xt-x;\n\n    // Newton's iteration.\n    t = clamp(t-(error/dtx), 0.0, 1.0);\n  }\n\n  // Now that we have `t`, compute the corresponding `y` value.\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\n}\n\n#ifdef drawMel\n  /** @see [Hertz to Mel scale](https://en.wikipedia.org/wiki/Mel_scale#:~:text=equal%20pitch%20increments.-,Formula,-%5Bedit%5D) */\n  float hzToMel(float hz) { return 2595.0*(log(1.0+(hz/7e2))/log10); }\n  /** @see [Mel scale to Hertz](https://en.wikipedia.org/wiki/Mel_scale#:~:text=The%20corresponding%20inverse%20expressions%20are) */\n  float melToHz(float mel) { return 7e2*(pow(10.0, mel/2595.0)-1.0); }\n#endif\n\n#ifndef drawDB\n  /** @see [Decibel to amplitude](https://blog.demofox.org/2015/04/14/decibels-db-and-amplitude/#:~:text=To%20convert%20from%20dB,amplitude%20%3D%2010%5E(db/20)) */\n  float dbToAmp(float db) { return pow(10.0, db/20.0); }\n#endif\n\n#ifndef drawRound\n  float atLine(vec2 p, vec2 at, vec2 to) { return dot(p-at, to)/dot(to, to); }\n\n  vec2 onLine(vec2 p, vec2 at, vec2 to) { return at+(atLine(p, at, to)*to); }\n#endif\n\nvoid main() {\n  vec2 uv = mix(-v1, v1, audioVisual_uv);\n\n  uv = mix(uv, abs(uv), mirror);\n\n  #ifdef drawRound\n    vec2 center = (uv-axis.xy)/aspect;\n    float t = range(axis.z, axis.w, length(center))+when_le_1062606552(axis.w, axis.z);\n  #else\n    vec2 axisTo = axis.zw-axis.xy;\n    float t = atLine(uv, axis.xy, axisTo);\n  #endif\n\n  t = pow(t, curveTime);\n\n  #ifdef drawRound\n    float a = range(-PI, PI, atan(center.y, center.x));\n    float hz = fract(a+0.5+turn);\n  #else\n    float hz = range(flip, -flip, atLine(uv, axis.xy, normalize(axisTo.yx)));\n  #endif\n\n  #ifdef drawMel\n    float nyquist = sampleRate*0.5;\n    float f = melToHz(hz*hzToMel(nyquist))/nyquist;\n  #else\n    float f = hz;\n  #endif\n\n  float to = texture2D(spectrogram, fract(vec2(t+by, f))).a;\n\n  #ifndef drawDB\n    to = range(dbToAmp(dbRange.x), dbToAmp(dbRange.y),\n      dbToAmp(mix(dbRange.x, dbRange.y, to)));\n  #endif\n\n  /** @todo Use curves here too instead of powers. */\n  to *= clamp(pow(fract(abs(t)), fade.x), 0.0, 1.0)*\n    clamp((1.0-abs(mix(-1.0, 1.0, f)))/fade.z, 0.0, 1.0)*\n    when_le_1062606552(0.0, t)*when_le_1062606552(t, 1.0)*when_le_1062606552(0.0, f)*when_le_1062606552(f, 1.0);\n\n  to = clamp(xToY(curve[0], curve[1], curve[2], curve[3], to), 0.0, 1.0);\n\n  float hue = mix(hues.x, hues.y, hz)/360.0;\n  float sat = mix(sats.x, sats.y, to);\n  float lit = mix(lits.x, lits.y, to);\n\n  vec4 color = vec4(hsl2rgb(hue, sat, lit), to);\n\n  gl_FragColor = color;\n}\n";var rG={};rG="/** Form-flow fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nformFlow_useSamples\n\n#ifdef formFlow_output_signedDistance\n  formFlow_useReads_signedDistance\n\n  #ifdef formFlow_mergedStates\n    uniform sampler2D formFlow_states;\n  #else\n    uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n  #endif\n\n  #ifndef spreadRadius\n    #define spreadRadius 0\n  #endif\n  #if (spreadRadius < 0) || (0 < spreadRadius)\n    #define spreadRadius0 spreadRadius\n    #define spreadRadius1 spreadRadius\n  #else\n    #define spreadRadius0 0\n    #define spreadRadius1 1\n  #endif\n\n  #ifndef opticalFlowRadius\n    #define opticalFlowRadius 0\n  #endif\n  #if (opticalFlowRadius < 0) || (0 < opticalFlowRadius)\n    #define opticalFlowRadius0 opticalFlowRadius\n    #define opticalFlowRadius1 opticalFlowRadius\n  #else\n    #define opticalFlowRadius0 0\n    #define opticalFlowRadius1 1\n  #endif\n\n  uniform float formFlow_stepNow;\n  uniform vec4 formFlow_stateShape;\n\n  /** The full SDF image. */\n  uniform sampler2D sdf;\n  /** The rate the field spreads. */\n  uniform vec4 spans;\n  /** How much of the central value to keep; all of it if negative. */\n  uniform float keep;\n\n  uniform vec2 flip;\n  uniform vec2 aspect;\n  uniform vec4 offset;\n  // uniform vec2 size;\n\n  uniform vec2 aspectScreen;\n  uniform vec2 aspectOptical;\n\n  /** The current optical-flow frame. */\n  uniform sampler2D opticalFlow;\n  uniform vec2 opticalFlowSize;\n\n  uniform float dt;\n\n  uniform vec2 rescaleOpticalFlow;\n  uniform vec2 rescaleSpreadPace;\n  uniform vec2 rescaleSpreadSpan;\n#endif\n\nvarying vec2 formFlow_uv;\n\n#if defined(formFlow_output_signedDistance)\n  float map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n  float when_gt_529295689(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_529295689(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_529295689(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_529295689(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_1062606552(float x, float y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec2 when_le_1062606552(vec2 x, vec2 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec3 when_le_1062606552(vec3 x, vec3 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec4 when_le_1062606552(vec4 x, vec4 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\n  float when_lt_1604150559(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1604150559(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1604150559(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1604150559(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\n  /**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  float spreadSample(vec2 uv) {\n    formFlow_tapState(uv);\n\n    return formFlow_data[formFlow_reads_signedDistance_signedDistance]\n      .formFlow_channels_signedDistance;\n  }\n#endif\n\nvoid main() {\n  #if defined(formFlow_output_signedDistance)\n    float rescaledOpticalFlow = exponent(rescaleOpticalFlow);\n    float rescaledSpreadPace = exponent(rescaleSpreadPace);\n    float rescaledSpreadSpan = exponent(rescaleSpreadSpan);\n\n    vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n    // vec2 uv = formFlow_uv;\n\n    #ifdef blurGauss\n      #if blurGauss < 5\n        vec3 blurWeights = vec3(0.2042, 0.3040, 0.0938);\n      #else\n        float blurWeights[5];\n\n        blurWeights[0] = 0.2270;\n        blurWeights[1] = 0.1946;\n        blurWeights[2] = 0.1210;\n        blurWeights[3] = 0.0540;\n        blurWeights[4] = 0.0162;\n      #endif\n\n      vec2 texelSize = 1.0/formFlow_stateShape.xy;\n      vec2 sds = vec2(spreadSample(uv)*blurWeights[0]);\n\n      sds.x += spreadSample(uv+vec2(texelSize.x, 0))*blurWeights[1];\n      sds.x += spreadSample(uv-vec2(texelSize.x, 0))*blurWeights[1];\n      sds.x += spreadSample(uv+vec2(2.0*texelSize.x, 0))*blurWeights[2];\n      sds.x += spreadSample(uv-vec2(2.0*texelSize.x, 0))*blurWeights[2];\n\n      sds.y += spreadSample(uv+vec2(0, texelSize.y))*blurWeights[1];\n      sds.y += spreadSample(uv-vec2(0, texelSize.y))*blurWeights[1];\n      sds.y += spreadSample(uv+vec2(0, 2.0*texelSize.y))*blurWeights[2];\n      sds.y += spreadSample(uv-vec2(0, 2.0*texelSize.y))*blurWeights[2];\n\n      #if blurGauss > 5\n        sds.x += spreadSample(uv+vec2(3.0*texelSize.x, 0))*blurWeights[3];\n        sds.x += spreadSample(uv-vec2(3.0*texelSize.x, 0))*blurWeights[3];\n        sds.x += spreadSample(uv+vec2(4.0*texelSize.x, 0))*blurWeights[4];\n        sds.x += spreadSample(uv-vec2(4.0*texelSize.x, 0))*blurWeights[4];\n\n        sds.y += spreadSample(uv+vec2(0, 3.0*texelSize.y))*blurWeights[3];\n        sds.y += spreadSample(uv-vec2(0, 3.0*texelSize.y))*blurWeights[3];\n        sds.y += spreadSample(uv+vec2(0, 4.0*texelSize.y))*blurWeights[4];\n        sds.y += spreadSample(uv-vec2(0, 4.0*texelSize.y))*blurWeights[4];\n      #endif\n\n      float to = (sds.x+sds.y)*0.5;\n    #else\n      float spreadPace = rescaledSpreadPace*dt;\n      vec3 spread = vec3(0);\n\n      for(int sx = -spreadRadius0; sx <= spreadRadius1; ++sx) {\n        for(int sy = -spreadRadius0; sy <= spreadRadius1; ++sy) {\n          vec2 by = rescaledSpreadSpan*vec2(sx, sy);\n\n          // float sd = spreadSample(offsetUV(formFlow_uv+(by/formFlow_stateShape.xy),\n          //   formFlow_stateShape.xy));\n          float sd = spreadSample(uv+(by/formFlow_stateShape.xy));\n\n          #ifdef lengthLinear\n            float fade = length(by);\n          #else\n            float fade = dot(by, by);\n          #endif\n\n          float kept = when_le_1062606552(fade, 0.0);\n          float blurry = 1.0-kept;\n\n          /** Central value unaltered, offset values aggregated. */\n          spread.x += sd*kept;\n          spread.y += sd*spreadPace*blurry;\n          spread.z += fade*blurry;\n        }\n      }\n\n      float to =\n        (spread.x*mix(keep*dt, 1.0, when_lt_1604150559(keep, 0.0)))+(spread.y/spread.z);\n    #endif\n\n    vec2 st = ((fract(uv*flip)*(aspect/aspectScreen))/offset.zw)-offset.xy;\n    float full = map(texture2D(sdf, st).a, spans.x, spans.y, spans.z, spans.w);\n\n    #if opticalFlowRadius0 < opticalFlowRadius1\n      /** @todo Update this to handle different sizes and scales. */\n      vec2 pq = uv;\n      // vec2 pq = ((fract(uv*flip)*(aspect/aspectOptical))/offset.zw)-offset.xy;\n      vec3 flow = vec3(0);\n\n      /** @todo Finish multi-sampling optical-flow to allow lower resolutions. */\n      for(int ox = -opticalFlowRadius0; ox <= opticalFlowRadius1; ++ox) {\n        for(int oy = -opticalFlowRadius0; oy <= opticalFlowRadius1; ++oy) {\n          flow.xy += texture2D(opticalFlow, pq+(vec2(ox, oy)/opticalFlowSize)).xy;\n          ++flow.z;\n        }\n      }\n\n      flow.xy = (flow.xy/flow.z)*rescaledOpticalFlow*dt;\n\n      to = min(to+dot(flow.xy, flow.xy), full);\n    #else\n      to = min(to, full);\n    #endif\n\n    /** Mask out anything out of range. */\n    formFlow_output_signedDistance = to*when_le_1062606552(spans.z, to)*when_le_1062606552(to, spans.w);\n  #endif\n}\n";var rB={};rB="/** Form-flow-to-grid fragment shader. */\n\nprecision highp float;\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#define GLSLIFY 1\n#endif\n\nformFlow_useSamples\n\n#ifdef grid_output_motionFull\n  formFlow_useReads_signedDistance\n\n  #ifdef formFlow_mergedStates\n    uniform sampler2D formFlow_states;\n  #else\n    uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n  #endif\n\n  uniform float formFlow_stepNow;\n  uniform vec4 formFlow_stateShape;\n\n  uniform float limit;\n  uniform vec2 detail;\n  uniform vec4 normalTo;\n  uniform vec2 rescaleFormFlow;\n  uniform vec2 rescaleMotion;\n  uniform float dt;\n#endif\n\nvarying vec2 formFlow_uv;\n\n#if defined(grid_output_motionFull)\n  float map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n  float when_gt_1604150559(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\n  /**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  float sampleSDF(vec2 uv) {\n    formFlow_tapState(uv);\n\n    return formFlow_data[formFlow_reads_signedDistance_signedDistance]\n      .formFlow_channels_signedDistance;\n  }\n\n  float sampleSDF(vec3 uv) { return sampleSDF(uv.xy); }\n  float sampleSDF(vec4 uv) { return sampleSDF(uv.xy); }\n\n  /**\n * SDF normal method of `glsl-sdf-normal`, in more dimensions.\n *\n * @see [3D `glsl-sdf-normal` implementation](https://github.com/glslify/glsl-sdf-normal/blob/master/index.glsl)\n * @see [Original Inigo Quilez article](https://iquilezles.org/articles/normalsSDF/)\n * @see [Original Inigo Quilez ShaderToy](https://www.shadertoy.com/view/ldfSWs)\n *\n * @todo Verify this works as expected other than in 3 dimensions.\n */\n\n#define createToNormal(vec, n, sample, gt) \\\n \\\nvec toNormal(vec at, float offset, float eps, out vec to) { \\\n  vec by = vec(1); \\\n   \\\n  to = by*sample(at+(by*offset)); \\\n   \\\n  for(int i = 0; i < n; ++i) { \\\n    by = vec(-1); \\\n    by[i] = 1.0; \\\n    to += by*sample(at+(by*offset)); \\\n  } \\\n   \\\n  float l = length(to); \\\n  float ok = gt(l, eps); \\\n   \\\n  return (to = (to*ok)/mix(1.0, l, ok)); \\\n} \\\n \\\nvec toNormal(vec at, float offset, float eps) { \\\n  vec to; \\\n   \\\n  return toNormal(at, offset, eps, to); \\\n} \\\n \\\nvec toNormal(vec at, float offset) { return toNormal(at, offset, offset); } \\\n \\\nvec toNormal(vec at) { return toNormal(at, 1e-3); }\n\ncreateToNormal(vec2, 2, sampleSDF, when_gt_1604150559)\ncreateToNormal(vec3, 3, sampleSDF, when_gt_1604150559)\ncreateToNormal(vec4, 4, sampleSDF, when_gt_1604150559)\n\n  const vec2 v1 = vec2(1);\n#endif\n\nvoid main() {\n  #if defined(grid_output_motionFull)\n    float rescaledFormFlow = exponent(rescaleFormFlow);\n    float rescaledMotion = exponent(rescaleMotion);\n    vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n    // vec2 uv = formFlow_uv;\n    /** @todo Fix this 2D version. */\n    // vec2 normal = toSDFNormal(uv, detail.s, detail.t);\n    vec2 normal = toNormal(uv.xyy, detail.s, detail.t).xy;\n    /** @todo Can this extra tap be removed? */\n    float on = when_gt_1604150559(sampleSDF(uv), limit);\n\n    vec2 to = rescaledFormFlow*\n      map(normal*on, -v1, v1, normalTo.xy, normalTo.zw);\n\n    grid_output_motionFull = to/rescaledMotion;\n  #endif\n}\n";var rI={};rI="/** Form-flow-to-points cache fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\npoints_useSamples\npoints_useReads_mass\n\n#ifdef points_mergedStates\n  uniform sampler2D points_states;\n#else\n  uniform sampler2D points_states[points_stepsPast*points_textures];\n#endif\n\nuniform vec4 points_stateShape;\nuniform float points_stepNow;\n\nvarying vec2 formFlow_uv;\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\nvoid main() {\n  points_tapState(offsetUV(formFlow_uv, points_stateShape.xy));\n  // points_tapState(formFlow_uv);\n\n  // Copy the values across to the cache.\n  gl_FragColor = points_data[0];\n}\n";var r$={};r$="/** Form-flow-to-points main fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nformFlow_useSamples\nformFlow_useReads_signedDistance\n\n#ifdef formFlow_mergedStates\n  uniform sampler2D formFlow_states;\n#else\n  uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n#endif\n\nuniform float formFlow_stepNow;\nuniform vec4 formFlow_stateShape;\n\nuniform vec4 points_stateShape;\n\nuniform sampler2D cache;\nuniform float formSpawn;\nuniform vec2 massSpawn;\n\nuniform float dt;\nuniform vec4 bounds;\n\n#ifdef rescale_mass\n  uniform vec2 rescaleMass;\n#else\n  const float rescaledMass = 1.0;\n#endif\n\nvarying vec2 formFlow_uv;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat when_gt_1604150559(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_eq_1117569599(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec2 when_eq_1117569599(vec2 x, vec2 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec3 when_eq_1117569599(vec3 x, vec3 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec4 when_eq_1117569599(vec4 x, vec4 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\nhighp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nconst vec4 seed = vec4(0.34238, -0.86761, 0.69201, 0.57872);\nconst vec2 off = vec2(-1, 1)*0.49;\n\nvec2 by(vec2 v) { return vec2(random(v.xy+seed.xy), random(v.yx+seed.zw)); }\n\nvec3 by(vec3 v) {\n  return vec3(random(v.xy+seed.xy), random(v.zx+seed.zw), random(v.xz+seed.zx));\n}\n\n#define createSpawn(f, vec, off0, off1) \\\n \\\nvec f(vec at, vec lo, vec hi) { return mix(lo, hi, by(at)); } \\\n \\\nvec f(vec at, vec lo, vec hi, vec scale) { \\\n  return mix(lo, hi, at+(mix(off0, off1, by(at))*scale)); \\\n}\n\ncreateSpawn(spawn, vec2, off.xx, off.yy)\ncreateSpawn(spawn, vec3, off.xxx, off.yyy)\n\nconst vec2 v1 = vec2(1);\nconst vec2 v0 = v1*0.0;\n\nvoid main() {\n  // Copy the values across from the cache.\n  vec4 cached = texture2D(cache, offsetUV(formFlow_uv, points_stateShape.xy));\n  // vec4 cached = texture2D(cache, formFlow_uv);\n\n  gl_FragColor = cached;\n\n  #ifdef rescale_mass\n    float rescaledMass = exponent(rescaleMass);\n  #endif\n\n  vec2 spawnPosition =\n    spawn(formFlow_uv, bounds.xy, bounds.zw, 1.0/points_stateShape.xy);\n\n  vec2 spawnUV = map(spawnPosition, bounds.xy, bounds.zw, v0, v1);\n\n  formFlow_tapState(offsetUV(spawnUV, formFlow_stateShape.xy));\n  // formFlow_tapState(spawnUV);\n\n  float sd = formFlow_data[formFlow_reads_signedDistance_signedDistance]\n    .formFlow_channels_signedDistance;\n\n  /**\n   * @todo Animate mass towards respawn, by either a range threshold or steady\n   *   animation, without letting points get stuck by missing the threshold?\n   */\n  float massAt = cached.points_channels_mass*rescaledMass;\n  float formIn = when_gt_1604150559(sd, formSpawn);\n  float formInPast = when_eq_1117569599(massAt, massSpawn.x);\n  float massTo = mix(mix(massAt, massSpawn.y, formInPast), massSpawn.x, formIn);\n\n  gl_FragColor.points_channels_mass = massTo/rescaledMass;\n}\n";var rK={};rK="/** Form-flow-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nformFlow_useSamples\nformFlow_useReads_signedDistance\n\n#ifdef formFlow_mergedStates\n  uniform sampler2D formFlow_states;\n#else\n  uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n#endif\n\nuniform float formFlow_stepNow;\nuniform vec4 formFlow_stateShape;\n\nuniform sampler2D form;\nuniform vec2 curve[4];\nuniform vec2 flip;\nuniform vec2 aspect;\nuniform vec4 offset;\n\nuniform vec2 aspectScreen;\n\nvarying vec2 formFlow_uv;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat when_gt_1117569599(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1117569599(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1117569599(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1117569599(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_529295689(float x, float y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec2 when_le_529295689(vec2 x, vec2 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec3 when_le_529295689(vec3 x, vec3 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec4 when_le_529295689(vec4 x, vec4 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n * Where `spreadUV` is for lookup ranges, `offsetUV` is for lookup queries.\n *\n * @see [`spreadUV`](./spread-uv.glsl)\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[pad=0.5]` Texel `pad` to offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The `uv` offset by `pad` to texel center, expect range\n *   `[0+pad, 1-pad]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 pad) {\n  return ((uv*(size-1.0))+pad)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float pad) {\n  return offsetUV(uv, float(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 pad) {\n  return offsetUV(uv, vec2(size), pad);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n/**\n * Cubic Bézier interpolation, CSS-style.\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\n * corresponding `y` value using the Bézier curve; note that this doesn't\n * directly use the usual `t` value as input for interpolation.\n *\n * @todo Split up and generalise, add to `bezier-gen` or other package.\n *\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n */\n\n// Code generated by `bezier-gen` - start:\n\nfloat bezier(float cp0, float cp1, float cp2, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n    float p3 = mix(cp3, cp4, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n    p2 = mix(p2, p3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\n// Code generated by `bezier-gen` - end.\n\n// float bezier(float p0, float p1, float p2, float p3, float t) {\n//   float u = 1.0-t;\n\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\n// }\n\n/** @todo Generalise to other orders. */\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\n  float u = 1.0-t;\n\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\n}\n\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\n  float t = x;\n\n  // Netwon's method iteration.\n  for(int i = 0; i < 4; ++i) {\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\n    float error = xt-x;\n\n    // Newton's iteration.\n    t = clamp(t-(error/dtx), 0.0, 1.0);\n  }\n\n  // Now that we have `t`, compute the corresponding `y` value.\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\n}\n\nvoid main() {\n  vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n  // vec2 uv = formFlow_uv;\n\n  formFlow_tapState(uv);\n\n  float sd = formFlow_data[formFlow_reads_signedDistance_signedDistance]\n    .formFlow_channels_signedDistance;\n\n  float to =\n    clamp(xToY(curve[0], curve[1], curve[2], curve[3], sd), 0.0, 1.0);\n\n  vec2 ar = aspect/aspectScreen;\n\n  gl_FragColor = to*texture2D(form, ((fract(uv*flip)*ar)/offset.zw)-offset.xy);\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";const{min:rj,max:rH,abs:rq,sign:rW,random:rY,round:rQ,PI:rX,TAU:rJ=2*rX}=Math,{assign:rZ}=Object,{stringify:r0,parse:r1}=JSON,r2=void 0,r3=R(),r5=rz(),r4=document.body,r6=r4.querySelector("canvas");var r8={};r8=new URL("test.28ab4560.png",import.meta.url).toString();var r9={};r9=new URL("test.498d74a2.png",import.meta.url).toString(),(async()=>{let n=((e=rz(),n="")=>({pixelRatio:rO(n+"pixelRatio",rh(devicePixelRatio,1)||1,e),timer:{step:rO(n+"timer.step",1e3/30,e)},g:rE(3,n+"g",rM,rM,e),pointsToGrid:{on:rC(n+"pointsToGrid.on",!0,e),quads:rC(n+"pointsToGrid.quads",rM,e),instanced:rC(n+"pointsToGrid.instanced",rM,e),batch:rC(n+"pointsToGrid.batch",rM,e),order:rF(n+"pointsToGrid.order",rM,e)},grid:{on:rC(n+"grid.on",!0,e),detail:rO(n+"grid.detail",90,e),limit:rO(n+"grid.limit",1e9,e),bounds:rE(4,n+"grid.bounds",[-1,-1,1,1],rM,e),boundsIn:rE(4,n+"grid.boundsIn",[1,1,-1,-1],rM,e),boundsHit:rO(n+"grid.boundsHit",1,e)},gridToPoints:{on:rC(n+"gridToPoints.on",!0,e),gpgpu:{scale:rO(n+"gridToPoints.gpgpu.scale",9,e),steps:rO(n+"gridToPoints.gpgpu.steps",2,e)},mass:rO(n+"gridToPoints.mass",1,e),volume:rO(n+"gridToPoints.volume",5e-4,e),volumeSplit:rE(2,n+"gridToPoints.volumeSplit",[1e-6,-.001],rM,e),motionAdjust:rO(n+"gridToPoints.motionAdjust",.97,e),positionAdjusts:rE(2,n+"gridToPoints.positionAdjusts",[0,1],rM,e),wander:rE(3,n+"gridToPoints.wander",[-1e-5,.01,1e-6],rM,e),spawnOn:{any:rC(n+"gridToPoints.spawnOn.any",!0,e),out:rC(n+"gridToPoints.spawnOn.out",!0,e),slow:rC(n+"gridToPoints.spawnOn.slow",!1,e),centre:rC(n+"gridToPoints.spawnOn.centre",!1,e)},speedClamp:rO(n+"gridToPoints.speedClamp",1e9,rM,e),boundsClamp:rC(n+"gridToPoints.boundsClamp",!0,e)},gridToScreen:{on:rC(n+"gridToScreen.on",!0,e),colorHi:rD(n+"gridToScreen.colorHi","#000b",rM,rM,e),colorLo:rD(n+"gridToScreen.colorLo","#0000",rM,rM,e),angleHSLA:rD(n+"gridToScreen.angleHSLA","hsla(0deg 50% 50% / 0.2)",n6,rM,e)},pointsToScreen:{on:rC(n+"pointsToScreen.on",!0,e),colorHi:rD(n+"pointsToScreen.colorHi","#f847",rM,rM,e),colorLo:rD(n+"pointsToScreen.colorLo","#0000",rM,rM,e),form:rO(n+"pointsToScreen.form",1,e)},demo:{fps:rC(n+"demo.fps",rM,e),opticalFlow:{on:rC(n+"demo.opticalFlow.on",!0,e),media:(()=>{let t,r={},a=n+"demo.opticalFlow.media.video",i=rF(a,rM,e),o="true"===i;if(o||"false"===i)return r.video=o,r;let s=rO(a+".width",rM,e),f=rO(a+".height",rM,e);return ry(s)&&((t??=r.video={}).width=s),ry(f)&&((t??=r.video={}).height=f),r})(),$root:(()=>{let t=rC(n+"demo.opticalFlow.$root",rM,e);return!0===t?document.body:t&&document.querySelector(t)})(),flip:rE(2,n+"demo.opticalFlow.flip",[-1,-1],rM,e),offset:rE(4,n+"demo.opticalFlow.offset",[0,0,1,1],rM,e)},opticalFlowToGrid:{rescaleFlow:rE(2,n+"demo.opticalFlowToGrid.rescaleFlow",[2,5],rM,e)},gridFade:{on:rC(n+"demo.gridFade.on",!0,e),fade:rO(n+"demo.gridFade.fade",.002,e)}},passes:rO(n+"passes",2,e)}))(r5);rZ(n,{g:rE(3,"g",[0,0,-1e3],void 0,r5),gridToPoints:{...n.gridToPoints,boundsClamp:rC("gridToPoints.boundsClamp",!1,r5),gpgpu:{...n.gridToPoints?.gpgpu,scale:rO("gridToPoints.gpgpu.scale",9.3,r5)}},grid:{...n.grid,boundsHit:rO("grid.boundsHit",-1,r5)},pointsToScreen:{...n.pointsToScreen,colorHi:rD("pointsToScreen.colorHi","#0fe4",void 0,void 0,r5),colorLo:rD("pointsToScreen.colorLo","#0000",void 0,void 0,r5)},gridToScreen:{...n.gridToScreen,colorHi:rD("gridToScreen.colorHi","#0005",void 0,void 0,r5)},demo:{...n.demo,fps:rC("demo.fps",!1,r5),opticalFlow:{...n.demo?.opticalFlow,on:rC("demo.opticalFlow.on",!1,r5)},gridFade:{...n.demo?.gridFade,on:rC("demo.gridFade.on",!1,r5)}},app:{...n.app,resetLoop:rO("app.resetLoop",0,r5),formFlow:{...n.app?.formFlow,keep:rO("app.formFlow.keep",-1,r5),rescaleSpreadPace:rk("app.formFlow.rescaleSpreadPace","2e3",r5)},formFlowToGrid:{...n.app?.formFlowToGrid,rescaleFormFlow:rk("app.formFlowToGrid.rescaleFormFlow","5e5",r5)},formFlowToPoints:{...n.app?.formFlowToPoints,massSpawn:rE(2,"app.formFlowToPoints.massSpawn",void 0,[-1e3,null],r5)},formFlowToScreen:{...n.app?.formFlowToScreen,curve:[rE(2,"app.formFlowToScreen.curve[0]",[0,0],void 0,r5),rE(2,"app.formFlowToScreen.curve[1]",[0,0],void 0,r5),rE(2,"app.formFlowToScreen.curve[2]",[1,1],void 0,r5),rE(2,"app.formFlowToScreen.curve[3]",[1,1],void 0,r5)]},audioVisual:{...n.app?.audioVisual,float:rC("app.audioVisual.float",!1,r5),volume:rO("app.audioVisual.volume",20,r5),smooth:rO("app.audioVisual.smooth",0,r5),turn:rO("app.audioVisual.turn",.25,r5),curveTime:rO("app.audioVisual.curveTime",.3,r5),flip:rO("app.audioVisual.flip",1,r5),drawRound:rC("app.audioVisual.drawRound",!1,r5),drawDB:rC("app.audioVisual.drawDB",!0,r5),drawMel:rC("app.audioVisual.drawMel",!0,r5),mirror:rE(2,"app.audioVisual.mirror",[1,0],void 0,r5),fade:rE(4,"app.audioVisual.fade",[.9,.2,0,0],void 0,r5),axis:rE(4,"app.audioVisual.axis",[0,0,1,0],void 0,r5),hues:rE(2,"app.audioVisual.hues",[240,50],void 0,r5),sats:rE(2,"app.audioVisual.sats",[.8,1],void 0,r5),lits:rE(2,"app.audioVisual.lits",[.5,.7],void 0,r5),size:{...n.app?.audioVisual.size,time:rO("app.audioVisual.size.time",70,r5),fft:rO("app.audioVisual.size.fft",2048,r5)},media:{...n.app?.audioVisual.media,audio:{...n.app?.audioVisual.media.audio,sampleRate:rO("app.audioVisual.audio.sampleRate",-1,r5),sampleSize:rO("app.audioVisual.audio.sampleSize",16,r5),latency:rO("app.audioVisual.audio.latency",0,r5),channelCount:rO("app.audioVisual.audio.channelCount",2,r5),echoCancellation:rC("app.audioVisual.audio.echoCancellation",!1,r5),noiseSuppression:rC("app.audioVisual.audio.noiseSuppression",!1,r5),autoGainControl:rC("app.audioVisual.audio.autoGainControl",!1,r5)}},curve:[rE(2,"app.audioVisual.curve[0]",[0,0],void 0,r5),rE(2,"app.audioVisual.curve[1]",[.6,0],void 0,r5),rE(2,"app.audioVisual.curve[2]",[1,2],void 0,r5),rE(2,"app.audioVisual.curve[3]",[1,2],void 0,r5)]}}}),parseFloat(n.timer.step,10),n.$canvas=r6,n.app.audioVisual?.float&&((n.api??={}).extensions??=[]).push(...tx(),"oes_texture_float_linear"),await rU(n);let{api:t,g:r,grid:a,points:i,pointsToGrid:o,gridToPoints:s,gridToScreen:l,pointsToScreen:c,demo:u,onDraw:d,reset:p}=n,{start:m,opticalFlow:v,opticalFlowToGrid:g,gridFade:b,onResized:x}=u,{command:y=t,texture:_,buffer:S,framebuffer:T}=t,F=n.app={to:n,...n.app},O=F.audioVisual={volume:1,smooth:0,turn:.25,curveTime:1,flip:1,drawRound:!1,drawDB:!1,drawMel:!1,...F.audioVisual,mirror:rZ([0,0],F.audioVisual?.mirror),fade:rZ([.2,.1,.1,.1],F.audioVisual?.fade),axis:rZ([0,0,0,1],F.audioVisual?.axis),hues:rZ([240,50],F.audioVisual?.hues),sats:rZ([240,50],F.audioVisual?.sats),lits:rZ([240,50],F.audioVisual?.lits),size:{time:20,fft:2048,...F.audioVisual?.size},media:{...F.audioVisual?.media,audio:{sampleRate:-1,sampleSize:16,latency:0,channelCount:2,echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1,...F.audioVisual?.media.audio}},aspect:[1,1],curve:M((e,n)=>rZ(e,F.audioVisual?.curve?.[n]),[[0,0],[0,0],[1,1],[1,1]]),to:n,vert:V.replaceAll(P,"audioVisual_"),frag:e(rN),count:D,blend:{enable:!1,func:{src:1,dst:0}},depth:{enable:!1},at:0,context:new AudioContext,gain:void 0,analyser:void 0,source:void 0,stream:void 0,bins:{data:void 0,width:1,height:void 0},spectrogram:_({channels:1,format:"alpha",min:"linear",mag:"linear",type:F.audioVisual?.float?"float32":"uint8"}),framebuffer:T(),cache:{}};O.setup=async(e=O)=>{let{bins:n,spectrogram:t,media:r,volume:a,smooth:i,size:{time:o,fft:s},context:f,gain:l=e.gain=new GainNode(f,{gain:a}),analyser:c=e.analyser=new AnalyserNode(f,{fftSize:s,smoothingTimeConstant:i})}=e,u=c.frequencyBinCount;n.data=new("float32"===t.type?Float32Array:Uint8Array)(n.height=u),t.resize(o,u);let{audio:d}=r;return d.sampleRate<0&&(d.sampleRate=f.sampleRate),(e.source=f.createMediaStreamSource(e.stream=await navigator.mediaDevices.getUserMedia(r))).connect(l),l.connect(c),e},O.pass=y(O.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,drawRound:t,drawDB:r,drawMel:a})=>(t?"#define drawRound\n\n":"")+(r?"#define drawDB\n\n":"")+(a?"#define drawMel\n\n":"")+n,attributes:{audioVisual_position:S(r3)},uniforms:{sampleRate:(e,n)=>n.context.sampleRate,dbRange:(e,{cache:n,analyser:{minDecibels:t,maxDecibels:r}})=>f(n.dbRange??=[],t,r),spectrogram:(e,n)=>n.spectrogram,by:(e,{at:n,spectrogram:t})=>n/(t.width-1),axis:(e,n)=>n.axis,hues:(e,n)=>n.hues,sats:(e,n)=>n.sats,lits:(e,n)=>n.lits,fade:(e,n)=>n.fade,mirror:(e,n)=>n.mirror,turn:(e,n)=>n.turn,curveTime:(e,n)=>n.curveTime,flip:(e,n)=>n.flip,aspect:(e,n)=>n.aspect,...A((e,n,t)=>(e[`curve[${t}]`]=(e,n)=>n.curve[t])&&e,O.curve,{})},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>n.framebuffer}),O.draw=(e=O)=>{let{at:n,context:t,analyser:r,gain:a,volume:i,smooth:o,bins:s,spectrogram:f,pass:l}=e;return"suspended"===t.state&&t.resume(),a.gain.value=i,r.smoothingTimeConstant=o,r[`get${"float32"===f.type?"Float":"Byte"}FrequencyData`](s.data),f.subimage(s,n),l(e),e.at=(n+1)%f.width,e},O.resize=(e=O)=>{let{framebuffer:n,aspect:t,to:r}=e,{size:a}=r.screen;return n.resize(...a),rA(a,rj,!0,t),e},O.setup();let C=F.media={all:{audioVisual:{rgb:O.framebuffer,sdf:O.framebuffer,offset:rE(4,"app.media.all.audioVisual.offset",[0,0,1,1],r2,r5)},test:{rgb:new URL(r8),sdf:new URL(r9),offset:rE(4,"app.media.all.test.offset",[0,0,1,1],r2,r5)}},at:rF("app.media.at","audioVisual",r5)},k=F.ease={formFlow:{spans:rL(E(3).fill(rO("app.ease.formFlow.spans",.2,r5),1),e=>{e.at??=[.5,1,0,1]},({at:e},{at:n},t)=>{w(e,e,n,t)})},formToPoints:{colorBy:rL(E(3).fill(rO("app.ease.formToPoints.colorBy",.1,r5),1))}};k.formFlow.spans.easeTo(),k.formToPoints.colorBy.easeTo();let U=F.formFlow={to:n,frag:e(rG),input:{data:void 0,channels:1,format:"alpha",mag:"linear",min:"linear"},inputs:{$image:void 0,data:void 0,hook:void 0},get sdf(){return(delete this.sdf)&&(this.sdf=_())},spans:k.formFlow.spans.eases.at(-1).at,keep:-1,flip:[-1,-1],aspect:[1,1],size:[0,0],spreadRadius:-1,opticalFlowRadius:-1,lengthLinear:!1,rescaleOpticalFlow:[6,-1],rescaleSpreadPace:[2,-1],rescaleSpreadSpan:[[1,1],[7,-1]],spanToHiPick:[.1,1],on:!0,...F.formFlow},R="formFlow_",L=U.fields=ty(new Map().set("signedDistance",1)),N=U.derives=[],{index:G,values:B,alias:I}=L,{signedDistance:$}=G;N[$]=[$];let{merge:K,maps:H}=U.gpgpu=e_(t,{to:n,pre:R,steps:2,side:1,maps:{values:B,alias:I,derives:N},macros:{vert:0},frag:(e,n)=>{let{frag:t,lengthLinear:r,spreadRadius:a,blurGauss:i,opticalFlowRadius:o}=n.to.app.formFlow;return(r?"#define lengthLinear\n\n":"")+(a?`#define spreadRadius ${a}

`:"")+(i?`#define blurGauss ${i}

`:"")+(o?`#define opticalFlowRadius ${o}

`:"")+t},uniforms:{sdf:(e,{to:{app:{formFlow:{inputs:n,sdf:t}}}})=>n.hook??t,keep:(e,n)=>n.to.app.formFlow.keep,spans:(e,n)=>n.to.app.formFlow.spans,flip:(e,n)=>n.to.app.formFlow.flip,aspect:(e,n)=>n.to.app.formFlow.aspect,size:(e,n)=>n.to.app.formFlow.size,offset:(e,{to:{app:{media:{all:n,at:t}}}})=>n[t].offset,rescaleOpticalFlow:(e,n)=>n.to.app.formFlow.rescaleOpticalFlow,rescaleSpreadPace:(e,n)=>n.to.app.formFlow.rescaleSpreadPace,rescaleSpreadSpan:(e,n)=>{let{rescaleSpreadSpan:t,lengthLinear:r}=n.to.app.formFlow;return t[+r]},dt:(e,n)=>n.to.timer.dt,aspectScreen:(e,n)=>n.to.screen.aspect,opticalFlow:(e,n)=>n.to.demo.opticalFlow.framebuffer.color[0],opticalFlowSize:(e,n)=>n.to.demo.opticalFlow.size}});U.step=(e=U)=>{let{on:n,setup:t,input:r,inputs:a,gpgpu:i,to:o}=e;return n&&((a.hook||r.data===a.data)&&t(e),o.app.ease.formFlow.spans.easeTo(),i.step(i)),e},U.setup=(e=U)=>{let{inputs:n,input:t,sdf:r,aspect:a,size:i,gpgpu:o,to:s}=e,{app:l,pixelRatio:c}=s,{hook:u}=n,{width:d,height:p}=u??t.data??r,{resize:m,size:{shape:[v,g]}}=o;return u||r(t),f(i,d,p),d!==v&&p!==g&&m(h(null,i,c)),rA(i,rH,!0,a),W.detail[0]=1/rH(d,p),e},U.start=async(e=U)=>{let{setup:n,input:t,inputs:r,sdf:a,to:i}=e,{all:o,at:s}=i.app.media,f=o[s]?.sdf;if(r.hook=void 0,!f)return n(e);let{href:l,call:c}=f;if(l){let e=t.data=r.$image??=new Image;e.src="",a(t);let n=new Promise(n=>e.addEventListener("load",function t(){n(e.removeEventListener("load",t))}));(e.src=l)&&await n}else c===Function.call?r.hook=f:t.data=r.data=f;return n(e)};let q=V.replaceAll(P,R),W=F.formFlowToGrid={on:!0,limit:.01,...F.formFlowToGrid,detail:rZ([1,.001],F.formFlowToGrid?.detail),normalTo:rZ([1,1,-1,-1],F.formFlowToGrid?.normalTo),rescaleFormFlow:rZ([1,6],F.formFlowToGrid.rescaleFormFlow),to:n,vert:q,frag:e(rB),count:D,blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1}},Y=t_({...tw,pre:R,steps:2,merge:K,macros:{output:0},maps:j({...H,...tw.maps,derives:[[$]]})},(e,n)=>n.to.app.formFlow.gpgpu),{fields:{index:Q},gpgpu:X}=a,{pre:J,size:Z,merge:ee,maps:en}=X,et=t_({...tw,pre:J,steps:Z.steps,merge:ee,macros:{samples:0,taps:0},maps:j({...en,...tw.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);W.link={formFlow:Y,grid:et},W.pass=y(W.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:{formFlow:t,grid:r},to:{head:a}})=>a.glsl(a)+t.macros+r.macros+n,attributes:{formFlow_position:S(r3)},uniforms:{...Y.state.uniforms,limit:(e,n)=>n.limit,detail:(e,n)=>n.detail,normalTo:(e,n)=>n.normalTo,rescaleFormFlow:(e,n)=>n.rescaleFormFlow,rescaleMotion:(e,n)=>n.to.rescale.motion,dt:(e,n)=>n.to.timer.dt},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>eh(n.to.grid.gpgpu)?.framebuffer}),W.step=(e=W)=>{if(!e.on)return e;let{pass:n,to:{grid:{gpgpu:t,fields:r}}}=e,{maps:a,passNow:i,stepBy:o}=t;return o(t,-1),t.passNow=a.valueToPass[r.index.motionFull],n(e),t.merge?.update?.(t),t.passNow=i,o(t,1),e};let er=F.formFlowToPoints={to:n,at:0,vert:q,frags:[e(rI),e(r$)],count:D,formSpawn:0,massSpawn:[-1e3,null],blend:{enable:!1},depth:{enable:!1},cache:void 0,output:void 0,on:!1,...F.formFlowToPoints},ea=t_({...tw,pre:R,steps:2,merge:K,macros:{output:0},maps:j({...H,...tw.maps,derives:[[$]]})},(e,n)=>n.to.app.formFlow.gpgpu),{index:{mass:ei}}=i.fields,{gpgpu:eo}=s,{pre:es,size:ef,merge:el,maps:ec}=eo,eu=t_({...tw,pre:es,steps:ef.steps,merge:el,maps:j({...ec,...tw.maps,derives:E(ei+1,[ei],ei)})},(e,n)=>n.to.gridToPoints.gpgpu);er.link={formFlow:ea,gridToPoints:eu},er.pass=y(er.pipeline={vert:(e,n)=>n.vert,frag:(e,{at:n,frags:t,link:r,to:{head:a}})=>{let{formFlow:i,gridToPoints:o}=r;return a.glsl(a)+i.macros+o.macros+t[n]},attributes:{formFlow_position:S(r3)},uniforms:{...ea.state.uniforms,...eu.state.uniforms,cache:(e,n)=>n.cache,formSpawn:(e,n)=>n.formSpawn,massSpawn:(e,{massSpawn:n,to:t})=>null==n[1]?E(n,t.gridToPoints.mass,1):n,rescaleMass:(e,n)=>n.to.rescale.mass,dt:(e,n)=>n.to.timer.dt,bounds:(e,n)=>n.to.grid.bounds},blend:{enable:(e,n)=>n.blend.enable},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>{let{at:t,to:r,output:a=n.output={}}=n,i=a.framebuffer,{gpgpu:o}=r.gridToPoints,{textures:s,stepNow:f,maps:{valueToTexture:l,alias:c}}=o,{[c.indexOf("mass")]:u}=l,d=s[f][u];return rZ(a,eh(o)).color=t?d.texture:n.cache?.(d)??(n.cache=_(d)),a.framebuffer=(i??T)(a)}}),er.step=(e=er)=>{if(!e.on)return e;let{pass:n,to:{gridToPoints:{gpgpu:t}}}=e,{maps:r,passNow:a,stepBy:i}=t,{valueToPass:o,alias:s}=r;return i(t,-1),t.passNow=o[s.indexOf("mass")],e.at=0,n(e),++e.at,i(t,1),n(e),t.merge?.update?.(t),t.passNow=a,e};let ed=F.formFlowToScreen={on:!0,...F.formFlowToScreen,curve:M((e,n)=>rZ(e,F.formFlowToScreen?.curve?.[n]),[[0,0],[.1,0],[-.25,1.5],[1,1.5]]),to:n,vert:q,frag:e(rK),count:D,input:{data:void 0,mag:"linear",min:"linear"},inputs:{$image:void 0,data:void 0,hook:void 0},get form(){return(delete this.form)&&(this.form=_())},blend:{enable:!0,func:{src:1,dst:"one minus src alpha"}},depth:{enable:!1}},ep=t_({...tS,pre:R,steps:2,merge:K,macros:{output:0},maps:j({...H,...tS.maps,derives:[[$]]})},(e,n)=>n.to.app.formFlow.gpgpu);ed.link={formFlow:ep},ed.pass=y(ed.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:t,to:{head:r}})=>r.glsl(r)+t.formFlow.macros+n,attributes:{formFlow_position:S(r3)},uniforms:{...ep.state.uniforms,form:(e,{inputs:n,form:t})=>n.hook??t,flip:(e,{flip:n,to:t})=>n??t.app.formFlow.flip,aspect:(e,{aspect:n,to:t})=>n??t.app.formFlow.aspect,size:(e,{size:n,to:t})=>n??t.app.formFlow.size,offset:(e,{to:{app:{media:{all:n,at:t}}}})=>n[t].offset,...A((e,n,t)=>(e[`curve[${t}]`]=(e,n)=>n.curve[t])&&e,ed.curve,{}),aspectScreen:(e,n)=>n.to.screen.aspect},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count}),ed.draw=(e=ed)=>{let{on:n,pass:t,setup:r,input:a,inputs:i}=e;return(i.hook||a.data===i.data)&&r(e),n&&t(e),e},ed.setup=(e=ed)=>{let{inputs:n,input:t,form:r,size:a,aspect:i,to:o}=e,{pointsToScreen:s,app:{media:{all:l,at:c}}}=o,{hook:u}=n;if(u||r(t),s.offset=l[c].offset,!a||!i)return e;let{width:d,height:p}=u??t.data??r;return rA(f(a,d,p),rH,!0,i),e},ed.start=async(e=ed)=>{let{setup:n,input:t,inputs:r,form:a,to:i}=e,{all:o,at:s}=i.app.media,f=o[s]?.rgb;if(r.hook=void 0,!f)return n(e);let{href:l,call:c}=f;if(l){let e=t.data=r.$image??=new Image;e.src="",a(t);let n=new Promise(n=>e.addEventListener("load",function t(){n(e.removeEventListener("load",t))}));(e.src=l)&&await n}else c===Function.call?r.hook=f:t.data=r.data=f;return n(e)};let em=F.formToPoints={colorByPick:[-1,0]};f(c.colorBy,0,2),c.flip=ed.flip??U.flip,c.colorImage=ed.form,c.aspectImage=ed.aspect??U.aspect;let ev=eo.onStep;eo.onStep=e=>{let n=ev?.(e)??e,{app:t,passAt:r,pointsToScreen:a}=n.to,{formFlow:i,formFlowToGrid:o,formFlowToPoints:s,ease:f,audioVisual:l}=t;return r||(l.draw(l),i.step(i),a.colorBy[0]=f.formToPoints.colorBy.easeTo().at),o.step(o),s.step(s),n},n.onDraw=e=>{let n=d?.(e)??e,{formFlowToScreen:t}=n.app;return t.draw(t),n},u.onResized=e=>{let n=x?.(e)??e,{audioVisual:t}=n.to.app;return t.resize(t),n};let eg=F.formSwap={wait:{hold:2500,loop:3e4},on:!0,at:null,queued:null,order:z((e,n)=>n+1,E(1),0),keys:{a:()=>eg.to("audioVisual"),t:()=>eg.to("test"),h:()=>eg.keys.j(),1:()=>eg.keys.j(),"\\":()=>eg.flip(),"[":()=>eg.loop(),"]":()=>eg.stop()},hold:()=>new Promise(e=>setTimeout(e,eg.wait.hold)),flip:()=>{let e=eg.on=!eg.on,{formFlow:n,formToPoints:t}=k;return n.spans.eases[0].at[3]=U.spanToHiPick[+e],t.colorBy.eases[0].at=em.colorByPick[+e],eg},go:async()=>await Promise.all([U.start(),ed.start()])&&eg,to:async e=>{let{flip:n,hold:t,go:r}=eg;return n(),await t(),C.at=e,await r(),await t(),n(),eg},next(){let{keys:e,order:n,at:t}=eg;return e[n[eg.at=(null==t?0:t+1)%n.length]](),eg},stop:()=>(eg.queued=clearInterval(eg.queued),eg),loop(){let{stop:e,next:n,wait:{loop:t,hold:r}}=eg;return e(),n(),eg.queued=setInterval(n,t+2*r),eg}},eb=F.keys={" ":()=>p(),Enter:()=>r6.requestFullscreen()},ex=F.resetLoop??=9e5;ex&&setInterval(()=>p(),ex),r4.addEventListener("keyup",({key:e})=>(eg.keys[e]??eb[e])?.()),eg.go(),m()})();